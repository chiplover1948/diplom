// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk



function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  var LIMIT = Math.pow(2, 31); // 2GB is a practical maximum, as we use signed ints as pointers
                               // and JS engines seem unhappy to give us 2GB arrays currently
  if (DYNAMICTOP >= LIMIT) return false;

  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    if (TOTAL_MEMORY < LIMIT/2) {
      TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY); // double until 1GB
    } else {
      var last = TOTAL_MEMORY;
      TOTAL_MEMORY = alignMemoryPage((3*TOTAL_MEMORY + LIMIT)/4); // add smaller increments towards 2GB, which we cannot reach
      if (TOTAL_MEMORY <= last) return false;
    }
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  if (TOTAL_MEMORY >= LIMIT) return false;




  try {
    if (ArrayBuffer.transfer) {
      buffer = ArrayBuffer.transfer(buffer, TOTAL_MEMORY);
    } else {
      var oldHEAP8 = HEAP8;
      buffer = new ArrayBuffer(TOTAL_MEMORY);
    }
  } catch(e) {
    return false;
  }

  var success = _emscripten_replace_memory(buffer);
  if (!success) return false;

  // everything worked

  Module['buffer'] = buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  if (!ArrayBuffer.transfer) {
    HEAP8.set(oldHEAP8);
  }


  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 25056;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__I_000101() } }, { func: function() { __GLOBAL__sub_I_bindings_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });
  

/* memory initializer */ allocate([136,12,0,0,35,58,0,0,0,13,0,0,43,58,0,0,0,0,0,0,8,0,0,0,0,13,0,0,52,58,0,0,1,0,0,0,8,0,0,0,136,12,0,0,89,58,0,0,0,13,0,0,95,58,0,0,0,0,0,0,48,0,0,0,0,13,0,0,102,58,0,0,1,0,0,0,48,0,0,0,136,12,0,0,110,58,0,0,136,12,0,0,132,58,0,0,0,13,0,0,142,58,0,0,0,0,0,0,88,0,0,0,0,13,0,0,152,58,0,0,1,0,0,0,88,0,0,0,0,13,0,0,172,58,0,0,0,0,0,0,96,0,0,0,0,13,0,0,183,58,0,0,1,0,0,0,96,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,85,85,85,85,229,63,0,0,0,0,0,0,240,63,85,85,85,85,85,85,213,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,209,69,23,93,116,225,63,0,0,0,0,0,0,240,63,116,209,69,23,93,116,225,63,70,23,93,116,209,69,183,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,222,63,0,0,0,0,0,0,240,63,102,102,102,102,102,102,230,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,148,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,254,184,117,121,7,220,63,0,0,0,0,0,0,240,63,64,110,93,222,1,71,234,63,88,9,99,179,160,218,211,63,34,254,184,117,121,7,172,63,138,134,248,227,214,229,109,63,0,0,0,0,0,0,0,0,136,198,250,208,88,31,218,63,0,0,0,0,0,0,240,63,93,215,117,93,215,117,237,63,171,170,170,170,170,170,218,63,89,150,101,89,150,101,185,63,24,134,97,24,134,97,136,63,165,4,184,91,114,147,66,63,0,0,0,0,0,0,240,63,85,85,85,85,85,85,229,63,116,209,69,23,93,116,225,63,184,30,133,235,81,184,222,63,34,254,184,117,121,7,220,63,136,198,250,208,88,31,218,63,17,234,45,129,153,151,113,61,216,12,0,0,168,64,0,0,0,0,0,0,1,0,0,0,224,2,0,0,0,0,0,0,216,12,0,0,105,64,0,0,0,0,0,0,1,0,0,0,224,2,0,0,0,0,0,0,216,12,0,0,4,64,0,0,0,0,0,0,1,0,0,0,224,2,0,0,0,0,0,0,136,12,0,0,241,63,0,0,136,12,0,0,210,63,0,0,136,12,0,0,179,63,0,0,136,12,0,0,148,63,0,0,136,12,0,0,117,63,0,0,136,12,0,0,86,63,0,0,136,12,0,0,55,63,0,0,136,12,0,0,24,63,0,0,136,12,0,0,249,62,0,0,136,12,0,0,218,62,0,0,136,12,0,0,187,62,0,0,136,12,0,0,156,62,0,0,136,12,0,0,125,62,0,0,136,12,0,0,67,64,0,0,176,12,0,0,231,64,0,0,248,2,0,0,0,0,0,0,136,12,0,0,244,64,0,0,136,12,0,0,1,65,0,0,176,12,0,0,14,65,0,0,0,3,0,0,0,0,0,0,176,12,0,0,47,65,0,0,8,3,0,0,0,0,0,0,176,12,0,0,117,65,0,0,8,3,0,0,0,0,0,0,176,12,0,0,81,65,0,0,40,3,0,0,0,0,0,0,176,12,0,0,151,65,0,0,8,3,0,0,0,0,0,0,108,12,0,0,191,65,0,0,108,12,0,0,193,65,0,0,108,12,0,0,196,65,0,0,108,12,0,0,198,65,0,0,0,13,0,0,200,65,0,0,1,0,0,0,112,3,0,0,108,12,0,0,204,65,0,0,108,12,0,0,206,65,0,0,108,12,0,0,208,65,0,0,108,12,0,0,210,65,0,0,108,12,0,0,212,65,0,0,108,12,0,0,214,65,0,0,108,12,0,0,155,94,0,0,108,12,0,0,216,65,0,0,108,12,0,0,218,65,0,0,108,12,0,0,220,65,0,0,176,12,0,0,222,65,0,0,24,3,0,0,0,0,0,0,176,12,0,0,3,66,0,0,24,3,0,0,0,0,0,0,176,12,0,0,28,87,0,0,104,4,0,0,0,0,0,0,176,12,0,0,91,87,0,0,104,4,0,0,0,0,0,0,176,12,0,0,115,87,0,0,96,4,0,0,0,0,0,0,176,12,0,0,140,87,0,0,96,4,0,0,0,0,0,0,136,12,0,0,164,87,0,0,176,12,0,0,182,87,0,0,56,4,0,0,0,0,0,0,176,12,0,0,224,87,0,0,56,4,0,0,0,0,0,0,136,12,0,0,10,88,0,0,136,12,0,0,59,88,0,0,216,12,0,0,108,88,0,0,0,0,0,0,1,0,0,0,64,4,0,0,3,244,255,255,216,12,0,0,155,88,0,0,0,0,0,0,1,0,0,0,80,4,0,0,3,244,255,255,216,12,0,0,202,88,0,0,0,0,0,0,1,0,0,0,64,4,0,0,3,244,255,255,216,12,0,0,249,88,0,0,0,0,0,0,1,0,0,0,80,4,0,0,3,244,255,255,176,12,0,0,73,89,0,0,192,11,0,0,0,0,0,0,216,12,0,0,95,89,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,240,10,0,0,2,0,0,0,216,12,0,0,113,89,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,248,10,0,0,2,0,0,0,216,12,0,0,147,89,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,248,10,0,0,2,0,0,0,216,12,0,0,182,89,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,248,10,0,0,2,0,0,0,176,12,0,0,217,89,0,0,64,5,0,0,0,0,0,0,176,12,0,0,251,89,0,0,64,5,0,0,0,0,0,0,216,12,0,0,30,90,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,248,10,0,0,2,0,0,0,176,12,0,0,64,90,0,0,208,4,0,0,0,0,0,0,176,12,0,0,86,90,0,0,208,4,0,0,0,0,0,0,176,12,0,0,106,90,0,0,208,4,0,0,0,0,0,0,216,12,0,0,126,90,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,240,10,0,0,2,0,0,0,176,12,0,0,144,90,0,0,208,4,0,0,0,0,0,0,176,12,0,0,165,90,0,0,208,4,0,0,0,0,0,0,216,12,0,0,186,90,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,0,11,0,0,0,0,0,0,216,12,0,0,254,90,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,24,11,0,0,0,0,0,0,216,12,0,0,66,91,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,48,11,0,0,0,0,0,0,216,12,0,0,134,91,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,72,11,0,0,0,0,0,0,216,12,0,0,202,91,0,0,0,0,0,0,3,0,0,0,208,4,0,0,2,0,0,0,96,11,0,0,2,0,0,0,104,11,0,0,0,8,0,0,216,12,0,0,15,92,0,0,0,0,0,0,3,0,0,0,208,4,0,0,2,0,0,0,96,11,0,0,2,0,0,0,112,11,0,0,0,8,0,0,216,12,0,0,84,92,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,120,11,0,0,0,8,0,0,216,12,0,0,153,92,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,120,11,0,0,0,8,0,0,216,12,0,0,222,92,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,128,11,0,0,2,0,0,0,216,12,0,0,250,92,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,128,11,0,0,2,0,0,0,216,12,0,0,22,93,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,128,11,0,0,2,0,0,0,216,12,0,0,50,93,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,128,11,0,0,2,0,0,0,216,12,0,0,78,93,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,136,11,0,0,0,0,0,0,216,12,0,0,148,93,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,144,11,0,0,0,0,0,0,216,12,0,0,218,93,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,152,11,0,0,0,0,0,0,216,12,0,0,32,94,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,160,11,0,0,0,0,0,0,216,12,0,0,102,94,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,168,11,0,0,2,0,0,0,216,12,0,0,123,94,0,0,0,0,0,0,2,0,0,0,208,4,0,0,2,0,0,0,168,11,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,12,0,0,178,97,0,0,136,12,0,0,155,97,0,0,216,12,0,0,133,97,0,0,0,0,0,0,1,0,0,0,184,11,0,0,0,0,0,0,216,12,0,0,86,97,0,0,0,0,0,0,1,0,0,0,184,11,0,0,0,0,0,0,216,12,0,0,64,97,0,0,0,0,0,0,1,0,0,0,176,11,0,0,0,0,0,0,216,12,0,0,17,97,0,0,0,0,0,0,1,0,0,0,176,11,0,0,0,0,0,0,136,12,0,0,254,96,0,0,136,12,0,0,220,96,0,0,136,12,0,0,186,96,0,0,136,12,0,0,165,96,0,0,136,12,0,0,144,96,0,0,136,12,0,0,119,96,0,0,136,12,0,0,94,96,0,0,136,12,0,0,69,96,0,0,136,12,0,0,44,96,0,0,136,12,0,0,20,96,0,0,136,12,0,0,39,97,0,0,136,12,0,0,108,97,0,0,136,12,0,0,199,97,0,0,16,0,0,0,168,3,0,0,208,3,0,0,16,0,0,0,168,3,0,0,208,3,0,0,208,3,0,0,16,0,0,0,168,3,0,0,88,3,0,0,16,0,0,0,56,0,0,0,208,3,0,0,8,0,0,0,176,3,0,0,88,0,0,0,56,0,0,0,208,3,0,0,8,0,0,0,88,0,0,0,96,0,0,0,56,0,0,0,104,0,0,0,136,0,0,0,208,3,0,0,8,0,0,0,208,3,0,0,136,0,0,0,8,0,0,0,136,0,0,0,88,3,0,0,136,0,0,0,42,0,0,0,0,0,0,0,232,2,0,0,42,0,0,0,43,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,72,3,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,42,0,0,0,0,0,0,0,24,3,0,0,44,0,0,0,48,0,0,0,46,0,0,0,47,0,0,0,43,0,0,0,42,0,0,0,42,0,0,0,42,0,0,0,0,0,0,0,216,3,0,0,44,0,0,0,49,0,0,0,46,0,0,0,47,0,0,0,43,0,0,0,43,0,0,0,43,0,0,0,43,0,0,0,0,0,0,0,232,3,0,0,44,0,0,0,50,0,0,0,46,0,0,0,47,0,0,0,43,0,0,0,44,0,0,0,44,0,0,0,44,0,0,0,0,0,0,0,56,3,0,0,44,0,0,0,51,0,0,0,46,0,0,0,47,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,103,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,14,0,0,208,14,0,0,64,15,0,0,176,15,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,24,0,0,32,18,0,0,160,55,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,47,0,0,0,5,81,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,47,0,0,0,253,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,47,0,0,0,245,76,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+6172);
/* memory initializer */ allocate([248,3,0,0,52,0,0,0,53,0,0,0,42,0,0,0,50,0,0,0,45,0,0,0,45,0,0,0,44,0,0,0,45,0,0,0,51,0,0,0,46,0,0,0,47,0,0,0,42,0,0,0,52,0,0,0,43,0,0,0,0,0,0,0,8,4,0,0,52,0,0,0,54,0,0,0,43,0,0,0,50,0,0,0,45,0,0,0,45,0,0,0,48,0,0,0,45,0,0,0,51,0,0,0,49,0,0,0,50,0,0,0,44,0,0,0,53,0,0,0,45,0,0,0,0,0,0,0,24,4,0,0,55,0,0,0,56,0,0,0,44,0,0,0,54,0,0,0,46,0,0,0,46,0,0,0,51,0,0,0,52,0,0,0,55,0,0,0,53,0,0,0,54,0,0,0,46,0,0,0,56,0,0,0,47,0,0,0,0,0,0,0,40,4,0,0,55,0,0,0,57,0,0,0,45,0,0,0,54,0,0,0,46,0,0,0,46,0,0,0,55,0,0,0,52,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,48,0,0,0,57,0,0,0,49,0,0,0,0,0,0,0,96,4,0,0,55,0,0,0,58,0,0,0,46,0,0,0,54,0,0,0,46,0,0,0,46,0,0,0,55,0,0,0,52,0,0,0,55,0,0,0,53,0,0,0,54,0,0,0,46,0,0,0,57,0,0,0,49,0,0,0,0,0,0,0,104,4,0,0,52,0,0,0,59,0,0,0,47,0,0,0,50,0,0,0,45,0,0,0,45,0,0,0,48,0,0,0,45,0,0,0,51,0,0,0,46,0,0,0,47,0,0,0,42,0,0,0,53,0,0,0,45,0,0,0,8,0,0,0,0,0,0,0,112,4,0,0,60,0,0,0,61,0,0,0,248,255,255,255,248,255,255,255,112,4,0,0,62,0,0,0,63,0,0,0,8,0,0,0,0,0,0,0,136,4,0,0,64,0,0,0,65,0,0,0,248,255,255,255,248,255,255,255,136,4,0,0,66,0,0,0,67,0,0,0,4,0,0,0,0,0,0,0,160,4,0,0,68,0,0,0,69,0,0,0,252,255,255,255,252,255,255,255,160,4,0,0,70,0,0,0,71,0,0,0,4,0,0,0,0,0,0,0,184,4,0,0,72,0,0,0,73,0,0,0,252,255,255,255,252,255,255,255,184,4,0,0,74,0,0,0,75,0,0,0,0,0,0,0,56,4,0,0,76,0,0,0,77,0,0,0,0,0,0,0,176,5,0,0,78,0,0,0,79,0,0,0,80,0,0,0,42,0,0,0,47,0,0,0,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,5,0,0,81,0,0,0,82,0,0,0,80,0,0,0,43,0,0,0,48,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,6,0,0,83,0,0,0,84,0,0,0,80,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,6,0,0,85,0,0,0,86,0,0,0,80,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,6,0,0,87,0,0,0,88,0,0,0,80,0,0,0,44,0,0,0,45,0,0,0,64,0,0,0,46,0,0,0,65,0,0,0,42,0,0,0,43,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,6,0,0,89,0,0,0,90,0,0,0,80,0,0,0,48,0,0,0,49,0,0,0,66,0,0,0,50,0,0,0,67,0,0,0,44,0,0,0,45,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,6,0,0,91,0,0,0,92,0,0,0,80,0,0,0,58,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,42,0,0,0,248,255,255,255,144,6,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,6,0,0,93,0,0,0,94,0,0,0,80,0,0,0,66,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,43,0,0,0,248,255,255,255,184,6,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,6,0,0,95,0,0,0,96,0,0,0,80,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,97,0,0,0,98,0,0,0,80,0,0,0,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,7,0,0,99,0,0,0,100,0,0,0,80,0,0,0,74,0,0,0,75,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,76,0,0,0,52,0,0,0,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,7,0,0,101,0,0,0,102,0,0,0,80,0,0,0,77,0,0,0,78,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,79,0,0,0,58,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,7,0,0,103,0,0,0,104,0,0,0,80,0,0,0,80,0,0,0,81,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,82,0,0,0,64,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,0,0,105,0,0,0,106,0,0,0,80,0,0,0,83,0,0,0,84,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,85,0,0,0,70,0,0,0,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,7,0,0,107,0,0,0,108,0,0,0,80,0,0,0,44,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,7,0,0,109,0,0,0,110,0,0,0,80,0,0,0,46,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,7,0,0,111,0,0,0,112,0,0,0,80,0,0,0,42,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,113,0,0,0,114,0,0,0,80,0,0,0,43,0,0,0,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,8,0,0,115,0,0,0,116,0,0,0,80,0,0,0,60,0,0,0,47,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,8,0,0,117,0,0,0,118,0,0,0,80,0,0,0,61,0,0,0,48,0,0,0,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,5,0,0,119,0,0,0,120,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,5,0,0,121,0,0,0,122,0,0,0,80,0,0,0,50,0,0,0,62,0,0,0,51,0,0,0,63,0,0,0,52,0,0,0,42,0,0,0,64,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,5,0,0,123,0,0,0,124,0,0,0,80,0,0,0,44,0,0,0,45,0,0,0,53,0,0,0,86,0,0,0,87,0,0,0,54,0,0,0,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,5,0,0,125,0,0,0,126,0,0,0,80,0,0,0,89,0,0,0,90,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,0,0,0,0,0,6,0,0,127,0,0,0,128,0,0,0,80,0,0,0,91,0,0,0,92,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,0,0,0,0,208,4,0,0,129,0,0,0,130,0,0,0,80,0,0,0,0,0,0,0,224,4,0,0,129,0,0,0,131,0,0,0,80,0,0,0,65,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,53,0,0,0,66,0,0,0,54,0,0,0,67,0,0,0,55,0,0,0,46,0,0,0,68,0,0,0,55,0,0,0,0,0,0,0,0,5,0,0,129,0,0,0,132,0,0,0,80,0,0,0,46,0,0,0,47,0,0,0,56,0,0,0,93,0,0,0,94,0,0,0,57,0,0,0,95,0,0,0,0,0,0,0,32,5,0,0,129,0,0,0,133,0,0,0,80,0,0,0,48,0,0,0,49,0,0,0,58,0,0,0,96,0,0,0,97,0,0,0,59,0,0,0,98,0,0,0,0,0,0,0,64,5,0,0,129,0,0,0,134,0,0,0,80,0,0,0,50,0,0,0,51,0,0,0,60,0,0,0,99,0,0,0,100,0,0,0,61,0,0,0,101,0,0,0,0,0,0,0,96,5,0,0,129,0,0,0,135,0,0,0,80,0,0,0,50,0,0,0,51,0,0,0,60,0,0,0,99,0,0,0,100,0,0,0,61,0,0,0,101,0,0,0,0,0,0,0,112,5,0,0,129,0,0,0,136,0,0,0,80,0,0,0,50,0,0,0,51,0,0,0,60,0,0,0,99,0,0,0,100,0,0,0,61,0,0,0,101,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,32,2,32,2,32,2,32,2,32,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,96,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,213,8,213,8,213,8,213,8,213,8,213,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,4,192,4,192,4,192,4,192,4,192,4,192,8,214,8,214,8,214,8,214,8,214,8,214,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,4,192,4,192,4,192,4,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,101,99,116,111,114,0,83,101,116,69,108,101,109,101,110,116,0,71,101,116,69,108,101,109,101,110,116,0,80,114,105,110,116,0,71,101,97,114,0,83,111,108,118,101,0,79,112,116,105,111,110,115,0,79,117,116,112,117,116,83,116,101,112,0,65,98,115,111,108,117,116,101,84,111,108,101,114,97,110,99,101,0,82,101,108,97,116,105,118,101,84,111,108,101,114,97,110,99,101,0,67,104,101,109,105,115,116,114,121,83,111,108,118,101,114,0,83,111,108,80,111,105,110,116,0,84,105,109,101,0,54,86,101,99,116,111,114,0,80,54,86,101,99,116,111,114,0,80,75,54,86,101,99,116,111,114,0,105,105,0,118,0,118,105,0,105,105,105,0,100,105,105,105,100,0,100,105,105,105,0,118,105,105,0,52,71,101,97,114,0,80,52,71,101,97,114,0,80,75,52,71,101,97,114,0,55,79,112,116,105,111,110,115,0,105,105,100,105,105,105,0,105,105,100,105,105,0,56,83,111,108,80,111,105,110,116,0,80,55,79,112,116,105,111,110,115,0,80,75,55,79,112,116,105,111,110,115,0,100,105,105,0,118,105,105,100,0,80,56,83,111,108,80,111,105,110,116,0,80,75,56,83,111,108,80,111,105,110,116,0,105,105,100,105,0,67,97,110,110,111,116,32,103,101,110,101,114,97,116,101,32,110,117,109,101,114,105,99,97,108,32,115,111,108,117,116,105,111,110,0,120,91,0,93,61,0,67,97,110,116,32,97,115,115,105,103,110,32,109,97,116,114,105,99,101,115,32,119,105,116,104,32,100,105,102,102,101,114,101,110,116,32,115,105,122,101,115,0,67,97,110,116,32,97,115,115,105,103,110,32,118,101,99,116,111,114,115,32,119,105,116,104,32,100,105,102,102,101,114,101,110,116,32,115,105,122,101,115,0,32,0,67,97,110,110,111,116,32,97,112,112,108,121,32,71,97,117,115,115,32,109,101,116,104,111,100,0,118,111,105,100,0,98,111,111,108,0,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,105,110,116,0,117,110,115,105,103,110,101,100,32,105,110,116,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,102,108,111,97,116,0,100,111,117,98,108,101,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,115,116,100,58,58,119,115,116,114,105,110,103,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,118,0,68,110,0,98,0,99,0,80,75,99,0,104,0,97,0,115,0,116,0,105,0,106,0,109,0,102,0,100,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,104,111,109,101,47,97,110,100,114,101,121,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,116,97,103,45,49,46,51,53,46,50,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,115,116,114,105,110,103,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,104,111,109,101,47,97,110,100,114,101,121,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,116,97,103,45,49,46,51,53,46,50,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,118,101,99,116,111,114,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,105,110,102,105,110,105,116,121,0,80,79,83,73,88,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+8724);
/* memory initializer */ allocate([109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+18964);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,37,112,0,67,0,37,0,0,0,0,0,108,0,108,108,0,0,76,0,37,112,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,37,72,58,37,77,37,72,58,37,77,58,37,83,48,49,50,51,52,53,54,55,56,57,0,37,76,102,0,48,49,50,51,52,53,54,55,56,57,0,37,46,48,76,102,0,116,114,117,101,0,102,97,108,115,101,0,83,117,110,100,97,121,0,77,111,110,100,97,121,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,84,104,117,114,115,100,97,121,0,70,114,105,100,97,121,0,83,97,116,117,114,100,97,121,0,83,117,110,0,77,111,110,0,84,117,101,0,87,101,100,0,84,104,117,0,70,114,105,0,83,97,116,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,77,97,114,99,104,0,65,112,114,105,108,0,77,97,121,0,74,117,110,101,0,74,117,108,121,0,65,117,103,117,115,116,0,83,101,112,116,101,109,98,101,114,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,68,101,99,101,109,98,101,114,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,65,77,0,80,77,0,37,109,47,37,100,47,37,121,0,37,72,58,37,77,58,37,83,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,37,73,58,37,77,58,37,83,32,37,112,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+21757);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function ___gxx_personality_v0() {
    }

  function _pthread_mutex_lock() {}

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = asm['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = asm['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }
  
  
  var UnboundTypeError=undefined;
  
  
  function _free() {
  }
  Module["_free"] = _free;function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function validateThis(this_, classType, humanName) {
      if (!(this_ instanceof Object)) {
          throwBindingError(humanName + ' with invalid "this": ' + this_);
      }
      if (!(this_ instanceof classType.registeredClass.constructor)) {
          throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
      }
      if (!this_.$$.ptr) {
          throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
      }
  
      // todo: kill this
      return upcastPointer(
          this_.$$.ptr,
          this_.$$.ptrType.registeredClass,
          classType.registeredClass);
    }function __embind_register_class_property(
      classType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      fieldName = readLatin1String(fieldName);
      getter = requireFunction(getterSignature, getter);
  
      whenDependentTypesAreResolved([], [classType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + fieldName;
          var desc = {
              get: function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              },
              enumerable: true,
              configurable: true
          };
          if (setter) {
              desc.set = function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              };
          } else {
              desc.set = function(v) {
                  throwBindingError(humanName + ' is a read-only property');
              };
          }
  
          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
  
          whenDependentTypesAreResolved(
              [],
              (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
          function(types) {
              var getterReturnType = types[0];
              var desc = {
                  get: function() {
                      var ptr = validateThis(this, classType, humanName + ' getter');
                      return getterReturnType['fromWireType'](getter(getterContext, ptr));
                  },
                  enumerable: true
              };
  
              if (setter) {
                  setter = requireFunction(setterSignature, setter);
                  var setterArgumentType = types[1];
                  desc.set = function(v) {
                      var ptr = validateThis(this, classType, humanName + ' setter');
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                      runDestructors(destructors);
                  };
              }
  
              Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
              return [];
          });
  
          return [];
      });
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              var ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  
  var _throwInternalError=undefined;function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
      }
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = requireFunction(downcastSignature, downcast);
      }
      rawDestructor = requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  function ___lock() {}

  function ___unlock() {}

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _fabs=Math_abs;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  var _sqrt=Math_sqrt;

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_i64Add"] = _i64Add;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cond_broadcast() {
      return 0;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      
      rawInvoker = requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

   
  Module["_memmove"] = _memmove;

  var _BItoD=true;

  function _pthread_cond_wait() {
      return 0;
    }

  function _pthread_mutex_unlock() {}

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function ___cxa_guard_release() {}

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);
embind_init_charCodes()
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');
init_ClassHandle()
init_RegisteredPointer()
init_embind();
init_emval();
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6,a7);
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vid(index,a1,a2) {
    Runtime.functionPointers[index](a1,a2);
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiiii(index,a1,a2,a3,a4,a5) {
    Runtime.functionPointers[index](a1,a2,a3,a4,a5);
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vi(index,a1) {
    Runtime.functionPointers[index](a1);
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vii(index,a1,a2) {
    Runtime.functionPointers[index](a1,a2);
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_ii(index,a1) {
    return Runtime.functionPointers[index](a1);
}

function invoke_iidi(index,a1,a2,a3) {
  try {
    return Module["dynCall_iidi"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iidi(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiii(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_vdii(index,a1,a2,a3) {
  try {
    Module["dynCall_vdii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vdii(index,a1,a2,a3) {
    Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_diiid(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_diiid"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_diiid(index,a1,a2,a3,a4) {
    return Runtime.functionPointers[index](a1,a2,a3,a4);
}

function invoke_idii(index,a1,a2,a3) {
  try {
    return Module["dynCall_idii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_idii(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_idiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_idiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_idiii(index,a1,a2,a3,a4) {
    return Runtime.functionPointers[index](a1,a2,a3,a4);
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function invoke_iiid(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiid(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_di(index,a1) {
    return Runtime.functionPointers[index](a1);
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viid(index,a1,a2,a3) {
    Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iii(index,a1,a2) {
    return Runtime.functionPointers[index](a1,a2);
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiiii(index,a1,a2,a3,a4,a5) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5);
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_diii(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_iidiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iidiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iidiii(index,a1,a2,a3,a4,a5) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5);
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_dii(index,a1,a2) {
    return Runtime.functionPointers[index](a1,a2);
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_i(index) {
    return Runtime.functionPointers[index]();
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiii(index,a1,a2,a3,a4) {
    return Runtime.functionPointers[index](a1,a2,a3,a4);
}

function invoke_iidii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iidii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iidii(index,a1,a2,a3,a4) {
    return Runtime.functionPointers[index](a1,a2,a3,a4);
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viii(index,a1,a2,a3) {
    Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_v(index) {
    Runtime.functionPointers[index]();
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6,a7,a8);
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiiid(index,a1,a2,a3,a4,a5) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5);
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiii(index,a1,a2,a3,a4) {
    Runtime.functionPointers[index](a1,a2,a3,a4);
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_iiiiiiii": invoke_iiiiiiii, "jsCall_iiiiiiii": jsCall_iiiiiiii, "invoke_iiiiiid": invoke_iiiiiid, "jsCall_iiiiiid": jsCall_iiiiiid, "invoke_vid": invoke_vid, "jsCall_vid": jsCall_vid, "invoke_viiiii": invoke_viiiii, "jsCall_viiiii": jsCall_viiiii, "invoke_vi": invoke_vi, "jsCall_vi": jsCall_vi, "invoke_vii": invoke_vii, "jsCall_vii": jsCall_vii, "invoke_iiiiiii": invoke_iiiiiii, "jsCall_iiiiiii": jsCall_iiiiiii, "invoke_ii": invoke_ii, "jsCall_ii": jsCall_ii, "invoke_iidi": invoke_iidi, "jsCall_iidi": jsCall_iidi, "invoke_iiii": invoke_iiii, "jsCall_iiii": jsCall_iiii, "invoke_vdii": invoke_vdii, "jsCall_vdii": jsCall_vdii, "invoke_diiid": invoke_diiid, "jsCall_diiid": jsCall_diiid, "invoke_idii": invoke_idii, "jsCall_idii": jsCall_idii, "invoke_idiii": invoke_idiii, "jsCall_idiii": jsCall_idiii, "invoke_viiiiii": invoke_viiiiii, "jsCall_viiiiii": jsCall_viiiiii, "invoke_iiid": invoke_iiid, "jsCall_iiid": jsCall_iiid, "invoke_di": invoke_di, "jsCall_di": jsCall_di, "invoke_viid": invoke_viid, "jsCall_viid": jsCall_viid, "invoke_iii": invoke_iii, "jsCall_iii": jsCall_iii, "invoke_iiiiii": invoke_iiiiii, "jsCall_iiiiii": jsCall_iiiiii, "invoke_diii": invoke_diii, "jsCall_diii": jsCall_diii, "invoke_iidiii": invoke_iidiii, "jsCall_iidiii": jsCall_iidiii, "invoke_dii": invoke_dii, "jsCall_dii": jsCall_dii, "invoke_i": invoke_i, "jsCall_i": jsCall_i, "invoke_iiiii": invoke_iiiii, "jsCall_iiiii": jsCall_iiiii, "invoke_iidii": invoke_iidii, "jsCall_iidii": jsCall_iidii, "invoke_viii": invoke_viii, "jsCall_viii": jsCall_viii, "invoke_v": invoke_v, "jsCall_v": jsCall_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "jsCall_iiiiiiiii": jsCall_iiiiiiiii, "invoke_iiiiid": invoke_iiiiid, "jsCall_iiiiid": jsCall_iiiiid, "invoke_viiii": invoke_viiii, "jsCall_viiii": jsCall_viiii, "_fabs": _fabs, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "___cxa_guard_acquire": ___cxa_guard_acquire, "getLiveInheritedInstances": getLiveInheritedInstances, "___assert_fail": ___assert_fail, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "ClassHandle": ClassHandle, "getShiftFromSize": getShiftFromSize, "__addDays": __addDays, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "runDestructor": runDestructor, "_sysconf": _sysconf, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "__embind_register_std_string": __embind_register_std_string, "init_RegisteredPointer": init_RegisteredPointer, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "flushPendingDeletes": flushPendingDeletes, "makeClassHandle": makeClassHandle, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "__isLeapYear": __isLeapYear, "__embind_register_class_constructor": __embind_register_class_constructor, "___cxa_atexit": ___cxa_atexit, "init_ClassHandle": init_ClassHandle, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall140": ___syscall140, "ClassHandle_clone": ClassHandle_clone, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "_pthread_cleanup_pop": _pthread_cleanup_pop, "RegisteredClass": RegisteredClass, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "embind_init_charCodes": embind_init_charCodes, "___setErrNo": ___setErrNo, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "createNamedFunction": createNamedFunction, "__embind_register_class_property": __embind_register_class_property, "__embind_register_emval": __embind_register_emval, "__emval_decref": __emval_decref, "_pthread_once": _pthread_once, "getBasestPointer": getBasestPointer, "__embind_register_class": __embind_register_class, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "heap32VectorToArray": heap32VectorToArray, "ClassHandle_delete": ClassHandle_delete, "___lock": ___lock, "___syscall6": ___syscall6, "ensureOverloadTable": ensureOverloadTable, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "new_": new_, "downcastPointer": downcastPointer, "replacePublicSymbol": replacePublicSymbol, "init_embind": init_embind, "_llvm_pow_f64": _llvm_pow_f64, "ClassHandle_deleteLater": ClassHandle_deleteLater, "integerReadValueFromPointer": integerReadValueFromPointer, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "ClassHandle_isDeleted": ClassHandle_isDeleted, "__embind_register_integer": __embind_register_integer, "___cxa_allocate_exception": ___cxa_allocate_exception, "_embind_repr": _embind_repr, "_pthread_getspecific": _pthread_getspecific, "throwUnboundTypeError": throwUnboundTypeError, "craftInvokerFunction": craftInvokerFunction, "runDestructors": runDestructors, "makeLegalFunctionName": makeLegalFunctionName, "_pthread_key_create": _pthread_key_create, "upcastPointer": upcastPointer, "init_emval": init_emval, "_pthread_cond_broadcast": _pthread_cond_broadcast, "shallowCopyInternalPointer": shallowCopyInternalPointer, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "_abort": _abort, "throwBindingError": throwBindingError, "getTypeName": getTypeName, "validateThis": validateThis, "exposePublicSymbol": exposePublicSymbol, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "_strftime": _strftime, "_pthread_cond_wait": _pthread_cond_wait, "RegisteredPointer_destructor": RegisteredPointer_destructor, "__embind_register_memory_view": __embind_register_memory_view, "getInheritedInstance": getInheritedInstance, "setDelayFunction": setDelayFunction, "___gxx_personality_v0": ___gxx_personality_v0, "extendError": extendError, "__embind_register_void": __embind_register_void, "__embind_register_function": __embind_register_function, "_strftime_l": _strftime_l, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "__emval_register": __emval_register, "__embind_register_std_wstring": __embind_register_std_wstring, "__embind_register_class_function": __embind_register_class_function, "RegisteredPointer": RegisteredPointer, "__arraySum": __arraySum, "readLatin1String": readLatin1String, "_pthread_self": _pthread_self, "_pthread_mutex_unlock": _pthread_mutex_unlock, "getInheritedInstanceCount": getInheritedInstanceCount, "__embind_register_float": __embind_register_float, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___cxa_guard_release": ___cxa_guard_release, "_pthread_setspecific": _pthread_setspecific, "genericPointerToWireType": genericPointerToWireType, "registerType": registerType, "___cxa_throw": ___cxa_throw, "count_emval_handles": count_emval_handles, "requireFunction": requireFunction, "_atexit": _atexit, "_sqrt": _sqrt, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var jsCall_iiiiiiii=env.jsCall_iiiiiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var jsCall_iiiiiid=env.jsCall_iiiiiid;
  var invoke_vid=env.invoke_vid;
  var jsCall_vid=env.jsCall_vid;
  var invoke_viiiii=env.invoke_viiiii;
  var jsCall_viiiii=env.jsCall_viiiii;
  var invoke_vi=env.invoke_vi;
  var jsCall_vi=env.jsCall_vi;
  var invoke_vii=env.invoke_vii;
  var jsCall_vii=env.jsCall_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var jsCall_iiiiiii=env.jsCall_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var jsCall_ii=env.jsCall_ii;
  var invoke_iidi=env.invoke_iidi;
  var jsCall_iidi=env.jsCall_iidi;
  var invoke_iiii=env.invoke_iiii;
  var jsCall_iiii=env.jsCall_iiii;
  var invoke_vdii=env.invoke_vdii;
  var jsCall_vdii=env.jsCall_vdii;
  var invoke_diiid=env.invoke_diiid;
  var jsCall_diiid=env.jsCall_diiid;
  var invoke_idii=env.invoke_idii;
  var jsCall_idii=env.jsCall_idii;
  var invoke_idiii=env.invoke_idiii;
  var jsCall_idiii=env.jsCall_idiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var jsCall_viiiiii=env.jsCall_viiiiii;
  var invoke_iiid=env.invoke_iiid;
  var jsCall_iiid=env.jsCall_iiid;
  var invoke_di=env.invoke_di;
  var jsCall_di=env.jsCall_di;
  var invoke_viid=env.invoke_viid;
  var jsCall_viid=env.jsCall_viid;
  var invoke_iii=env.invoke_iii;
  var jsCall_iii=env.jsCall_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var jsCall_iiiiii=env.jsCall_iiiiii;
  var invoke_diii=env.invoke_diii;
  var jsCall_diii=env.jsCall_diii;
  var invoke_iidiii=env.invoke_iidiii;
  var jsCall_iidiii=env.jsCall_iidiii;
  var invoke_dii=env.invoke_dii;
  var jsCall_dii=env.jsCall_dii;
  var invoke_i=env.invoke_i;
  var jsCall_i=env.jsCall_i;
  var invoke_iiiii=env.invoke_iiiii;
  var jsCall_iiiii=env.jsCall_iiiii;
  var invoke_iidii=env.invoke_iidii;
  var jsCall_iidii=env.jsCall_iidii;
  var invoke_viii=env.invoke_viii;
  var jsCall_viii=env.jsCall_viii;
  var invoke_v=env.invoke_v;
  var jsCall_v=env.jsCall_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var jsCall_iiiiiiiii=env.jsCall_iiiiiiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var jsCall_iiiiid=env.jsCall_iiiiid;
  var invoke_viiii=env.invoke_viiii;
  var jsCall_viiii=env.jsCall_viiii;
  var _fabs=env._fabs;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var getLiveInheritedInstances=env.getLiveInheritedInstances;
  var ___assert_fail=env.___assert_fail;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ClassHandle=env.ClassHandle;
  var getShiftFromSize=env.getShiftFromSize;
  var __addDays=env.__addDays;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var runDestructor=env.runDestructor;
  var _sysconf=env._sysconf;
  var throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted;
  var __embind_register_std_string=env.__embind_register_std_string;
  var init_RegisteredPointer=env.init_RegisteredPointer;
  var ClassHandle_isAliasOf=env.ClassHandle_isAliasOf;
  var flushPendingDeletes=env.flushPendingDeletes;
  var makeClassHandle=env.makeClassHandle;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var __isLeapYear=env.__isLeapYear;
  var __embind_register_class_constructor=env.__embind_register_class_constructor;
  var ___cxa_atexit=env.___cxa_atexit;
  var init_ClassHandle=env.init_ClassHandle;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall140=env.___syscall140;
  var ClassHandle_clone=env.ClassHandle_clone;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var RegisteredClass=env.RegisteredClass;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var embind_init_charCodes=env.embind_init_charCodes;
  var ___setErrNo=env.___setErrNo;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var createNamedFunction=env.createNamedFunction;
  var __embind_register_class_property=env.__embind_register_class_property;
  var __embind_register_emval=env.__embind_register_emval;
  var __emval_decref=env.__emval_decref;
  var _pthread_once=env._pthread_once;
  var getBasestPointer=env.getBasestPointer;
  var __embind_register_class=env.__embind_register_class;
  var constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType;
  var heap32VectorToArray=env.heap32VectorToArray;
  var ClassHandle_delete=env.ClassHandle_delete;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ensureOverloadTable=env.ensureOverloadTable;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var new_=env.new_;
  var downcastPointer=env.downcastPointer;
  var replacePublicSymbol=env.replacePublicSymbol;
  var init_embind=env.init_embind;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var ClassHandle_deleteLater=env.ClassHandle_deleteLater;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject;
  var ClassHandle_isDeleted=env.ClassHandle_isDeleted;
  var __embind_register_integer=env.__embind_register_integer;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _embind_repr=env._embind_repr;
  var _pthread_getspecific=env._pthread_getspecific;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var craftInvokerFunction=env.craftInvokerFunction;
  var runDestructors=env.runDestructors;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var _pthread_key_create=env._pthread_key_create;
  var upcastPointer=env.upcastPointer;
  var init_emval=env.init_emval;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var shallowCopyInternalPointer=env.shallowCopyInternalPointer;
  var nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType;
  var _abort=env._abort;
  var throwBindingError=env.throwBindingError;
  var getTypeName=env.getTypeName;
  var validateThis=env.validateThis;
  var exposePublicSymbol=env.exposePublicSymbol;
  var RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType;
  var _strftime=env._strftime;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var RegisteredPointer_destructor=env.RegisteredPointer_destructor;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var getInheritedInstance=env.getInheritedInstance;
  var setDelayFunction=env.setDelayFunction;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var extendError=env.extendError;
  var __embind_register_void=env.__embind_register_void;
  var __embind_register_function=env.__embind_register_function;
  var _strftime_l=env._strftime_l;
  var RegisteredPointer_getPointee=env.RegisteredPointer_getPointee;
  var __emval_register=env.__emval_register;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var __embind_register_class_function=env.__embind_register_class_function;
  var RegisteredPointer=env.RegisteredPointer;
  var __arraySum=env.__arraySum;
  var readLatin1String=env.readLatin1String;
  var _pthread_self=env._pthread_self;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var getInheritedInstanceCount=env.getInheritedInstanceCount;
  var __embind_register_float=env.__embind_register_float;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _pthread_setspecific=env._pthread_setspecific;
  var genericPointerToWireType=env.genericPointerToWireType;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var count_emval_handles=env.count_emval_handles;
  var requireFunction=env.requireFunction;
  var _atexit=env._atexit;
  var _sqrt=env._sqrt;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $$0 = 0.0, $$010$i = 0, $$012$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$1$i = 0.0, $$111$be$i = 0, $$111$ph$i = 0, $$2$i = 0, $$24$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3113$i = 0, $$in = 0, $$lcssa = 0, $$lcssa256 = 0, $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$not$i = 0, $$pre$i = 0, $$pre$i$17 = 0, $$pre$phi42$iZ2D = 0.0, $$sink$off0$i = 0, $0 = 0, $1 = 0, $103 = 0, $113 = 0, $115 = 0, $123 = 0, $125 = 0, $132 = 0, $139 = 0, $147 = 0, $15 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $168 = 0, $170 = 0, $183 = 0.0, $190 = 0, $192 = 0, $2 = 0, $201 = 0, $205 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $223 = 0, $224 = 0, $225 = 0, $235 = 0, $236 = 0, $249 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $266 = 0, $270 = 0, $272 = 0, $279 = 0, $283 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $295 = 0, $297 = 0, $298 = 0, $299 = 0, $300 = 0, $310 = 0.0, $322 = 0.0, $324 = 0, $330 = 0, $331 = 0, $338 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $358 = 0, $36 = 0, $360 = 0, $362 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $371 = 0, $376 = 0, $377 = 0, $381 = 0, $39 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $402 = 0, $403 = 0, $412 = 0, $413 = 0, $414 = 0, $42 = 0, $421 = 0, $422 = 0, $426 = 0, $428 = 0, $429 = 0, $431 = 0, $444 = 0, $446 = 0, $452 = 0, $456 = 0, $458 = 0, $464 = 0, $470 = 0, $471 = 0, $472 = 0, $494 = 0, $506 = 0, $510 = 0, $513 = 0, $515 = 0, $516 = 0, $517 = 0, $520 = 0, $521 = 0, $533 = 0, $534 = 0, $535 = 0, $539 = 0, $541 = 0, $543 = 0, $544 = 0, $550 = 0, $552 = 0, $557 = 0, $560 = 0, $564 = 0, $567 = 0, $572 = 0, $576 = 0, $577 = 0, $579 = 0, $583 = 0, $585 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $594 = 0, $595 = 0, $60 = 0, $603 = 0, $609 = 0, $610 = 0, $617 = 0, $619 = 0.0, $621 = 0, $625 = 0.0, $626 = 0.0, $629 = 0.0, $633 = 0, $636 = 0, $643 = 0.0, $661 = 0.0, $663 = 0, $669 = 0, $67 = 0, $670 = 0, $677 = 0, $680 = 0, $69 = 0, $691 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $76 = 0, $82 = 0, $9 = 0, $90 = 0, $99 = 0, $a$0$lcssa159$i = 0, $a$093$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph46$i = 0, $a$4$i = 0, $a$4$i$lcssa248 = 0, $a$4$i249 = 0, $a$4$ph$i = 0, $a$4$ph165$i = 0, $a$586$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0, $a$6$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i$25 = 0.0, $bits$0$ph = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$095$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry4$089$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$2$i = 0, $e2$0$i$19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph164$i = 0, $e2$3$i = 0, $e2$4$i = 0, $emin$0$ph = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$3$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$12 = 0, $gotdig$0$i$12$lcssa273 = 0, $gotdig$0$i$lcssa242 = 0, $gotdig$2$i = 0, $gotdig$2$i$13 = 0, $gotdig$2$i$lcssa = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3109$i = 0, $gotdig$3109$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$14 = 0, $gotrad$0$i$lcssa = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1110$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0, $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0112$i = 0, $j$0112$i$lcssa = 0, $j$075$i = 0, $j$076$i = 0, $j$077$i = 0, $j$2$i = 0, $j$3102$i = 0, $k$0$lcssa$i = 0, $k$0111$i = 0, $k$0111$i$lcssa = 0, $k$071$i = 0, $k$072$i = 0, $k$073$i = 0, $k$2$i = 0, $k$3$i = 0, $k$494$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$687$i = 0, $lnz$0$lcssa$i = 0, $lnz$0108$i = 0, $lnz$0108$i$lcssa = 0, $lnz$065$i = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$2$i = 0, $or$cond21$i = 0, $or$cond25$i = 0, $or$cond9$i = 0, $rp$0$lcssa160$i = 0, $rp$092$i = 0, $rp$1$i$18 = 0, $rp$1$i$18$lcssa = 0, $rp$2$ph44$i = 0, $rp$4$ph$i = 0, $rp$4$ph42$i = 0, $rp$585$i = 0, $rp$6$i = 0, $rp$6$i$lcssa = 0, $rp$6$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i$24 = 0.0, $y$2$i = 0.0, $y$2$i$26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph45$i = 0, $z$10$1$i = 0, $z$10$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $x$i = sp;
 switch ($prec | 0) {
 case 0:
  {
   $bits$0$ph = 24;
   $emin$0$ph = -149;
   label = 4;
   break;
  }
 case 1:
  {
   $bits$0$ph = 53;
   $emin$0$ph = -1074;
   label = 4;
   break;
  }
 case 2:
  {
   $bits$0$ph = 53;
   $emin$0$ph = -1074;
   label = 4;
   break;
  }
 default:
  $$0 = 0.0;
 }
 L4 : do if ((label | 0) == 4) {
  $0 = $f + 4 | 0;
  $1 = $f + 100 | 0;
  do {
   $2 = HEAP32[$0 >> 2] | 0;
   if ($2 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $2 + 1;
    $9 = HEAPU8[$2 >> 0] | 0;
   } else $9 = ___shgetc($f) | 0;
  } while ((_isspace($9) | 0) != 0);
  $$lcssa275 = $9;
  L13 : do switch ($$lcssa275 | 0) {
  case 43:
  case 45:
   {
    $15 = 1 - ((($$lcssa275 | 0) == 45 & 1) << 1) | 0;
    $16 = HEAP32[$0 >> 2] | 0;
    if ($16 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $16 + 1;
     $c$0 = HEAPU8[$16 >> 0] | 0;
     $sign$0 = $15;
     break L13;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $sign$0 = $15;
     break L13;
    }
    break;
   }
  default:
   {
    $c$0 = $$lcssa275;
    $sign$0 = 1;
   }
  } while (0);
  $c$179 = $c$0;
  $i$078 = 0;
  while (1) {
   if (($c$179 | 32 | 0) != (HEAP8[17786 + $i$078 >> 0] | 0)) {
    $c$1$lcssa = $c$179;
    $i$0$lcssa = $i$078;
    break;
   }
   do if ($i$078 >>> 0 < 7) {
    $29 = HEAP32[$0 >> 2] | 0;
    if ($29 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $29 + 1;
     $c$2 = HEAPU8[$29 >> 0] | 0;
     break;
    } else {
     $c$2 = ___shgetc($f) | 0;
     break;
    }
   } else $c$2 = $c$179; while (0);
   $36 = $i$078 + 1 | 0;
   if ($36 >>> 0 < 8) {
    $c$179 = $c$2;
    $i$078 = $36;
   } else {
    $c$1$lcssa = $c$2;
    $i$0$lcssa = $36;
    break;
   }
  }
  L29 : do switch ($i$0$lcssa | 0) {
  case 8:
   break;
  case 3:
   {
    label = 23;
    break;
   }
  default:
   {
    $39 = ($pok | 0) != 0;
    if ($39 & $i$0$lcssa >>> 0 > 3) if (($i$0$lcssa | 0) == 8) break L29; else {
     label = 23;
     break L29;
    }
    L34 : do if (!$i$0$lcssa) {
     $c$377 = $c$1$lcssa;
     $i$276 = 0;
     while (1) {
      if (($c$377 | 32 | 0) != (HEAP8[22289 + $i$276 >> 0] | 0)) {
       $c$5 = $c$377;
       $i$3 = $i$276;
       break L34;
      }
      do if ($i$276 >>> 0 < 2) {
       $60 = HEAP32[$0 >> 2] | 0;
       if ($60 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $60 + 1;
        $c$4 = HEAPU8[$60 >> 0] | 0;
        break;
       } else {
        $c$4 = ___shgetc($f) | 0;
        break;
       }
      } else $c$4 = $c$377; while (0);
      $67 = $i$276 + 1 | 0;
      if ($67 >>> 0 < 3) {
       $c$377 = $c$4;
       $i$276 = $67;
      } else {
       $c$5 = $c$4;
       $i$3 = $67;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;
     $i$3 = $i$0$lcssa;
    } while (0);
    switch ($i$3 | 0) {
    case 3:
     {
      $69 = HEAP32[$0 >> 2] | 0;
      if ($69 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
       HEAP32[$0 >> 2] = $69 + 1;
       $76 = HEAPU8[$69 >> 0] | 0;
      } else $76 = ___shgetc($f) | 0;
      if (($76 | 0) == 40) $i$4 = 1; else {
       if (!(HEAP32[$1 >> 2] | 0)) {
        $$0 = nan;
        break L4;
       }
       HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
       $$0 = nan;
       break L4;
      }
      while (1) {
       $82 = HEAP32[$0 >> 2] | 0;
       if ($82 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $82 + 1;
        $90 = HEAPU8[$82 >> 0] | 0;
       } else $90 = ___shgetc($f) | 0;
       if (!(($90 + -48 | 0) >>> 0 < 10 | ($90 + -65 | 0) >>> 0 < 26)) if (!(($90 | 0) == 95 | ($90 + -97 | 0) >>> 0 < 26)) {
        $$lcssa = $90;
        $i$4$lcssa = $i$4;
        break;
       }
       $i$4 = $i$4 + 1 | 0;
      }
      if (($$lcssa | 0) == 41) {
       $$0 = nan;
       break L4;
      }
      $99 = (HEAP32[$1 >> 2] | 0) == 0;
      if (!$99) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
      if (!$39) {
       $103 = ___errno_location() | 0;
       HEAP32[$103 >> 2] = 22;
       ___shlim($f, 0);
       $$0 = 0.0;
       break L4;
      }
      if (!$i$4$lcssa) {
       $$0 = nan;
       break L4;
      } else $$in = $i$4$lcssa;
      while (1) {
       $$in = $$in + -1 | 0;
       if (!$99) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
       if (!$$in) {
        $$0 = nan;
        break L4;
       }
      }
      break;
     }
    case 0:
     {
      do if (($c$5 | 0) == 48) {
       $115 = HEAP32[$0 >> 2] | 0;
       if ($115 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $115 + 1;
        $123 = HEAPU8[$115 >> 0] | 0;
       } else $123 = ___shgetc($f) | 0;
       if (($123 | 32 | 0) != 120) {
        if (!(HEAP32[$1 >> 2] | 0)) {
         $c$6 = 48;
         break;
        }
        HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
        $c$6 = 48;
        break;
       }
       $125 = HEAP32[$0 >> 2] | 0;
       if ($125 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $125 + 1;
        $c$0$i = HEAPU8[$125 >> 0] | 0;
        $gotdig$0$i = 0;
       } else {
        $c$0$i = ___shgetc($f) | 0;
        $gotdig$0$i = 0;
       }
       L94 : while (1) {
        switch ($c$0$i | 0) {
        case 46:
         {
          $gotdig$0$i$lcssa242 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
        case 48:
         break;
        default:
         {
          $168 = 0;
          $170 = 0;
          $694 = 0;
          $695 = 0;
          $c$2$i = $c$0$i;
          $gotdig$2$i = $gotdig$0$i;
          $gotrad$0$i = 0;
          $gottail$0$i = 0;
          $scale$0$i = 1.0;
          $x$0$i = 0;
          $y$0$i = 0.0;
          break L94;
         }
        }
        $132 = HEAP32[$0 >> 2] | 0;
        if ($132 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $132 + 1;
         $c$0$i = HEAPU8[$132 >> 0] | 0;
         $gotdig$0$i = 1;
         continue;
        } else {
         $c$0$i = ___shgetc($f) | 0;
         $gotdig$0$i = 1;
         continue;
        }
       }
       if ((label | 0) == 74) {
        $139 = HEAP32[$0 >> 2] | 0;
        if ($139 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $139 + 1;
         $c$1$ph$i = HEAPU8[$139 >> 0] | 0;
        } else $c$1$ph$i = ___shgetc($f) | 0;
        if (($c$1$ph$i | 0) == 48) {
         $154 = 0;
         $155 = 0;
         while (1) {
          $147 = HEAP32[$0 >> 2] | 0;
          if ($147 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
           HEAP32[$0 >> 2] = $147 + 1;
           $158 = HEAPU8[$147 >> 0] | 0;
          } else $158 = ___shgetc($f) | 0;
          $156 = _i64Add($154 | 0, $155 | 0, -1, -1) | 0;
          $157 = tempRet0;
          if (($158 | 0) == 48) {
           $154 = $156;
           $155 = $157;
          } else {
           $168 = 0;
           $170 = 0;
           $694 = $156;
           $695 = $157;
           $c$2$i = $158;
           $gotdig$2$i = 1;
           $gotrad$0$i = 1;
           $gottail$0$i = 0;
           $scale$0$i = 1.0;
           $x$0$i = 0;
           $y$0$i = 0.0;
           break;
          }
         }
        } else {
         $168 = 0;
         $170 = 0;
         $694 = 0;
         $695 = 0;
         $c$2$i = $c$1$ph$i;
         $gotdig$2$i = $gotdig$0$i$lcssa242;
         $gotrad$0$i = 1;
         $gottail$0$i = 0;
         $scale$0$i = 1.0;
         $x$0$i = 0;
         $y$0$i = 0.0;
        }
       }
       while (1) {
        $160 = $c$2$i + -48 | 0;
        $$pre$i = $c$2$i | 32;
        if ($160 >>> 0 < 10) label = 86; else {
         $164 = ($c$2$i | 0) == 46;
         if (!($164 | ($$pre$i + -97 | 0) >>> 0 < 6)) {
          $212 = $694;
          $213 = $170;
          $215 = $695;
          $216 = $168;
          $c$2$lcssa$i = $c$2$i;
          $gotdig$2$i$lcssa = $gotdig$2$i;
          $gotrad$0$i$lcssa = $gotrad$0$i;
          $x$0$i$lcssa = $x$0$i;
          $y$0$i$lcssa = $y$0$i;
          break;
         }
         if ($164) if (!$gotrad$0$i) {
          $696 = $170;
          $697 = $168;
          $698 = $170;
          $699 = $168;
          $gotdig$3$i = $gotdig$2$i;
          $gotrad$1$i = 1;
          $gottail$2$i = $gottail$0$i;
          $scale$2$i = $scale$0$i;
          $x$2$i = $x$0$i;
          $y$2$i = $y$0$i;
         } else {
          $212 = $694;
          $213 = $170;
          $215 = $695;
          $216 = $168;
          $c$2$lcssa$i = 46;
          $gotdig$2$i$lcssa = $gotdig$2$i;
          $gotrad$0$i$lcssa = $gotrad$0$i;
          $x$0$i$lcssa = $x$0$i;
          $y$0$i$lcssa = $y$0$i;
          break;
         } else label = 86;
        }
        if ((label | 0) == 86) {
         label = 0;
         $d$0$i = ($c$2$i | 0) > 57 ? $$pre$i + -87 | 0 : $160;
         do if (($168 | 0) < 0 | ($168 | 0) == 0 & $170 >>> 0 < 8) {
          $gottail$1$i = $gottail$0$i;
          $scale$1$i = $scale$0$i;
          $x$1$i = $d$0$i + ($x$0$i << 4) | 0;
          $y$1$i = $y$0$i;
         } else {
          if (($168 | 0) < 0 | ($168 | 0) == 0 & $170 >>> 0 < 14) {
           $183 = $scale$0$i * .0625;
           $gottail$1$i = $gottail$0$i;
           $scale$1$i = $183;
           $x$1$i = $x$0$i;
           $y$1$i = $y$0$i + $183 * +($d$0$i | 0);
           break;
          }
          if (($gottail$0$i | 0) != 0 | ($d$0$i | 0) == 0) {
           $gottail$1$i = $gottail$0$i;
           $scale$1$i = $scale$0$i;
           $x$1$i = $x$0$i;
           $y$1$i = $y$0$i;
          } else {
           $gottail$1$i = 1;
           $scale$1$i = $scale$0$i;
           $x$1$i = $x$0$i;
           $y$1$i = $y$0$i + $scale$0$i * .5;
          }
         } while (0);
         $190 = _i64Add($170 | 0, $168 | 0, 1, 0) | 0;
         $696 = $694;
         $697 = $695;
         $698 = $190;
         $699 = tempRet0;
         $gotdig$3$i = 1;
         $gotrad$1$i = $gotrad$0$i;
         $gottail$2$i = $gottail$1$i;
         $scale$2$i = $scale$1$i;
         $x$2$i = $x$1$i;
         $y$2$i = $y$1$i;
        }
        $192 = HEAP32[$0 >> 2] | 0;
        if ($192 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $192 + 1;
         $168 = $699;
         $170 = $698;
         $694 = $696;
         $695 = $697;
         $c$2$i = HEAPU8[$192 >> 0] | 0;
         $gotdig$2$i = $gotdig$3$i;
         $gotrad$0$i = $gotrad$1$i;
         $gottail$0$i = $gottail$2$i;
         $scale$0$i = $scale$2$i;
         $x$0$i = $x$2$i;
         $y$0$i = $y$2$i;
         continue;
        } else {
         $168 = $699;
         $170 = $698;
         $694 = $696;
         $695 = $697;
         $c$2$i = ___shgetc($f) | 0;
         $gotdig$2$i = $gotdig$3$i;
         $gotrad$0$i = $gotrad$1$i;
         $gottail$0$i = $gottail$2$i;
         $scale$0$i = $scale$2$i;
         $x$0$i = $x$2$i;
         $y$0$i = $y$2$i;
         continue;
        }
       }
       if (!$gotdig$2$i$lcssa) {
        $201 = (HEAP32[$1 >> 2] | 0) == 0;
        if (!$201) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
        if (!$pok) ___shlim($f, 0); else if (!$201) {
         $205 = HEAP32[$0 >> 2] | 0;
         HEAP32[$0 >> 2] = $205 + -1;
         if ($gotrad$0$i$lcssa) HEAP32[$0 >> 2] = $205 + -2;
        }
        $$0 = +($sign$0 | 0) * 0.0;
        break L4;
       }
       $211 = ($gotrad$0$i$lcssa | 0) == 0;
       $214 = $211 ? $213 : $212;
       $217 = $211 ? $216 : $215;
       if (($216 | 0) < 0 | ($216 | 0) == 0 & $213 >>> 0 < 8) {
        $224 = $213;
        $225 = $216;
        $x$324$i = $x$0$i$lcssa;
        while (1) {
         $223 = $x$324$i << 4;
         $224 = _i64Add($224 | 0, $225 | 0, 1, 0) | 0;
         $225 = tempRet0;
         if (!(($225 | 0) < 0 | ($225 | 0) == 0 & $224 >>> 0 < 8)) {
          $x$3$lcssa$i = $223;
          break;
         } else $x$324$i = $223;
        }
       } else $x$3$lcssa$i = $x$0$i$lcssa;
       if (($c$2$lcssa$i | 32 | 0) == 112) {
        $235 = _scanexp($f, $pok) | 0;
        $236 = tempRet0;
        if (($235 | 0) == 0 & ($236 | 0) == -2147483648) {
         if (!$pok) {
          ___shlim($f, 0);
          $$0 = 0.0;
          break L4;
         }
         if (!(HEAP32[$1 >> 2] | 0)) {
          $253 = 0;
          $254 = 0;
         } else {
          HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
          $253 = 0;
          $254 = 0;
         }
        } else {
         $253 = $235;
         $254 = $236;
        }
       } else if (!(HEAP32[$1 >> 2] | 0)) {
        $253 = 0;
        $254 = 0;
       } else {
        HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
        $253 = 0;
        $254 = 0;
       }
       $249 = _bitshift64Shl($214 | 0, $217 | 0, 2) | 0;
       $251 = _i64Add($249 | 0, tempRet0 | 0, -32, -1) | 0;
       $255 = _i64Add($251 | 0, tempRet0 | 0, $253 | 0, $254 | 0) | 0;
       $256 = tempRet0;
       if (!$x$3$lcssa$i) {
        $$0 = +($sign$0 | 0) * 0.0;
        break L4;
       }
       if (($256 | 0) > 0 | ($256 | 0) == 0 & $255 >>> 0 > (0 - $emin$0$ph | 0) >>> 0) {
        $266 = ___errno_location() | 0;
        HEAP32[$266 >> 2] = 34;
        $$0 = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
        break L4;
       }
       $270 = $emin$0$ph + -106 | 0;
       $272 = (($270 | 0) < 0) << 31 >> 31;
       if (($256 | 0) < ($272 | 0) | ($256 | 0) == ($272 | 0) & $255 >>> 0 < $270 >>> 0) {
        $279 = ___errno_location() | 0;
        HEAP32[$279 >> 2] = 34;
        $$0 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break L4;
       }
       if (($x$3$lcssa$i | 0) > -1) {
        $288 = $255;
        $289 = $256;
        $x$419$i = $x$3$lcssa$i;
        $y$320$i = $y$0$i$lcssa;
        while (1) {
         $283 = !($y$320$i >= .5);
         $287 = $283 & 1 | $x$419$i << 1;
         $x$5$i = $287 ^ 1;
         $y$4$i = $y$320$i + ($283 ? $y$320$i : $y$320$i + -1.0);
         $290 = _i64Add($288 | 0, $289 | 0, -1, -1) | 0;
         $291 = tempRet0;
         if (($287 | 0) > -1) {
          $288 = $290;
          $289 = $291;
          $x$419$i = $x$5$i;
          $y$320$i = $y$4$i;
         } else {
          $297 = $290;
          $298 = $291;
          $x$4$lcssa$i = $x$5$i;
          $y$3$lcssa$i = $y$4$i;
          break;
         }
        }
       } else {
        $297 = $255;
        $298 = $256;
        $x$4$lcssa$i = $x$3$lcssa$i;
        $y$3$lcssa$i = $y$0$i$lcssa;
       }
       $295 = _i64Subtract(32, 0, $emin$0$ph | 0, (($emin$0$ph | 0) < 0) << 31 >> 31 | 0) | 0;
       $299 = _i64Add($297 | 0, $298 | 0, $295 | 0, tempRet0 | 0) | 0;
       $300 = tempRet0;
       if (0 > ($300 | 0) | 0 == ($300 | 0) & $bits$0$ph >>> 0 > $299 >>> 0) if (($299 | 0) < 0) {
        $$0710$i = 0;
        label = 127;
       } else {
        $$07$i = $299;
        label = 125;
       } else {
        $$07$i = $bits$0$ph;
        label = 125;
       }
       if ((label | 0) == 125) if (($$07$i | 0) < 53) {
        $$0710$i = $$07$i;
        label = 127;
       } else {
        $$0711$i = $$07$i;
        $$pre$phi42$iZ2D = +($sign$0 | 0);
        $bias$0$i = 0.0;
       }
       if ((label | 0) == 127) {
        $310 = +($sign$0 | 0);
        $$0711$i = $$0710$i;
        $$pre$phi42$iZ2D = $310;
        $bias$0$i = +_copysignl(+_scalbn(1.0, 84 - $$0710$i | 0), $310);
       }
       $or$cond9$i = ($x$4$lcssa$i & 1 | 0) == 0 & ($y$3$lcssa$i != 0.0 & ($$0711$i | 0) < 32);
       $322 = $$pre$phi42$iZ2D * ($or$cond9$i ? 0.0 : $y$3$lcssa$i) + ($bias$0$i + $$pre$phi42$iZ2D * +((($or$cond9$i & 1) + $x$4$lcssa$i | 0) >>> 0)) - $bias$0$i;
       if (!($322 != 0.0)) {
        $324 = ___errno_location() | 0;
        HEAP32[$324 >> 2] = 34;
       }
       $$0 = +_scalbnl($322, $297);
       break L4;
      } else $c$6 = $c$5; while (0);
      $sum$i = $emin$0$ph + $bits$0$ph | 0;
      $330 = 0 - $sum$i | 0;
      $$010$i = $c$6;
      $gotdig$0$i$12 = 0;
      L184 : while (1) {
       switch ($$010$i | 0) {
       case 46:
        {
         $gotdig$0$i$12$lcssa273 = $gotdig$0$i$12;
         label = 138;
         break L184;
         break;
        }
       case 48:
        break;
       default:
        {
         $$2$i = $$010$i;
         $700 = 0;
         $701 = 0;
         $gotdig$2$i$13 = $gotdig$0$i$12;
         $gotrad$0$i$14 = 0;
         break L184;
        }
       }
       $331 = HEAP32[$0 >> 2] | 0;
       if ($331 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $331 + 1;
        $$010$i = HEAPU8[$331 >> 0] | 0;
        $gotdig$0$i$12 = 1;
        continue;
       } else {
        $$010$i = ___shgetc($f) | 0;
        $gotdig$0$i$12 = 1;
        continue;
       }
      }
      if ((label | 0) == 138) {
       $338 = HEAP32[$0 >> 2] | 0;
       if ($338 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $338 + 1;
        $$111$ph$i = HEAPU8[$338 >> 0] | 0;
       } else $$111$ph$i = ___shgetc($f) | 0;
       if (($$111$ph$i | 0) == 48) {
        $346 = 0;
        $347 = 0;
        while (1) {
         $348 = _i64Add($346 | 0, $347 | 0, -1, -1) | 0;
         $349 = tempRet0;
         $350 = HEAP32[$0 >> 2] | 0;
         if ($350 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
          HEAP32[$0 >> 2] = $350 + 1;
          $$111$be$i = HEAPU8[$350 >> 0] | 0;
         } else $$111$be$i = ___shgetc($f) | 0;
         if (($$111$be$i | 0) == 48) {
          $346 = $348;
          $347 = $349;
         } else {
          $$2$i = $$111$be$i;
          $700 = $348;
          $701 = $349;
          $gotdig$2$i$13 = 1;
          $gotrad$0$i$14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$111$ph$i;
        $700 = 0;
        $701 = 0;
        $gotdig$2$i$13 = $gotdig$0$i$12$lcssa273;
        $gotrad$0$i$14 = 1;
       }
      }
      HEAP32[$x$i >> 2] = 0;
      $358 = $$2$i + -48 | 0;
      $360 = ($$2$i | 0) == 46;
      L203 : do if ($360 | $358 >>> 0 < 10) {
       $362 = $x$i + 496 | 0;
       $$3113$i = $$2$i;
       $365 = 0;
       $366 = 0;
       $702 = $360;
       $703 = $358;
       $704 = $700;
       $705 = $701;
       $gotdig$3109$i = $gotdig$2$i$13;
       $gotrad$1110$i = $gotrad$0$i$14;
       $j$0112$i = 0;
       $k$0111$i = 0;
       $lnz$0108$i = 0;
       L205 : while (1) {
        do if ($702) if (!$gotrad$1110$i) {
         $706 = $365;
         $707 = $366;
         $708 = $365;
         $709 = $366;
         $gotdig$4$i = $gotdig$3109$i;
         $gotrad$2$i = 1;
         $j$2$i = $j$0112$i;
         $k$2$i = $k$0111$i;
         $lnz$2$i = $lnz$0108$i;
        } else {
         $710 = $704;
         $711 = $705;
         $712 = $365;
         $713 = $366;
         $gotdig$3109$i$lcssa = $gotdig$3109$i;
         $j$0112$i$lcssa = $j$0112$i;
         $k$0111$i$lcssa = $k$0111$i;
         $lnz$0108$i$lcssa = $lnz$0108$i;
         break L205;
        } else {
         $367 = _i64Add($365 | 0, $366 | 0, 1, 0) | 0;
         $368 = tempRet0;
         $369 = ($$3113$i | 0) != 48;
         if (($k$0111$i | 0) >= 125) {
          if (!$369) {
           $706 = $704;
           $707 = $705;
           $708 = $367;
           $709 = $368;
           $gotdig$4$i = $gotdig$3109$i;
           $gotrad$2$i = $gotrad$1110$i;
           $j$2$i = $j$0112$i;
           $k$2$i = $k$0111$i;
           $lnz$2$i = $lnz$0108$i;
           break;
          }
          HEAP32[$362 >> 2] = HEAP32[$362 >> 2] | 1;
          $706 = $704;
          $707 = $705;
          $708 = $367;
          $709 = $368;
          $gotdig$4$i = $gotdig$3109$i;
          $gotrad$2$i = $gotrad$1110$i;
          $j$2$i = $j$0112$i;
          $k$2$i = $k$0111$i;
          $lnz$2$i = $lnz$0108$i;
          break;
         }
         $371 = $x$i + ($k$0111$i << 2) | 0;
         if (!$j$0112$i) $storemerge$i = $703; else $storemerge$i = $$3113$i + -48 + ((HEAP32[$371 >> 2] | 0) * 10 | 0) | 0;
         HEAP32[$371 >> 2] = $storemerge$i;
         $376 = $j$0112$i + 1 | 0;
         $377 = ($376 | 0) == 9;
         $706 = $704;
         $707 = $705;
         $708 = $367;
         $709 = $368;
         $gotdig$4$i = 1;
         $gotrad$2$i = $gotrad$1110$i;
         $j$2$i = $377 ? 0 : $376;
         $k$2$i = ($377 & 1) + $k$0111$i | 0;
         $lnz$2$i = $369 ? $367 : $lnz$0108$i;
        } while (0);
        $381 = HEAP32[$0 >> 2] | 0;
        if ($381 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $381 + 1;
         $$3$be$i = HEAPU8[$381 >> 0] | 0;
        } else $$3$be$i = ___shgetc($f) | 0;
        $703 = $$3$be$i + -48 | 0;
        $702 = ($$3$be$i | 0) == 46;
        if (!($702 | $703 >>> 0 < 10)) {
         $$3$lcssa$i = $$3$be$i;
         $393 = $706;
         $394 = $708;
         $396 = $707;
         $397 = $709;
         $gotdig$3$lcssa$i = $gotdig$4$i;
         $gotrad$1$lcssa$i = $gotrad$2$i;
         $j$0$lcssa$i = $j$2$i;
         $k$0$lcssa$i = $k$2$i;
         $lnz$0$lcssa$i = $lnz$2$i;
         label = 161;
         break L203;
        } else {
         $$3113$i = $$3$be$i;
         $365 = $708;
         $366 = $709;
         $704 = $706;
         $705 = $707;
         $gotdig$3109$i = $gotdig$4$i;
         $gotrad$1110$i = $gotrad$2$i;
         $j$0112$i = $j$2$i;
         $k$0111$i = $k$2$i;
         $lnz$0108$i = $lnz$2$i;
        }
       }
       $714 = $712;
       $715 = $713;
       $716 = $710;
       $717 = $711;
       $718 = ($gotdig$3109$i$lcssa | 0) != 0;
       $j$077$i = $j$0112$i$lcssa;
       $k$073$i = $k$0111$i$lcssa;
       $lnz$067$i = $lnz$0108$i$lcssa;
       label = 169;
      } else {
       $$3$lcssa$i = $$2$i;
       $393 = $700;
       $394 = 0;
       $396 = $701;
       $397 = 0;
       $gotdig$3$lcssa$i = $gotdig$2$i$13;
       $gotrad$1$lcssa$i = $gotrad$0$i$14;
       $j$0$lcssa$i = 0;
       $k$0$lcssa$i = 0;
       $lnz$0$lcssa$i = 0;
       label = 161;
      } while (0);
      do if ((label | 0) == 161) {
       $392 = ($gotrad$1$lcssa$i | 0) == 0;
       $395 = $392 ? $394 : $393;
       $398 = $392 ? $397 : $396;
       $399 = ($gotdig$3$lcssa$i | 0) != 0;
       if (!(($$3$lcssa$i | 32 | 0) == 101 & $399)) if (($$3$lcssa$i | 0) > -1) {
        $714 = $394;
        $715 = $397;
        $716 = $395;
        $717 = $398;
        $718 = $399;
        $j$077$i = $j$0$lcssa$i;
        $k$073$i = $k$0$lcssa$i;
        $lnz$067$i = $lnz$0$lcssa$i;
        label = 169;
        break;
       } else {
        $719 = $394;
        $720 = $397;
        $721 = $399;
        $722 = $395;
        $723 = $398;
        $j$076$i = $j$0$lcssa$i;
        $k$072$i = $k$0$lcssa$i;
        $lnz$066$i = $lnz$0$lcssa$i;
        label = 171;
        break;
       }
       $402 = _scanexp($f, $pok) | 0;
       $403 = tempRet0;
       if (($402 | 0) == 0 & ($403 | 0) == -2147483648) {
        if (!$pok) {
         ___shlim($f, 0);
         $$1$i = 0.0;
         break;
        }
        if (!(HEAP32[$1 >> 2] | 0)) {
         $412 = 0;
         $413 = 0;
        } else {
         HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
         $412 = 0;
         $413 = 0;
        }
       } else {
        $412 = $402;
        $413 = $403;
       }
       $414 = _i64Add($412 | 0, $413 | 0, $395 | 0, $398 | 0) | 0;
       $426 = $414;
       $428 = $394;
       $429 = tempRet0;
       $431 = $397;
       $j$075$i = $j$0$lcssa$i;
       $k$071$i = $k$0$lcssa$i;
       $lnz$065$i = $lnz$0$lcssa$i;
       label = 173;
      } while (0);
      if ((label | 0) == 169) if (!(HEAP32[$1 >> 2] | 0)) {
       $719 = $714;
       $720 = $715;
       $721 = $718;
       $722 = $716;
       $723 = $717;
       $j$076$i = $j$077$i;
       $k$072$i = $k$073$i;
       $lnz$066$i = $lnz$067$i;
       label = 171;
      } else {
       HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
       if ($718) {
        $426 = $716;
        $428 = $714;
        $429 = $717;
        $431 = $715;
        $j$075$i = $j$077$i;
        $k$071$i = $k$073$i;
        $lnz$065$i = $lnz$067$i;
        label = 173;
       } else label = 172;
      }
      if ((label | 0) == 171) if ($721) {
       $426 = $722;
       $428 = $719;
       $429 = $723;
       $431 = $720;
       $j$075$i = $j$076$i;
       $k$071$i = $k$072$i;
       $lnz$065$i = $lnz$066$i;
       label = 173;
      } else label = 172;
      do if ((label | 0) == 172) {
       $421 = ___errno_location() | 0;
       HEAP32[$421 >> 2] = 22;
       ___shlim($f, 0);
       $$1$i = 0.0;
      } else if ((label | 0) == 173) {
       $422 = HEAP32[$x$i >> 2] | 0;
       if (!$422) {
        $$1$i = +($sign$0 | 0) * 0.0;
        break;
       }
       if ((($431 | 0) < 0 | ($431 | 0) == 0 & $428 >>> 0 < 10) & (($426 | 0) == ($428 | 0) & ($429 | 0) == ($431 | 0))) if ($bits$0$ph >>> 0 > 30 | ($422 >>> $bits$0$ph | 0) == 0) {
        $$1$i = +($sign$0 | 0) * +($422 >>> 0);
        break;
       }
       $444 = ($emin$0$ph | 0) / -2 | 0;
       $446 = (($444 | 0) < 0) << 31 >> 31;
       if (($429 | 0) > ($446 | 0) | ($429 | 0) == ($446 | 0) & $426 >>> 0 > $444 >>> 0) {
        $452 = ___errno_location() | 0;
        HEAP32[$452 >> 2] = 34;
        $$1$i = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
        break;
       }
       $456 = $emin$0$ph + -106 | 0;
       $458 = (($456 | 0) < 0) << 31 >> 31;
       if (($429 | 0) < ($458 | 0) | ($429 | 0) == ($458 | 0) & $426 >>> 0 < $456 >>> 0) {
        $464 = ___errno_location() | 0;
        HEAP32[$464 >> 2] = 34;
        $$1$i = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break;
       }
       if (!$j$075$i) $k$3$i = $k$071$i; else {
        if (($j$075$i | 0) < 9) {
         $470 = $x$i + ($k$071$i << 2) | 0;
         $472 = HEAP32[$470 >> 2] | 0;
         $j$3102$i = $j$075$i;
         while (1) {
          $471 = $472 * 10 | 0;
          $j$3102$i = $j$3102$i + 1 | 0;
          if (($j$3102$i | 0) == 9) {
           $$lcssa265 = $471;
           break;
          } else $472 = $471;
         }
         HEAP32[$470 >> 2] = $$lcssa265;
        }
        $k$3$i = $k$071$i + 1 | 0;
       }
       if (($lnz$065$i | 0) < 9) if (($lnz$065$i | 0) <= ($426 | 0) & ($426 | 0) < 18) {
        if (($426 | 0) == 9) {
         $$1$i = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0);
         break;
        }
        if (($426 | 0) < 9) {
         $$1$i = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0) / +(HEAP32[3624 + (8 - $426 << 2) >> 2] | 0);
         break;
        }
        $494 = $bits$0$ph + 27 + (Math_imul($426, -3) | 0) | 0;
        $$pre$i$17 = HEAP32[$x$i >> 2] | 0;
        if (($494 | 0) > 30 | ($$pre$i$17 >>> $494 | 0) == 0) {
         $$1$i = +($sign$0 | 0) * +($$pre$i$17 >>> 0) * +(HEAP32[3624 + ($426 + -10 << 2) >> 2] | 0);
         break;
        }
       }
       $506 = ($426 | 0) % 9 | 0;
       if (!$506) {
        $a$2$ph46$i = 0;
        $e2$0$ph$i = 0;
        $rp$2$ph44$i = $426;
        $z$1$ph45$i = $k$3$i;
       } else {
        $510 = ($426 | 0) > -1 ? $506 : $506 + 9 | 0;
        $513 = HEAP32[3624 + (8 - $510 << 2) >> 2] | 0;
        if (!$k$3$i) {
         $a$0$lcssa159$i = 0;
         $rp$0$lcssa160$i = $426;
         $z$0$i = 0;
        } else {
         $515 = 1e9 / ($513 | 0) | 0;
         $a$093$i = 0;
         $carry$095$i = 0;
         $k$494$i = 0;
         $rp$092$i = $426;
         while (1) {
          $516 = $x$i + ($k$494$i << 2) | 0;
          $517 = HEAP32[$516 >> 2] | 0;
          $520 = (($517 >>> 0) / ($513 >>> 0) | 0) + $carry$095$i | 0;
          HEAP32[$516 >> 2] = $520;
          $521 = Math_imul(($517 >>> 0) % ($513 >>> 0) | 0, $515) | 0;
          $or$cond21$i = ($k$494$i | 0) == ($a$093$i | 0) & ($520 | 0) == 0;
          $k$494$i = $k$494$i + 1 | 0;
          $rp$1$i$18 = $or$cond21$i ? $rp$092$i + -9 | 0 : $rp$092$i;
          $a$1$i = $or$cond21$i ? $k$494$i & 127 : $a$093$i;
          if (($k$494$i | 0) == ($k$3$i | 0)) {
           $$lcssa264 = $521;
           $a$1$i$lcssa = $a$1$i;
           $rp$1$i$18$lcssa = $rp$1$i$18;
           break;
          } else {
           $a$093$i = $a$1$i;
           $carry$095$i = $521;
           $rp$092$i = $rp$1$i$18;
          }
         }
         if (!$$lcssa264) {
          $a$0$lcssa159$i = $a$1$i$lcssa;
          $rp$0$lcssa160$i = $rp$1$i$18$lcssa;
          $z$0$i = $k$3$i;
         } else {
          HEAP32[$x$i + ($k$3$i << 2) >> 2] = $$lcssa264;
          $a$0$lcssa159$i = $a$1$i$lcssa;
          $rp$0$lcssa160$i = $rp$1$i$18$lcssa;
          $z$0$i = $k$3$i + 1 | 0;
         }
        }
        $a$2$ph46$i = $a$0$lcssa159$i;
        $e2$0$ph$i = 0;
        $rp$2$ph44$i = 9 - $510 + $rp$0$lcssa160$i | 0;
        $z$1$ph45$i = $z$0$i;
       }
       L284 : while (1) {
        $533 = ($rp$2$ph44$i | 0) < 18;
        $534 = ($rp$2$ph44$i | 0) == 18;
        $535 = $x$i + ($a$2$ph46$i << 2) | 0;
        $e2$0$i$19 = $e2$0$ph$i;
        $z$1$i = $z$1$ph45$i;
        while (1) {
         if (!$533) {
          if (!$534) {
           $a$4$ph$i = $a$2$ph46$i;
           $e2$1$ph$i = $e2$0$i$19;
           $rp$4$ph42$i = $rp$2$ph44$i;
           $z$6$ph$i = $z$1$i;
           break L284;
          }
          if ((HEAP32[$535 >> 2] | 0) >>> 0 >= 9007199) {
           $a$4$ph$i = $a$2$ph46$i;
           $e2$1$ph$i = $e2$0$i$19;
           $rp$4$ph42$i = 18;
           $z$6$ph$i = $z$1$i;
           break L284;
          }
         }
         $carry1$0$i = 0;
         $k$5$in$i = $z$1$i + 127 | 0;
         $z$2$i = $z$1$i;
         while (1) {
          $k$5$i = $k$5$in$i & 127;
          $539 = $x$i + ($k$5$i << 2) | 0;
          $541 = _bitshift64Shl(HEAP32[$539 >> 2] | 0, 0, 29) | 0;
          $543 = _i64Add($541 | 0, tempRet0 | 0, $carry1$0$i | 0, 0) | 0;
          $544 = tempRet0;
          if ($544 >>> 0 > 0 | ($544 | 0) == 0 & $543 >>> 0 > 1e9) {
           $550 = ___udivdi3($543 | 0, $544 | 0, 1e9, 0) | 0;
           $552 = ___uremdi3($543 | 0, $544 | 0, 1e9, 0) | 0;
           $$sink$off0$i = $552;
           $carry1$1$i = $550;
          } else {
           $$sink$off0$i = $543;
           $carry1$1$i = 0;
          }
          HEAP32[$539 >> 2] = $$sink$off0$i;
          $557 = ($k$5$i | 0) == ($a$2$ph46$i | 0);
          $z$3$i = ($k$5$i | 0) != ($z$2$i + 127 & 127 | 0) | $557 ? $z$2$i : ($$sink$off0$i | 0) == 0 ? $k$5$i : $z$2$i;
          if ($557) {
           $carry1$1$i$lcssa = $carry1$1$i;
           $z$3$i$lcssa = $z$3$i;
           break;
          } else {
           $carry1$0$i = $carry1$1$i;
           $k$5$in$i = $k$5$i + -1 | 0;
           $z$2$i = $z$3$i;
          }
         }
         $560 = $e2$0$i$19 + -29 | 0;
         if (!$carry1$1$i$lcssa) {
          $e2$0$i$19 = $560;
          $z$1$i = $z$3$i$lcssa;
         } else {
          $$lcssa263 = $560;
          $carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;
          $z$3$i$lcssa$lcssa = $z$3$i$lcssa;
          break;
         }
        }
        $564 = $a$2$ph46$i + 127 & 127;
        if (($564 | 0) == ($z$3$i$lcssa$lcssa | 0)) {
         $567 = $z$3$i$lcssa$lcssa + 127 & 127;
         $572 = $x$i + (($z$3$i$lcssa$lcssa + 126 & 127) << 2) | 0;
         HEAP32[$572 >> 2] = HEAP32[$572 >> 2] | HEAP32[$x$i + ($567 << 2) >> 2];
         $z$4$i = $567;
        } else $z$4$i = $z$3$i$lcssa$lcssa;
        HEAP32[$x$i + ($564 << 2) >> 2] = $carry1$1$i$lcssa$lcssa;
        $a$2$ph46$i = $564;
        $e2$0$ph$i = $$lcssa263;
        $rp$2$ph44$i = $rp$2$ph44$i + 9 | 0;
        $z$1$ph45$i = $z$4$i;
       }
       L302 : while (1) {
        $603 = $z$6$ph$i + 1 & 127;
        $609 = $x$i + (($z$6$ph$i + 127 & 127) << 2) | 0;
        $a$4$ph165$i = $a$4$ph$i;
        $e2$1$ph164$i = $e2$1$ph$i;
        $rp$4$ph$i = $rp$4$ph42$i;
        while (1) {
         $610 = ($rp$4$ph$i | 0) == 18;
         $$24$i = ($rp$4$ph$i | 0) > 27 ? 9 : 1;
         $$not$i = $610 ^ 1;
         $a$4$i = $a$4$ph165$i;
         $e2$1$i = $e2$1$ph164$i;
         while (1) {
          $576 = $a$4$i & 127;
          $577 = ($576 | 0) == ($z$6$ph$i | 0);
          do if ($577) label = 219; else {
           $579 = HEAP32[$x$i + ($576 << 2) >> 2] | 0;
           if ($579 >>> 0 < 9007199) {
            label = 219;
            break;
           }
           if ($579 >>> 0 > 9007199) break;
           $583 = $a$4$i + 1 & 127;
           if (($583 | 0) == ($z$6$ph$i | 0)) {
            label = 219;
            break;
           }
           $691 = HEAP32[$x$i + ($583 << 2) >> 2] | 0;
           if ($691 >>> 0 < 254740991) {
            label = 219;
            break;
           }
           if (!($691 >>> 0 > 254740991 | $$not$i)) {
            $617 = $576;
            $a$4$i249 = $a$4$i;
            $e2$1$i246 = $e2$1$i;
            $z$10$i = $z$6$ph$i;
            break L302;
           }
          } while (0);
          if ((label | 0) == 219) {
           label = 0;
           if ($610) {
            label = 220;
            break L302;
           }
          }
          $585 = $e2$1$i + $$24$i | 0;
          if (($a$4$i | 0) == ($z$6$ph$i | 0)) {
           $a$4$i = $z$6$ph$i;
           $e2$1$i = $585;
          } else {
           $$lcssa256 = $585;
           $a$4$i$lcssa248 = $a$4$i;
           break;
          }
         }
         $588 = (1 << $$24$i) + -1 | 0;
         $589 = 1e9 >>> $$24$i;
         $a$586$i = $a$4$i$lcssa248;
         $carry4$089$i = 0;
         $k$687$i = $a$4$i$lcssa248;
         $rp$585$i = $rp$4$ph$i;
         while (1) {
          $590 = $x$i + ($k$687$i << 2) | 0;
          $591 = HEAP32[$590 >> 2] | 0;
          $594 = ($591 >>> $$24$i) + $carry4$089$i | 0;
          HEAP32[$590 >> 2] = $594;
          $595 = Math_imul($591 & $588, $589) | 0;
          $or$cond25$i = ($k$687$i | 0) == ($a$586$i | 0) & ($594 | 0) == 0;
          $k$687$i = $k$687$i + 1 & 127;
          $rp$6$i = $or$cond25$i ? $rp$585$i + -9 | 0 : $rp$585$i;
          $a$6$i = $or$cond25$i ? $k$687$i : $a$586$i;
          if (($k$687$i | 0) == ($z$6$ph$i | 0)) {
           $$lcssa257 = $595;
           $a$6$i$lcssa = $a$6$i;
           $rp$6$i$lcssa = $rp$6$i;
           break;
          } else {
           $a$586$i = $a$6$i;
           $carry4$089$i = $595;
           $rp$585$i = $rp$6$i;
          }
         }
         if (!$$lcssa257) {
          $a$4$ph165$i = $a$6$i$lcssa;
          $e2$1$ph164$i = $$lcssa256;
          $rp$4$ph$i = $rp$6$i$lcssa;
          continue;
         }
         if (($603 | 0) != ($a$6$i$lcssa | 0)) {
          $$lcssa256$lcssa = $$lcssa256;
          $$lcssa257$lcssa = $$lcssa257;
          $a$6$i$lcssa$lcssa = $a$6$i$lcssa;
          $rp$6$i$lcssa$lcssa = $rp$6$i$lcssa;
          break;
         }
         HEAP32[$609 >> 2] = HEAP32[$609 >> 2] | 1;
         $a$4$ph165$i = $a$6$i$lcssa;
         $e2$1$ph164$i = $$lcssa256;
         $rp$4$ph$i = $rp$6$i$lcssa;
        }
        HEAP32[$x$i + ($z$6$ph$i << 2) >> 2] = $$lcssa257$lcssa;
        $a$4$ph$i = $a$6$i$lcssa$lcssa;
        $e2$1$ph$i = $$lcssa256$lcssa;
        $rp$4$ph42$i = $rp$6$i$lcssa$lcssa;
        $z$6$ph$i = $603;
       }
       if ((label | 0) == 220) if ($577) {
        HEAP32[$x$i + ($603 + -1 << 2) >> 2] = 0;
        $617 = $z$6$ph$i;
        $a$4$i249 = $a$4$i;
        $e2$1$i246 = $e2$1$i;
        $z$10$i = $603;
       } else {
        $617 = $576;
        $a$4$i249 = $a$4$i;
        $e2$1$i246 = $e2$1$i;
        $z$10$i = $z$6$ph$i;
       }
       $619 = +((HEAP32[$x$i + ($617 << 2) >> 2] | 0) >>> 0);
       $621 = $a$4$i249 + 1 & 127;
       if (($621 | 0) == ($z$10$i | 0)) {
        $680 = $a$4$i249 + 2 & 127;
        HEAP32[$x$i + ($680 + -1 << 2) >> 2] = 0;
        $z$10$1$i = $680;
       } else $z$10$1$i = $z$10$i;
       $643 = +($sign$0 | 0);
       $625 = $643 * ($619 * 1.0e9 + +((HEAP32[$x$i + ($621 << 2) >> 2] | 0) >>> 0));
       $663 = $e2$1$i246 + 53 | 0;
       $669 = $663 - $emin$0$ph | 0;
       $670 = ($669 | 0) < ($bits$0$ph | 0);
       $denormal$0$i = $670 & 1;
       $$012$i = $670 ? (($669 | 0) < 0 ? 0 : $669) : $bits$0$ph;
       if (($$012$i | 0) < 53) {
        $626 = +_copysignl(+_scalbn(1.0, 105 - $$012$i | 0), $625);
        $629 = +_fmodl($625, +_scalbn(1.0, 53 - $$012$i | 0));
        $bias$0$i$25 = $626;
        $frac$0$i = $629;
        $y$1$i$24 = $626 + ($625 - $629);
       } else {
        $bias$0$i$25 = 0.0;
        $frac$0$i = 0.0;
        $y$1$i$24 = $625;
       }
       $633 = $a$4$i249 + 2 & 127;
       do if (($633 | 0) == ($z$10$1$i | 0)) $frac$3$i = $frac$0$i; else {
        $636 = HEAP32[$x$i + ($633 << 2) >> 2] | 0;
        do if ($636 >>> 0 < 5e8) {
         if (!$636) if (($a$4$i249 + 3 & 127 | 0) == ($z$10$1$i | 0)) {
          $frac$1$i = $frac$0$i;
          break;
         }
         $frac$1$i = $643 * .25 + $frac$0$i;
        } else {
         if ($636 >>> 0 > 5e8) {
          $frac$1$i = $643 * .75 + $frac$0$i;
          break;
         }
         if (($a$4$i249 + 3 & 127 | 0) == ($z$10$1$i | 0)) {
          $frac$1$i = $643 * .5 + $frac$0$i;
          break;
         } else {
          $frac$1$i = $643 * .75 + $frac$0$i;
          break;
         }
        } while (0);
        if ((53 - $$012$i | 0) <= 1) {
         $frac$3$i = $frac$1$i;
         break;
        }
        if (+_fmodl($frac$1$i, 1.0) != 0.0) {
         $frac$3$i = $frac$1$i;
         break;
        }
        $frac$3$i = $frac$1$i + 1.0;
       } while (0);
       $661 = $y$1$i$24 + $frac$3$i - $bias$0$i$25;
       do if (($663 & 2147483647 | 0) > (-2 - $sum$i | 0)) {
        if (!(+Math_abs(+$661) >= 9007199254740992.0)) {
         $denormal$2$i = $denormal$0$i;
         $e2$3$i = $e2$1$i246;
         $y$2$i$26 = $661;
        } else {
         $denormal$2$i = $670 & ($$012$i | 0) == ($669 | 0) ? 0 : $denormal$0$i;
         $e2$3$i = $e2$1$i246 + 1 | 0;
         $y$2$i$26 = $661 * .5;
        }
        if (($e2$3$i + 50 | 0) <= ($330 | 0)) if (!($frac$3$i != 0.0 & ($denormal$2$i | 0) != 0)) {
         $e2$4$i = $e2$3$i;
         $y$3$i = $y$2$i$26;
         break;
        }
        $677 = ___errno_location() | 0;
        HEAP32[$677 >> 2] = 34;
        $e2$4$i = $e2$3$i;
        $y$3$i = $y$2$i$26;
       } else {
        $e2$4$i = $e2$1$i246;
        $y$3$i = $661;
       } while (0);
       $$1$i = +_scalbnl($y$3$i, $e2$4$i);
      } while (0);
      $$0 = $$1$i;
      break L4;
      break;
     }
    default:
     {
      if (HEAP32[$1 >> 2] | 0) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
      $113 = ___errno_location() | 0;
      HEAP32[$113 >> 2] = 22;
      ___shlim($f, 0);
      $$0 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 23) {
   $42 = (HEAP32[$1 >> 2] | 0) == 0;
   if (!$42) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
   if (($pok | 0) != 0 & $i$0$lcssa >>> 0 > 3) {
    $i$1 = $i$0$lcssa;
    do {
     if (!$42) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $i$1 = $i$1 + -1 | 0;
    } while ($i$1 >>> 0 > 3);
   }
  }
  $$0 = +($sign$0 | 0) * inf;
 } while (0);
 STACKTOP = sp;
 return +$$0;
}
function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$pre$phi$i$14Z2D = 0, $$pre$phi$i$17$iZ2D = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$rsize$4$i = 0, $100 = 0, $1001 = 0, $1006 = 0, $101 = 0, $1012 = 0, $1015 = 0, $1016 = 0, $1034 = 0, $1036 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1053 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1063 = 0, $107 = 0, $111 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $133 = 0, $139 = 0, $14 = 0, $142 = 0, $145 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $152 = 0, $155 = 0, $157 = 0, $16 = 0, $160 = 0, $162 = 0, $165 = 0, $168 = 0, $169 = 0, $17 = 0, $171 = 0, $172 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $18 = 0, $183 = 0, $184 = 0, $193 = 0, $198 = 0, $202 = 0, $208 = 0, $215 = 0, $219 = 0, $227 = 0, $229 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $238 = 0, $239 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $251 = 0, $252 = 0, $257 = 0, $258 = 0, $261 = 0, $263 = 0, $266 = 0, $271 = 0, $278 = 0, $28 = 0, $287 = 0, $288 = 0, $292 = 0, $298 = 0, $303 = 0, $306 = 0, $310 = 0, $312 = 0, $313 = 0, $315 = 0, $317 = 0, $319 = 0, $32 = 0, $321 = 0, $323 = 0, $325 = 0, $327 = 0, $337 = 0, $338 = 0, $340 = 0, $349 = 0, $35 = 0, $351 = 0, $354 = 0, $356 = 0, $359 = 0, $361 = 0, $364 = 0, $367 = 0, $368 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $382 = 0, $383 = 0, $39 = 0, $392 = 0, $397 = 0, $4 = 0, $401 = 0, $407 = 0, $414 = 0, $418 = 0, $42 = 0, $426 = 0, $429 = 0, $430 = 0, $431 = 0, $435 = 0, $436 = 0, $442 = 0, $447 = 0, $448 = 0, $45 = 0, $451 = 0, $453 = 0, $456 = 0, $461 = 0, $467 = 0, $469 = 0, $47 = 0, $471 = 0, $472 = 0, $48 = 0, $490 = 0, $492 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $509 = 0, $511 = 0, $512 = 0, $514 = 0, $52 = 0, $523 = 0, $527 = 0, $529 = 0, $530 = 0, $531 = 0, $539 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $553 = 0, $555 = 0, $556 = 0, $56 = 0, $562 = 0, $564 = 0, $566 = 0, $573 = 0, $575 = 0, $576 = 0, $577 = 0, $58 = 0, $585 = 0, $586 = 0, $589 = 0, $593 = 0, $597 = 0, $599 = 0, $6 = 0, $60 = 0, $605 = 0, $609 = 0, $613 = 0, $62 = 0, $622 = 0, $623 = 0, $629 = 0, $632 = 0, $635 = 0, $637 = 0, $642 = 0, $648 = 0, $65 = 0, $653 = 0, $654 = 0, $655 = 0, $661 = 0, $662 = 0, $663 = 0, $67 = 0, $678 = 0, $68 = 0, $683 = 0, $684 = 0, $686 = 0, $69 = 0, $692 = 0, $694 = 0, $7 = 0, $70 = 0, $704 = 0, $708 = 0, $71 = 0, $714 = 0, $716 = 0, $722 = 0, $726 = 0, $727 = 0, $732 = 0, $738 = 0, $743 = 0, $746 = 0, $747 = 0, $750 = 0, $752 = 0, $754 = 0, $757 = 0, $768 = 0, $773 = 0, $775 = 0, $778 = 0, $78 = 0, $780 = 0, $783 = 0, $786 = 0, $787 = 0, $788 = 0, $790 = 0, $792 = 0, $793 = 0, $795 = 0, $796 = 0, $801 = 0, $802 = 0, $811 = 0, $816 = 0, $819 = 0, $82 = 0, $820 = 0, $826 = 0, $834 = 0, $840 = 0, $843 = 0, $844 = 0, $845 = 0, $849 = 0, $85 = 0, $850 = 0, $856 = 0, $861 = 0, $862 = 0, $865 = 0, $867 = 0, $870 = 0, $875 = 0, $881 = 0, $883 = 0, $885 = 0, $886 = 0, $89 = 0, $904 = 0, $906 = 0, $91 = 0, $913 = 0, $914 = 0, $915 = 0, $92 = 0, $922 = 0, $926 = 0, $930 = 0, $932 = 0, $938 = 0, $939 = 0, $94 = 0, $941 = 0, $942 = 0, $946 = 0, $95 = 0, $951 = 0, $952 = 0, $953 = 0, $959 = 0, $96 = 0, $966 = 0, $971 = 0, $974 = 0, $975 = 0, $976 = 0, $980 = 0, $981 = 0, $987 = 0, $992 = 0, $993 = 0, $996 = 0, $998 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$9 = 0, $R$1$i$9$lcssa = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$3$i = 0, $R$3$i$11 = 0, $R$3$i$i = 0, $RP$1$i = 0, $RP$1$i$8 = 0, $RP$1$i$8$lcssa = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $T$0$i = 0, $T$0$i$18$i = 0, $T$0$i$18$i$lcssa = 0, $T$0$i$18$i$lcssa139 = 0, $T$0$i$i = 0, $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $br$2$ph$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$5 = 0, $rsize$0$i$lcssa = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$069$i = 0, $sp$069$i$lcssa = 0, $sp$168$i = 0, $sp$168$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i$4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$747$i = 0, $tsize$746$i = 0, $v$0$i = 0, $v$0$i$6 = 0, $v$0$i$lcssa = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0;
 do if ($bytes >>> 0 < 245) {
  $4 = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8;
  $5 = $4 >>> 3;
  $6 = HEAP32[1800] | 0;
  $7 = $6 >>> $5;
  if ($7 & 3) {
   $12 = ($7 & 1 ^ 1) + $5 | 0;
   $14 = 7240 + ($12 << 1 << 2) | 0;
   $15 = $14 + 8 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   do if (($14 | 0) == ($18 | 0)) HEAP32[1800] = $6 & ~(1 << $12); else {
    if ($18 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort();
    $25 = $18 + 12 | 0;
    if ((HEAP32[$25 >> 2] | 0) == ($16 | 0)) {
     HEAP32[$25 >> 2] = $14;
     HEAP32[$15 >> 2] = $18;
     break;
    } else _abort();
   } while (0);
   $28 = $12 << 3;
   HEAP32[$16 + 4 >> 2] = $28 | 3;
   $32 = $16 + $28 + 4 | 0;
   HEAP32[$32 >> 2] = HEAP32[$32 >> 2] | 1;
   $$0 = $17;
   return $$0 | 0;
  }
  $35 = HEAP32[1802] | 0;
  if ($4 >>> 0 > $35 >>> 0) {
   if ($7) {
    $39 = 2 << $5;
    $42 = $7 << $5 & ($39 | 0 - $39);
    $45 = ($42 & 0 - $42) + -1 | 0;
    $47 = $45 >>> 12 & 16;
    $48 = $45 >>> $47;
    $50 = $48 >>> 5 & 8;
    $52 = $48 >>> $50;
    $54 = $52 >>> 2 & 4;
    $56 = $52 >>> $54;
    $58 = $56 >>> 1 & 2;
    $60 = $56 >>> $58;
    $62 = $60 >>> 1 & 1;
    $65 = ($50 | $47 | $54 | $58 | $62) + ($60 >>> $62) | 0;
    $67 = 7240 + ($65 << 1 << 2) | 0;
    $68 = $67 + 8 | 0;
    $69 = HEAP32[$68 >> 2] | 0;
    $70 = $69 + 8 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    do if (($67 | 0) == ($71 | 0)) {
     HEAP32[1800] = $6 & ~(1 << $65);
     $89 = $35;
    } else {
     if ($71 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort();
     $78 = $71 + 12 | 0;
     if ((HEAP32[$78 >> 2] | 0) == ($69 | 0)) {
      HEAP32[$78 >> 2] = $67;
      HEAP32[$68 >> 2] = $71;
      $89 = HEAP32[1802] | 0;
      break;
     } else _abort();
    } while (0);
    $82 = ($65 << 3) - $4 | 0;
    HEAP32[$69 + 4 >> 2] = $4 | 3;
    $85 = $69 + $4 | 0;
    HEAP32[$85 + 4 >> 2] = $82 | 1;
    HEAP32[$85 + $82 >> 2] = $82;
    if ($89) {
     $91 = HEAP32[1805] | 0;
     $92 = $89 >>> 3;
     $94 = 7240 + ($92 << 1 << 2) | 0;
     $95 = HEAP32[1800] | 0;
     $96 = 1 << $92;
     if (!($95 & $96)) {
      HEAP32[1800] = $95 | $96;
      $$pre$phiZ2D = $94 + 8 | 0;
      $F4$0 = $94;
     } else {
      $100 = $94 + 8 | 0;
      $101 = HEAP32[$100 >> 2] | 0;
      if ($101 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
       $$pre$phiZ2D = $100;
       $F4$0 = $101;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $91;
     HEAP32[$F4$0 + 12 >> 2] = $91;
     HEAP32[$91 + 8 >> 2] = $F4$0;
     HEAP32[$91 + 12 >> 2] = $94;
    }
    HEAP32[1802] = $82;
    HEAP32[1805] = $85;
    $$0 = $70;
    return $$0 | 0;
   }
   $107 = HEAP32[1801] | 0;
   if (!$107) $nb$0 = $4; else {
    $111 = ($107 & 0 - $107) + -1 | 0;
    $113 = $111 >>> 12 & 16;
    $114 = $111 >>> $113;
    $116 = $114 >>> 5 & 8;
    $118 = $114 >>> $116;
    $120 = $118 >>> 2 & 4;
    $122 = $118 >>> $120;
    $124 = $122 >>> 1 & 2;
    $126 = $122 >>> $124;
    $128 = $126 >>> 1 & 1;
    $133 = HEAP32[7504 + (($116 | $113 | $120 | $124 | $128) + ($126 >>> $128) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$133 + 4 >> 2] & -8) - $4 | 0;
    $t$0$i = $133;
    $v$0$i = $133;
    while (1) {
     $139 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$139) {
      $142 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$142) {
       $rsize$0$i$lcssa = $rsize$0$i;
       $v$0$i$lcssa = $v$0$i;
       break;
      } else $145 = $142;
     } else $145 = $139;
     $148 = (HEAP32[$145 + 4 >> 2] & -8) - $4 | 0;
     $149 = $148 >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $149 ? $148 : $rsize$0$i;
     $t$0$i = $145;
     $v$0$i = $149 ? $145 : $v$0$i;
    }
    $150 = HEAP32[1804] | 0;
    if ($v$0$i$lcssa >>> 0 < $150 >>> 0) _abort();
    $152 = $v$0$i$lcssa + $4 | 0;
    if ($v$0$i$lcssa >>> 0 >= $152 >>> 0) _abort();
    $155 = HEAP32[$v$0$i$lcssa + 24 >> 2] | 0;
    $157 = HEAP32[$v$0$i$lcssa + 12 >> 2] | 0;
    do if (($157 | 0) == ($v$0$i$lcssa | 0)) {
     $168 = $v$0$i$lcssa + 20 | 0;
     $169 = HEAP32[$168 >> 2] | 0;
     if (!$169) {
      $171 = $v$0$i$lcssa + 16 | 0;
      $172 = HEAP32[$171 >> 2] | 0;
      if (!$172) {
       $R$3$i = 0;
       break;
      } else {
       $R$1$i = $172;
       $RP$1$i = $171;
      }
     } else {
      $R$1$i = $169;
      $RP$1$i = $168;
     }
     while (1) {
      $174 = $R$1$i + 20 | 0;
      $175 = HEAP32[$174 >> 2] | 0;
      if ($175) {
       $R$1$i = $175;
       $RP$1$i = $174;
       continue;
      }
      $177 = $R$1$i + 16 | 0;
      $178 = HEAP32[$177 >> 2] | 0;
      if (!$178) {
       $R$1$i$lcssa = $R$1$i;
       $RP$1$i$lcssa = $RP$1$i;
       break;
      } else {
       $R$1$i = $178;
       $RP$1$i = $177;
      }
     }
     if ($RP$1$i$lcssa >>> 0 < $150 >>> 0) _abort(); else {
      HEAP32[$RP$1$i$lcssa >> 2] = 0;
      $R$3$i = $R$1$i$lcssa;
      break;
     }
    } else {
     $160 = HEAP32[$v$0$i$lcssa + 8 >> 2] | 0;
     if ($160 >>> 0 < $150 >>> 0) _abort();
     $162 = $160 + 12 | 0;
     if ((HEAP32[$162 >> 2] | 0) != ($v$0$i$lcssa | 0)) _abort();
     $165 = $157 + 8 | 0;
     if ((HEAP32[$165 >> 2] | 0) == ($v$0$i$lcssa | 0)) {
      HEAP32[$162 >> 2] = $157;
      HEAP32[$165 >> 2] = $160;
      $R$3$i = $157;
      break;
     } else _abort();
    } while (0);
    do if ($155) {
     $183 = HEAP32[$v$0$i$lcssa + 28 >> 2] | 0;
     $184 = 7504 + ($183 << 2) | 0;
     if (($v$0$i$lcssa | 0) == (HEAP32[$184 >> 2] | 0)) {
      HEAP32[$184 >> 2] = $R$3$i;
      if (!$R$3$i) {
       HEAP32[1801] = HEAP32[1801] & ~(1 << $183);
       break;
      }
     } else {
      if ($155 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort();
      $193 = $155 + 16 | 0;
      if ((HEAP32[$193 >> 2] | 0) == ($v$0$i$lcssa | 0)) HEAP32[$193 >> 2] = $R$3$i; else HEAP32[$155 + 20 >> 2] = $R$3$i;
      if (!$R$3$i) break;
     }
     $198 = HEAP32[1804] | 0;
     if ($R$3$i >>> 0 < $198 >>> 0) _abort();
     HEAP32[$R$3$i + 24 >> 2] = $155;
     $202 = HEAP32[$v$0$i$lcssa + 16 >> 2] | 0;
     do if ($202) if ($202 >>> 0 < $198 >>> 0) _abort(); else {
      HEAP32[$R$3$i + 16 >> 2] = $202;
      HEAP32[$202 + 24 >> 2] = $R$3$i;
      break;
     } while (0);
     $208 = HEAP32[$v$0$i$lcssa + 20 >> 2] | 0;
     if ($208) if ($208 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
      HEAP32[$R$3$i + 20 >> 2] = $208;
      HEAP32[$208 + 24 >> 2] = $R$3$i;
      break;
     }
    } while (0);
    if ($rsize$0$i$lcssa >>> 0 < 16) {
     $215 = $rsize$0$i$lcssa + $4 | 0;
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $215 | 3;
     $219 = $v$0$i$lcssa + $215 + 4 | 0;
     HEAP32[$219 >> 2] = HEAP32[$219 >> 2] | 1;
    } else {
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $4 | 3;
     HEAP32[$152 + 4 >> 2] = $rsize$0$i$lcssa | 1;
     HEAP32[$152 + $rsize$0$i$lcssa >> 2] = $rsize$0$i$lcssa;
     $227 = HEAP32[1802] | 0;
     if ($227) {
      $229 = HEAP32[1805] | 0;
      $230 = $227 >>> 3;
      $232 = 7240 + ($230 << 1 << 2) | 0;
      $233 = HEAP32[1800] | 0;
      $234 = 1 << $230;
      if (!($233 & $234)) {
       HEAP32[1800] = $233 | $234;
       $$pre$phi$iZ2D = $232 + 8 | 0;
       $F1$0$i = $232;
      } else {
       $238 = $232 + 8 | 0;
       $239 = HEAP32[$238 >> 2] | 0;
       if ($239 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $238;
        $F1$0$i = $239;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $229;
      HEAP32[$F1$0$i + 12 >> 2] = $229;
      HEAP32[$229 + 8 >> 2] = $F1$0$i;
      HEAP32[$229 + 12 >> 2] = $232;
     }
     HEAP32[1802] = $rsize$0$i$lcssa;
     HEAP32[1805] = $152;
    }
    $$0 = $v$0$i$lcssa + 8 | 0;
    return $$0 | 0;
   }
  } else $nb$0 = $4;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $247 = $bytes + 11 | 0;
  $248 = $247 & -8;
  $249 = HEAP32[1801] | 0;
  if (!$249) $nb$0 = $248; else {
   $251 = 0 - $248 | 0;
   $252 = $247 >>> 8;
   if (!$252) $idx$0$i = 0; else if ($248 >>> 0 > 16777215) $idx$0$i = 31; else {
    $257 = ($252 + 1048320 | 0) >>> 16 & 8;
    $258 = $252 << $257;
    $261 = ($258 + 520192 | 0) >>> 16 & 4;
    $263 = $258 << $261;
    $266 = ($263 + 245760 | 0) >>> 16 & 2;
    $271 = 14 - ($261 | $257 | $266) + ($263 << $266 >>> 15) | 0;
    $idx$0$i = $248 >>> ($271 + 7 | 0) & 1 | $271 << 1;
   }
   $278 = HEAP32[7504 + ($idx$0$i << 2) >> 2] | 0;
   L123 : do if (!$278) {
    $rsize$3$i = $251;
    $t$2$i = 0;
    $v$3$i = 0;
    label = 86;
   } else {
    $rsize$0$i$5 = $251;
    $rst$0$i = 0;
    $sizebits$0$i = $248 << (($idx$0$i | 0) == 31 ? 0 : 25 - ($idx$0$i >>> 1) | 0);
    $t$0$i$4 = $278;
    $v$0$i$6 = 0;
    while (1) {
     $287 = HEAP32[$t$0$i$4 + 4 >> 2] & -8;
     $288 = $287 - $248 | 0;
     if ($288 >>> 0 < $rsize$0$i$5 >>> 0) if (($287 | 0) == ($248 | 0)) {
      $rsize$412$i = $288;
      $t$411$i = $t$0$i$4;
      $v$413$i = $t$0$i$4;
      label = 90;
      break L123;
     } else {
      $rsize$1$i = $288;
      $v$1$i = $t$0$i$4;
     } else {
      $rsize$1$i = $rsize$0$i$5;
      $v$1$i = $v$0$i$6;
     }
     $292 = HEAP32[$t$0$i$4 + 20 >> 2] | 0;
     $t$0$i$4 = HEAP32[$t$0$i$4 + 16 + ($sizebits$0$i >>> 31 << 2) >> 2] | 0;
     $rst$1$i = ($292 | 0) == 0 | ($292 | 0) == ($t$0$i$4 | 0) ? $rst$0$i : $292;
     $298 = ($t$0$i$4 | 0) == 0;
     if ($298) {
      $rsize$3$i = $rsize$1$i;
      $t$2$i = $rst$1$i;
      $v$3$i = $v$1$i;
      label = 86;
      break;
     } else {
      $rsize$0$i$5 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << ($298 & 1 ^ 1);
      $v$0$i$6 = $v$1$i;
     }
    }
   } while (0);
   if ((label | 0) == 86) {
    if (($t$2$i | 0) == 0 & ($v$3$i | 0) == 0) {
     $303 = 2 << $idx$0$i;
     $306 = $249 & ($303 | 0 - $303);
     if (!$306) {
      $nb$0 = $248;
      break;
     }
     $310 = ($306 & 0 - $306) + -1 | 0;
     $312 = $310 >>> 12 & 16;
     $313 = $310 >>> $312;
     $315 = $313 >>> 5 & 8;
     $317 = $313 >>> $315;
     $319 = $317 >>> 2 & 4;
     $321 = $317 >>> $319;
     $323 = $321 >>> 1 & 2;
     $325 = $321 >>> $323;
     $327 = $325 >>> 1 & 1;
     $t$4$ph$i = HEAP32[7504 + (($315 | $312 | $319 | $323 | $327) + ($325 >>> $327) << 2) >> 2] | 0;
    } else $t$4$ph$i = $t$2$i;
    if (!$t$4$ph$i) {
     $rsize$4$lcssa$i = $rsize$3$i;
     $v$4$lcssa$i = $v$3$i;
    } else {
     $rsize$412$i = $rsize$3$i;
     $t$411$i = $t$4$ph$i;
     $v$413$i = $v$3$i;
     label = 90;
    }
   }
   if ((label | 0) == 90) while (1) {
    label = 0;
    $337 = (HEAP32[$t$411$i + 4 >> 2] & -8) - $248 | 0;
    $338 = $337 >>> 0 < $rsize$412$i >>> 0;
    $$rsize$4$i = $338 ? $337 : $rsize$412$i;
    $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
    $340 = HEAP32[$t$411$i + 16 >> 2] | 0;
    if ($340) {
     $rsize$412$i = $$rsize$4$i;
     $t$411$i = $340;
     $v$413$i = $t$4$v$4$i;
     label = 90;
     continue;
    }
    $t$411$i = HEAP32[$t$411$i + 20 >> 2] | 0;
    if (!$t$411$i) {
     $rsize$4$lcssa$i = $$rsize$4$i;
     $v$4$lcssa$i = $t$4$v$4$i;
     break;
    } else {
     $rsize$412$i = $$rsize$4$i;
     $v$413$i = $t$4$v$4$i;
     label = 90;
    }
   }
   if (!$v$4$lcssa$i) $nb$0 = $248; else if ($rsize$4$lcssa$i >>> 0 < ((HEAP32[1802] | 0) - $248 | 0) >>> 0) {
    $349 = HEAP32[1804] | 0;
    if ($v$4$lcssa$i >>> 0 < $349 >>> 0) _abort();
    $351 = $v$4$lcssa$i + $248 | 0;
    if ($v$4$lcssa$i >>> 0 >= $351 >>> 0) _abort();
    $354 = HEAP32[$v$4$lcssa$i + 24 >> 2] | 0;
    $356 = HEAP32[$v$4$lcssa$i + 12 >> 2] | 0;
    do if (($356 | 0) == ($v$4$lcssa$i | 0)) {
     $367 = $v$4$lcssa$i + 20 | 0;
     $368 = HEAP32[$367 >> 2] | 0;
     if (!$368) {
      $370 = $v$4$lcssa$i + 16 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if (!$371) {
       $R$3$i$11 = 0;
       break;
      } else {
       $R$1$i$9 = $371;
       $RP$1$i$8 = $370;
      }
     } else {
      $R$1$i$9 = $368;
      $RP$1$i$8 = $367;
     }
     while (1) {
      $373 = $R$1$i$9 + 20 | 0;
      $374 = HEAP32[$373 >> 2] | 0;
      if ($374) {
       $R$1$i$9 = $374;
       $RP$1$i$8 = $373;
       continue;
      }
      $376 = $R$1$i$9 + 16 | 0;
      $377 = HEAP32[$376 >> 2] | 0;
      if (!$377) {
       $R$1$i$9$lcssa = $R$1$i$9;
       $RP$1$i$8$lcssa = $RP$1$i$8;
       break;
      } else {
       $R$1$i$9 = $377;
       $RP$1$i$8 = $376;
      }
     }
     if ($RP$1$i$8$lcssa >>> 0 < $349 >>> 0) _abort(); else {
      HEAP32[$RP$1$i$8$lcssa >> 2] = 0;
      $R$3$i$11 = $R$1$i$9$lcssa;
      break;
     }
    } else {
     $359 = HEAP32[$v$4$lcssa$i + 8 >> 2] | 0;
     if ($359 >>> 0 < $349 >>> 0) _abort();
     $361 = $359 + 12 | 0;
     if ((HEAP32[$361 >> 2] | 0) != ($v$4$lcssa$i | 0)) _abort();
     $364 = $356 + 8 | 0;
     if ((HEAP32[$364 >> 2] | 0) == ($v$4$lcssa$i | 0)) {
      HEAP32[$361 >> 2] = $356;
      HEAP32[$364 >> 2] = $359;
      $R$3$i$11 = $356;
      break;
     } else _abort();
    } while (0);
    do if ($354) {
     $382 = HEAP32[$v$4$lcssa$i + 28 >> 2] | 0;
     $383 = 7504 + ($382 << 2) | 0;
     if (($v$4$lcssa$i | 0) == (HEAP32[$383 >> 2] | 0)) {
      HEAP32[$383 >> 2] = $R$3$i$11;
      if (!$R$3$i$11) {
       HEAP32[1801] = HEAP32[1801] & ~(1 << $382);
       break;
      }
     } else {
      if ($354 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort();
      $392 = $354 + 16 | 0;
      if ((HEAP32[$392 >> 2] | 0) == ($v$4$lcssa$i | 0)) HEAP32[$392 >> 2] = $R$3$i$11; else HEAP32[$354 + 20 >> 2] = $R$3$i$11;
      if (!$R$3$i$11) break;
     }
     $397 = HEAP32[1804] | 0;
     if ($R$3$i$11 >>> 0 < $397 >>> 0) _abort();
     HEAP32[$R$3$i$11 + 24 >> 2] = $354;
     $401 = HEAP32[$v$4$lcssa$i + 16 >> 2] | 0;
     do if ($401) if ($401 >>> 0 < $397 >>> 0) _abort(); else {
      HEAP32[$R$3$i$11 + 16 >> 2] = $401;
      HEAP32[$401 + 24 >> 2] = $R$3$i$11;
      break;
     } while (0);
     $407 = HEAP32[$v$4$lcssa$i + 20 >> 2] | 0;
     if ($407) if ($407 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
      HEAP32[$R$3$i$11 + 20 >> 2] = $407;
      HEAP32[$407 + 24 >> 2] = $R$3$i$11;
      break;
     }
    } while (0);
    do if ($rsize$4$lcssa$i >>> 0 < 16) {
     $414 = $rsize$4$lcssa$i + $248 | 0;
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $414 | 3;
     $418 = $v$4$lcssa$i + $414 + 4 | 0;
     HEAP32[$418 >> 2] = HEAP32[$418 >> 2] | 1;
    } else {
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $248 | 3;
     HEAP32[$351 + 4 >> 2] = $rsize$4$lcssa$i | 1;
     HEAP32[$351 + $rsize$4$lcssa$i >> 2] = $rsize$4$lcssa$i;
     $426 = $rsize$4$lcssa$i >>> 3;
     if ($rsize$4$lcssa$i >>> 0 < 256) {
      $429 = 7240 + ($426 << 1 << 2) | 0;
      $430 = HEAP32[1800] | 0;
      $431 = 1 << $426;
      if (!($430 & $431)) {
       HEAP32[1800] = $430 | $431;
       $$pre$phi$i$14Z2D = $429 + 8 | 0;
       $F5$0$i = $429;
      } else {
       $435 = $429 + 8 | 0;
       $436 = HEAP32[$435 >> 2] | 0;
       if ($436 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
        $$pre$phi$i$14Z2D = $435;
        $F5$0$i = $436;
       }
      }
      HEAP32[$$pre$phi$i$14Z2D >> 2] = $351;
      HEAP32[$F5$0$i + 12 >> 2] = $351;
      HEAP32[$351 + 8 >> 2] = $F5$0$i;
      HEAP32[$351 + 12 >> 2] = $429;
      break;
     }
     $442 = $rsize$4$lcssa$i >>> 8;
     if (!$442) $I7$0$i = 0; else if ($rsize$4$lcssa$i >>> 0 > 16777215) $I7$0$i = 31; else {
      $447 = ($442 + 1048320 | 0) >>> 16 & 8;
      $448 = $442 << $447;
      $451 = ($448 + 520192 | 0) >>> 16 & 4;
      $453 = $448 << $451;
      $456 = ($453 + 245760 | 0) >>> 16 & 2;
      $461 = 14 - ($451 | $447 | $456) + ($453 << $456 >>> 15) | 0;
      $I7$0$i = $rsize$4$lcssa$i >>> ($461 + 7 | 0) & 1 | $461 << 1;
     }
     $467 = 7504 + ($I7$0$i << 2) | 0;
     HEAP32[$351 + 28 >> 2] = $I7$0$i;
     $469 = $351 + 16 | 0;
     HEAP32[$469 + 4 >> 2] = 0;
     HEAP32[$469 >> 2] = 0;
     $471 = HEAP32[1801] | 0;
     $472 = 1 << $I7$0$i;
     if (!($471 & $472)) {
      HEAP32[1801] = $471 | $472;
      HEAP32[$467 >> 2] = $351;
      HEAP32[$351 + 24 >> 2] = $467;
      HEAP32[$351 + 12 >> 2] = $351;
      HEAP32[$351 + 8 >> 2] = $351;
      break;
     }
     $K12$0$i = $rsize$4$lcssa$i << (($I7$0$i | 0) == 31 ? 0 : 25 - ($I7$0$i >>> 1) | 0);
     $T$0$i = HEAP32[$467 >> 2] | 0;
     while (1) {
      if ((HEAP32[$T$0$i + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) {
       $T$0$i$lcssa = $T$0$i;
       label = 148;
       break;
      }
      $490 = $T$0$i + 16 + ($K12$0$i >>> 31 << 2) | 0;
      $492 = HEAP32[$490 >> 2] | 0;
      if (!$492) {
       $$lcssa157 = $490;
       $T$0$i$lcssa156 = $T$0$i;
       label = 145;
       break;
      } else {
       $K12$0$i = $K12$0$i << 1;
       $T$0$i = $492;
      }
     }
     if ((label | 0) == 145) if ($$lcssa157 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
      HEAP32[$$lcssa157 >> 2] = $351;
      HEAP32[$351 + 24 >> 2] = $T$0$i$lcssa156;
      HEAP32[$351 + 12 >> 2] = $351;
      HEAP32[$351 + 8 >> 2] = $351;
      break;
     } else if ((label | 0) == 148) {
      $499 = $T$0$i$lcssa + 8 | 0;
      $500 = HEAP32[$499 >> 2] | 0;
      $501 = HEAP32[1804] | 0;
      if ($500 >>> 0 >= $501 >>> 0 & $T$0$i$lcssa >>> 0 >= $501 >>> 0) {
       HEAP32[$500 + 12 >> 2] = $351;
       HEAP32[$499 >> 2] = $351;
       HEAP32[$351 + 8 >> 2] = $500;
       HEAP32[$351 + 12 >> 2] = $T$0$i$lcssa;
       HEAP32[$351 + 24 >> 2] = 0;
       break;
      } else _abort();
     }
    } while (0);
    $$0 = $v$4$lcssa$i + 8 | 0;
    return $$0 | 0;
   } else $nb$0 = $248;
  }
 } while (0);
 $509 = HEAP32[1802] | 0;
 if ($509 >>> 0 >= $nb$0 >>> 0) {
  $511 = $509 - $nb$0 | 0;
  $512 = HEAP32[1805] | 0;
  if ($511 >>> 0 > 15) {
   $514 = $512 + $nb$0 | 0;
   HEAP32[1805] = $514;
   HEAP32[1802] = $511;
   HEAP32[$514 + 4 >> 2] = $511 | 1;
   HEAP32[$514 + $511 >> 2] = $511;
   HEAP32[$512 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[1802] = 0;
   HEAP32[1805] = 0;
   HEAP32[$512 + 4 >> 2] = $509 | 3;
   $523 = $512 + $509 + 4 | 0;
   HEAP32[$523 >> 2] = HEAP32[$523 >> 2] | 1;
  }
  $$0 = $512 + 8 | 0;
  return $$0 | 0;
 }
 $527 = HEAP32[1803] | 0;
 if ($527 >>> 0 > $nb$0 >>> 0) {
  $529 = $527 - $nb$0 | 0;
  HEAP32[1803] = $529;
  $530 = HEAP32[1806] | 0;
  $531 = $530 + $nb$0 | 0;
  HEAP32[1806] = $531;
  HEAP32[$531 + 4 >> 2] = $529 | 1;
  HEAP32[$530 + 4 >> 2] = $nb$0 | 3;
  $$0 = $530 + 8 | 0;
  return $$0 | 0;
 }
 do if (!(HEAP32[1918] | 0)) {
  $539 = _sysconf(30) | 0;
  if (!($539 + -1 & $539)) {
   HEAP32[1920] = $539;
   HEAP32[1919] = $539;
   HEAP32[1921] = -1;
   HEAP32[1922] = -1;
   HEAP32[1923] = 0;
   HEAP32[1911] = 0;
   $545 = (_time(0) | 0) & -16 ^ 1431655768;
   HEAP32[1918] = $545;
   break;
  } else _abort();
 } while (0);
 $546 = $nb$0 + 48 | 0;
 $547 = HEAP32[1920] | 0;
 $548 = $nb$0 + 47 | 0;
 $549 = $547 + $548 | 0;
 $550 = 0 - $547 | 0;
 $551 = $549 & $550;
 if ($551 >>> 0 <= $nb$0 >>> 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $553 = HEAP32[1910] | 0;
 if ($553) {
  $555 = HEAP32[1908] | 0;
  $556 = $555 + $551 | 0;
  if ($556 >>> 0 <= $555 >>> 0 | $556 >>> 0 > $553 >>> 0) {
   $$0 = 0;
   return $$0 | 0;
  }
 }
 L257 : do if (!(HEAP32[1911] & 4)) {
  $562 = HEAP32[1806] | 0;
  L259 : do if (!$562) label = 173; else {
   $sp$0$i$i = 7648;
   while (1) {
    $564 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($564 >>> 0 <= $562 >>> 0) {
     $566 = $sp$0$i$i + 4 | 0;
     if (($564 + (HEAP32[$566 >> 2] | 0) | 0) >>> 0 > $562 >>> 0) {
      $$lcssa153 = $sp$0$i$i;
      $$lcssa155 = $566;
      break;
     }
    }
    $sp$0$i$i = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$sp$0$i$i) {
     label = 173;
     break L259;
    }
   }
   $597 = $549 - (HEAP32[1803] | 0) & $550;
   if ($597 >>> 0 < 2147483647) {
    $599 = _sbrk($597 | 0) | 0;
    if (($599 | 0) == ((HEAP32[$$lcssa153 >> 2] | 0) + (HEAP32[$$lcssa155 >> 2] | 0) | 0)) {
     if (($599 | 0) != (-1 | 0)) {
      $tbase$747$i = $599;
      $tsize$746$i = $597;
      label = 193;
      break L257;
     }
    } else {
     $br$2$ph$i = $599;
     $ssize$2$ph$i = $597;
     label = 183;
    }
   }
  } while (0);
  do if ((label | 0) == 173) {
   $573 = _sbrk(0) | 0;
   if (($573 | 0) != (-1 | 0)) {
    $575 = $573;
    $576 = HEAP32[1919] | 0;
    $577 = $576 + -1 | 0;
    if (!($577 & $575)) $ssize$0$i = $551; else $ssize$0$i = $551 - $575 + ($577 + $575 & 0 - $576) | 0;
    $585 = HEAP32[1908] | 0;
    $586 = $585 + $ssize$0$i | 0;
    if ($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647) {
     $589 = HEAP32[1910] | 0;
     if ($589) if ($586 >>> 0 <= $585 >>> 0 | $586 >>> 0 > $589 >>> 0) break;
     $593 = _sbrk($ssize$0$i | 0) | 0;
     if (($593 | 0) == ($573 | 0)) {
      $tbase$747$i = $573;
      $tsize$746$i = $ssize$0$i;
      label = 193;
      break L257;
     } else {
      $br$2$ph$i = $593;
      $ssize$2$ph$i = $ssize$0$i;
      label = 183;
     }
    }
   }
  } while (0);
  L279 : do if ((label | 0) == 183) {
   $605 = 0 - $ssize$2$ph$i | 0;
   do if ($546 >>> 0 > $ssize$2$ph$i >>> 0 & ($ssize$2$ph$i >>> 0 < 2147483647 & ($br$2$ph$i | 0) != (-1 | 0))) {
    $609 = HEAP32[1920] | 0;
    $613 = $548 - $ssize$2$ph$i + $609 & 0 - $609;
    if ($613 >>> 0 < 2147483647) if ((_sbrk($613 | 0) | 0) == (-1 | 0)) {
     _sbrk($605 | 0) | 0;
     break L279;
    } else {
     $ssize$5$i = $613 + $ssize$2$ph$i | 0;
     break;
    } else $ssize$5$i = $ssize$2$ph$i;
   } else $ssize$5$i = $ssize$2$ph$i; while (0);
   if (($br$2$ph$i | 0) != (-1 | 0)) {
    $tbase$747$i = $br$2$ph$i;
    $tsize$746$i = $ssize$5$i;
    label = 193;
    break L257;
   }
  } while (0);
  HEAP32[1911] = HEAP32[1911] | 4;
  label = 190;
 } else label = 190; while (0);
 if ((label | 0) == 190) if ($551 >>> 0 < 2147483647) {
  $622 = _sbrk($551 | 0) | 0;
  $623 = _sbrk(0) | 0;
  if ($622 >>> 0 < $623 >>> 0 & (($622 | 0) != (-1 | 0) & ($623 | 0) != (-1 | 0))) {
   $629 = $623 - $622 | 0;
   if ($629 >>> 0 > ($nb$0 + 40 | 0) >>> 0) {
    $tbase$747$i = $622;
    $tsize$746$i = $629;
    label = 193;
   }
  }
 }
 if ((label | 0) == 193) {
  $632 = (HEAP32[1908] | 0) + $tsize$746$i | 0;
  HEAP32[1908] = $632;
  if ($632 >>> 0 > (HEAP32[1909] | 0) >>> 0) HEAP32[1909] = $632;
  $635 = HEAP32[1806] | 0;
  do if (!$635) {
   $637 = HEAP32[1804] | 0;
   if (($637 | 0) == 0 | $tbase$747$i >>> 0 < $637 >>> 0) HEAP32[1804] = $tbase$747$i;
   HEAP32[1912] = $tbase$747$i;
   HEAP32[1913] = $tsize$746$i;
   HEAP32[1915] = 0;
   HEAP32[1809] = HEAP32[1918];
   HEAP32[1808] = -1;
   $i$01$i$i = 0;
   do {
    $642 = 7240 + ($i$01$i$i << 1 << 2) | 0;
    HEAP32[$642 + 12 >> 2] = $642;
    HEAP32[$642 + 8 >> 2] = $642;
    $i$01$i$i = $i$01$i$i + 1 | 0;
   } while (($i$01$i$i | 0) != 32);
   $648 = $tbase$747$i + 8 | 0;
   $653 = ($648 & 7 | 0) == 0 ? 0 : 0 - $648 & 7;
   $654 = $tbase$747$i + $653 | 0;
   $655 = $tsize$746$i + -40 - $653 | 0;
   HEAP32[1806] = $654;
   HEAP32[1803] = $655;
   HEAP32[$654 + 4 >> 2] = $655 | 1;
   HEAP32[$654 + $655 + 4 >> 2] = 40;
   HEAP32[1807] = HEAP32[1922];
  } else {
   $sp$069$i = 7648;
   do {
    $661 = HEAP32[$sp$069$i >> 2] | 0;
    $662 = $sp$069$i + 4 | 0;
    $663 = HEAP32[$662 >> 2] | 0;
    if (($tbase$747$i | 0) == ($661 + $663 | 0)) {
     $$lcssa147 = $661;
     $$lcssa149 = $662;
     $$lcssa151 = $663;
     $sp$069$i$lcssa = $sp$069$i;
     label = 203;
     break;
    }
    $sp$069$i = HEAP32[$sp$069$i + 8 >> 2] | 0;
   } while (($sp$069$i | 0) != 0);
   if ((label | 0) == 203) if (!(HEAP32[$sp$069$i$lcssa + 12 >> 2] & 8)) if ($635 >>> 0 < $tbase$747$i >>> 0 & $635 >>> 0 >= $$lcssa147 >>> 0) {
    HEAP32[$$lcssa149 >> 2] = $$lcssa151 + $tsize$746$i;
    $678 = $635 + 8 | 0;
    $683 = ($678 & 7 | 0) == 0 ? 0 : 0 - $678 & 7;
    $684 = $635 + $683 | 0;
    $686 = $tsize$746$i - $683 + (HEAP32[1803] | 0) | 0;
    HEAP32[1806] = $684;
    HEAP32[1803] = $686;
    HEAP32[$684 + 4 >> 2] = $686 | 1;
    HEAP32[$684 + $686 + 4 >> 2] = 40;
    HEAP32[1807] = HEAP32[1922];
    break;
   }
   $692 = HEAP32[1804] | 0;
   if ($tbase$747$i >>> 0 < $692 >>> 0) {
    HEAP32[1804] = $tbase$747$i;
    $757 = $tbase$747$i;
   } else $757 = $692;
   $694 = $tbase$747$i + $tsize$746$i | 0;
   $sp$168$i = 7648;
   while (1) {
    if ((HEAP32[$sp$168$i >> 2] | 0) == ($694 | 0)) {
     $$lcssa144 = $sp$168$i;
     $sp$168$i$lcssa = $sp$168$i;
     label = 211;
     break;
    }
    $sp$168$i = HEAP32[$sp$168$i + 8 >> 2] | 0;
    if (!$sp$168$i) {
     $sp$0$i$i$i = 7648;
     break;
    }
   }
   if ((label | 0) == 211) if (!(HEAP32[$sp$168$i$lcssa + 12 >> 2] & 8)) {
    HEAP32[$$lcssa144 >> 2] = $tbase$747$i;
    $704 = $sp$168$i$lcssa + 4 | 0;
    HEAP32[$704 >> 2] = (HEAP32[$704 >> 2] | 0) + $tsize$746$i;
    $708 = $tbase$747$i + 8 | 0;
    $714 = $tbase$747$i + (($708 & 7 | 0) == 0 ? 0 : 0 - $708 & 7) | 0;
    $716 = $694 + 8 | 0;
    $722 = $694 + (($716 & 7 | 0) == 0 ? 0 : 0 - $716 & 7) | 0;
    $726 = $714 + $nb$0 | 0;
    $727 = $722 - $714 - $nb$0 | 0;
    HEAP32[$714 + 4 >> 2] = $nb$0 | 3;
    do if (($722 | 0) == ($635 | 0)) {
     $732 = (HEAP32[1803] | 0) + $727 | 0;
     HEAP32[1803] = $732;
     HEAP32[1806] = $726;
     HEAP32[$726 + 4 >> 2] = $732 | 1;
    } else {
     if (($722 | 0) == (HEAP32[1805] | 0)) {
      $738 = (HEAP32[1802] | 0) + $727 | 0;
      HEAP32[1802] = $738;
      HEAP32[1805] = $726;
      HEAP32[$726 + 4 >> 2] = $738 | 1;
      HEAP32[$726 + $738 >> 2] = $738;
      break;
     }
     $743 = HEAP32[$722 + 4 >> 2] | 0;
     if (($743 & 3 | 0) == 1) {
      $746 = $743 & -8;
      $747 = $743 >>> 3;
      L331 : do if ($743 >>> 0 < 256) {
       $750 = HEAP32[$722 + 8 >> 2] | 0;
       $752 = HEAP32[$722 + 12 >> 2] | 0;
       $754 = 7240 + ($747 << 1 << 2) | 0;
       do if (($750 | 0) != ($754 | 0)) {
        if ($750 >>> 0 < $757 >>> 0) _abort();
        if ((HEAP32[$750 + 12 >> 2] | 0) == ($722 | 0)) break;
        _abort();
       } while (0);
       if (($752 | 0) == ($750 | 0)) {
        HEAP32[1800] = HEAP32[1800] & ~(1 << $747);
        break;
       }
       do if (($752 | 0) == ($754 | 0)) $$pre$phi10$i$iZ2D = $752 + 8 | 0; else {
        if ($752 >>> 0 < $757 >>> 0) _abort();
        $768 = $752 + 8 | 0;
        if ((HEAP32[$768 >> 2] | 0) == ($722 | 0)) {
         $$pre$phi10$i$iZ2D = $768;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$750 + 12 >> 2] = $752;
       HEAP32[$$pre$phi10$i$iZ2D >> 2] = $750;
      } else {
       $773 = HEAP32[$722 + 24 >> 2] | 0;
       $775 = HEAP32[$722 + 12 >> 2] | 0;
       do if (($775 | 0) == ($722 | 0)) {
        $786 = $722 + 16 | 0;
        $787 = $786 + 4 | 0;
        $788 = HEAP32[$787 >> 2] | 0;
        if (!$788) {
         $790 = HEAP32[$786 >> 2] | 0;
         if (!$790) {
          $R$3$i$i = 0;
          break;
         } else {
          $R$1$i$i = $790;
          $RP$1$i$i = $786;
         }
        } else {
         $R$1$i$i = $788;
         $RP$1$i$i = $787;
        }
        while (1) {
         $792 = $R$1$i$i + 20 | 0;
         $793 = HEAP32[$792 >> 2] | 0;
         if ($793) {
          $R$1$i$i = $793;
          $RP$1$i$i = $792;
          continue;
         }
         $795 = $R$1$i$i + 16 | 0;
         $796 = HEAP32[$795 >> 2] | 0;
         if (!$796) {
          $R$1$i$i$lcssa = $R$1$i$i;
          $RP$1$i$i$lcssa = $RP$1$i$i;
          break;
         } else {
          $R$1$i$i = $796;
          $RP$1$i$i = $795;
         }
        }
        if ($RP$1$i$i$lcssa >>> 0 < $757 >>> 0) _abort(); else {
         HEAP32[$RP$1$i$i$lcssa >> 2] = 0;
         $R$3$i$i = $R$1$i$i$lcssa;
         break;
        }
       } else {
        $778 = HEAP32[$722 + 8 >> 2] | 0;
        if ($778 >>> 0 < $757 >>> 0) _abort();
        $780 = $778 + 12 | 0;
        if ((HEAP32[$780 >> 2] | 0) != ($722 | 0)) _abort();
        $783 = $775 + 8 | 0;
        if ((HEAP32[$783 >> 2] | 0) == ($722 | 0)) {
         HEAP32[$780 >> 2] = $775;
         HEAP32[$783 >> 2] = $778;
         $R$3$i$i = $775;
         break;
        } else _abort();
       } while (0);
       if (!$773) break;
       $801 = HEAP32[$722 + 28 >> 2] | 0;
       $802 = 7504 + ($801 << 2) | 0;
       do if (($722 | 0) == (HEAP32[$802 >> 2] | 0)) {
        HEAP32[$802 >> 2] = $R$3$i$i;
        if ($R$3$i$i) break;
        HEAP32[1801] = HEAP32[1801] & ~(1 << $801);
        break L331;
       } else {
        if ($773 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort();
        $811 = $773 + 16 | 0;
        if ((HEAP32[$811 >> 2] | 0) == ($722 | 0)) HEAP32[$811 >> 2] = $R$3$i$i; else HEAP32[$773 + 20 >> 2] = $R$3$i$i;
        if (!$R$3$i$i) break L331;
       } while (0);
       $816 = HEAP32[1804] | 0;
       if ($R$3$i$i >>> 0 < $816 >>> 0) _abort();
       HEAP32[$R$3$i$i + 24 >> 2] = $773;
       $819 = $722 + 16 | 0;
       $820 = HEAP32[$819 >> 2] | 0;
       do if ($820) if ($820 >>> 0 < $816 >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 16 >> 2] = $820;
        HEAP32[$820 + 24 >> 2] = $R$3$i$i;
        break;
       } while (0);
       $826 = HEAP32[$819 + 4 >> 2] | 0;
       if (!$826) break;
       if ($826 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 20 >> 2] = $826;
        HEAP32[$826 + 24 >> 2] = $R$3$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $722 + $746 | 0;
      $qsize$0$i$i = $746 + $727 | 0;
     } else {
      $oldfirst$0$i$i = $722;
      $qsize$0$i$i = $727;
     }
     $834 = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$834 >> 2] = HEAP32[$834 >> 2] & -2;
     HEAP32[$726 + 4 >> 2] = $qsize$0$i$i | 1;
     HEAP32[$726 + $qsize$0$i$i >> 2] = $qsize$0$i$i;
     $840 = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $843 = 7240 + ($840 << 1 << 2) | 0;
      $844 = HEAP32[1800] | 0;
      $845 = 1 << $840;
      do if (!($844 & $845)) {
       HEAP32[1800] = $844 | $845;
       $$pre$phi$i$17$iZ2D = $843 + 8 | 0;
       $F4$0$i$i = $843;
      } else {
       $849 = $843 + 8 | 0;
       $850 = HEAP32[$849 >> 2] | 0;
       if ($850 >>> 0 >= (HEAP32[1804] | 0) >>> 0) {
        $$pre$phi$i$17$iZ2D = $849;
        $F4$0$i$i = $850;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i$17$iZ2D >> 2] = $726;
      HEAP32[$F4$0$i$i + 12 >> 2] = $726;
      HEAP32[$726 + 8 >> 2] = $F4$0$i$i;
      HEAP32[$726 + 12 >> 2] = $843;
      break;
     }
     $856 = $qsize$0$i$i >>> 8;
     do if (!$856) $I7$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I7$0$i$i = 31;
       break;
      }
      $861 = ($856 + 1048320 | 0) >>> 16 & 8;
      $862 = $856 << $861;
      $865 = ($862 + 520192 | 0) >>> 16 & 4;
      $867 = $862 << $865;
      $870 = ($867 + 245760 | 0) >>> 16 & 2;
      $875 = 14 - ($865 | $861 | $870) + ($867 << $870 >>> 15) | 0;
      $I7$0$i$i = $qsize$0$i$i >>> ($875 + 7 | 0) & 1 | $875 << 1;
     } while (0);
     $881 = 7504 + ($I7$0$i$i << 2) | 0;
     HEAP32[$726 + 28 >> 2] = $I7$0$i$i;
     $883 = $726 + 16 | 0;
     HEAP32[$883 + 4 >> 2] = 0;
     HEAP32[$883 >> 2] = 0;
     $885 = HEAP32[1801] | 0;
     $886 = 1 << $I7$0$i$i;
     if (!($885 & $886)) {
      HEAP32[1801] = $885 | $886;
      HEAP32[$881 >> 2] = $726;
      HEAP32[$726 + 24 >> 2] = $881;
      HEAP32[$726 + 12 >> 2] = $726;
      HEAP32[$726 + 8 >> 2] = $726;
      break;
     }
     $K8$0$i$i = $qsize$0$i$i << (($I7$0$i$i | 0) == 31 ? 0 : 25 - ($I7$0$i$i >>> 1) | 0);
     $T$0$i$18$i = HEAP32[$881 >> 2] | 0;
     while (1) {
      if ((HEAP32[$T$0$i$18$i + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
       $T$0$i$18$i$lcssa = $T$0$i$18$i;
       label = 281;
       break;
      }
      $904 = $T$0$i$18$i + 16 + ($K8$0$i$i >>> 31 << 2) | 0;
      $906 = HEAP32[$904 >> 2] | 0;
      if (!$906) {
       $$lcssa = $904;
       $T$0$i$18$i$lcssa139 = $T$0$i$18$i;
       label = 278;
       break;
      } else {
       $K8$0$i$i = $K8$0$i$i << 1;
       $T$0$i$18$i = $906;
      }
     }
     if ((label | 0) == 278) if ($$lcssa >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
      HEAP32[$$lcssa >> 2] = $726;
      HEAP32[$726 + 24 >> 2] = $T$0$i$18$i$lcssa139;
      HEAP32[$726 + 12 >> 2] = $726;
      HEAP32[$726 + 8 >> 2] = $726;
      break;
     } else if ((label | 0) == 281) {
      $913 = $T$0$i$18$i$lcssa + 8 | 0;
      $914 = HEAP32[$913 >> 2] | 0;
      $915 = HEAP32[1804] | 0;
      if ($914 >>> 0 >= $915 >>> 0 & $T$0$i$18$i$lcssa >>> 0 >= $915 >>> 0) {
       HEAP32[$914 + 12 >> 2] = $726;
       HEAP32[$913 >> 2] = $726;
       HEAP32[$726 + 8 >> 2] = $914;
       HEAP32[$726 + 12 >> 2] = $T$0$i$18$i$lcssa;
       HEAP32[$726 + 24 >> 2] = 0;
       break;
      } else _abort();
     }
    } while (0);
    $$0 = $714 + 8 | 0;
    return $$0 | 0;
   } else $sp$0$i$i$i = 7648;
   while (1) {
    $922 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($922 >>> 0 <= $635 >>> 0) {
     $926 = $922 + (HEAP32[$sp$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($926 >>> 0 > $635 >>> 0) {
      $$lcssa142 = $926;
      break;
     }
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $930 = $$lcssa142 + -47 | 0;
   $932 = $930 + 8 | 0;
   $938 = $930 + (($932 & 7 | 0) == 0 ? 0 : 0 - $932 & 7) | 0;
   $939 = $635 + 16 | 0;
   $941 = $938 >>> 0 < $939 >>> 0 ? $635 : $938;
   $942 = $941 + 8 | 0;
   $946 = $tbase$747$i + 8 | 0;
   $951 = ($946 & 7 | 0) == 0 ? 0 : 0 - $946 & 7;
   $952 = $tbase$747$i + $951 | 0;
   $953 = $tsize$746$i + -40 - $951 | 0;
   HEAP32[1806] = $952;
   HEAP32[1803] = $953;
   HEAP32[$952 + 4 >> 2] = $953 | 1;
   HEAP32[$952 + $953 + 4 >> 2] = 40;
   HEAP32[1807] = HEAP32[1922];
   $959 = $941 + 4 | 0;
   HEAP32[$959 >> 2] = 27;
   HEAP32[$942 >> 2] = HEAP32[1912];
   HEAP32[$942 + 4 >> 2] = HEAP32[1913];
   HEAP32[$942 + 8 >> 2] = HEAP32[1914];
   HEAP32[$942 + 12 >> 2] = HEAP32[1915];
   HEAP32[1912] = $tbase$747$i;
   HEAP32[1913] = $tsize$746$i;
   HEAP32[1915] = 0;
   HEAP32[1914] = $942;
   $p$0$i$i = $941 + 24 | 0;
   do {
    $p$0$i$i = $p$0$i$i + 4 | 0;
    HEAP32[$p$0$i$i >> 2] = 7;
   } while (($p$0$i$i + 4 | 0) >>> 0 < $$lcssa142 >>> 0);
   if (($941 | 0) != ($635 | 0)) {
    $966 = $941 - $635 | 0;
    HEAP32[$959 >> 2] = HEAP32[$959 >> 2] & -2;
    HEAP32[$635 + 4 >> 2] = $966 | 1;
    HEAP32[$941 >> 2] = $966;
    $971 = $966 >>> 3;
    if ($966 >>> 0 < 256) {
     $974 = 7240 + ($971 << 1 << 2) | 0;
     $975 = HEAP32[1800] | 0;
     $976 = 1 << $971;
     if (!($975 & $976)) {
      HEAP32[1800] = $975 | $976;
      $$pre$phi$i$iZ2D = $974 + 8 | 0;
      $F$0$i$i = $974;
     } else {
      $980 = $974 + 8 | 0;
      $981 = HEAP32[$980 >> 2] | 0;
      if ($981 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
       $$pre$phi$i$iZ2D = $980;
       $F$0$i$i = $981;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $635;
     HEAP32[$F$0$i$i + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $F$0$i$i;
     HEAP32[$635 + 12 >> 2] = $974;
     break;
    }
    $987 = $966 >>> 8;
    if (!$987) $I1$0$i$i = 0; else if ($966 >>> 0 > 16777215) $I1$0$i$i = 31; else {
     $992 = ($987 + 1048320 | 0) >>> 16 & 8;
     $993 = $987 << $992;
     $996 = ($993 + 520192 | 0) >>> 16 & 4;
     $998 = $993 << $996;
     $1001 = ($998 + 245760 | 0) >>> 16 & 2;
     $1006 = 14 - ($996 | $992 | $1001) + ($998 << $1001 >>> 15) | 0;
     $I1$0$i$i = $966 >>> ($1006 + 7 | 0) & 1 | $1006 << 1;
    }
    $1012 = 7504 + ($I1$0$i$i << 2) | 0;
    HEAP32[$635 + 28 >> 2] = $I1$0$i$i;
    HEAP32[$635 + 20 >> 2] = 0;
    HEAP32[$939 >> 2] = 0;
    $1015 = HEAP32[1801] | 0;
    $1016 = 1 << $I1$0$i$i;
    if (!($1015 & $1016)) {
     HEAP32[1801] = $1015 | $1016;
     HEAP32[$1012 >> 2] = $635;
     HEAP32[$635 + 24 >> 2] = $1012;
     HEAP32[$635 + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $635;
     break;
    }
    $K2$0$i$i = $966 << (($I1$0$i$i | 0) == 31 ? 0 : 25 - ($I1$0$i$i >>> 1) | 0);
    $T$0$i$i = HEAP32[$1012 >> 2] | 0;
    while (1) {
     if ((HEAP32[$T$0$i$i + 4 >> 2] & -8 | 0) == ($966 | 0)) {
      $T$0$i$i$lcssa = $T$0$i$i;
      label = 307;
      break;
     }
     $1034 = $T$0$i$i + 16 + ($K2$0$i$i >>> 31 << 2) | 0;
     $1036 = HEAP32[$1034 >> 2] | 0;
     if (!$1036) {
      $$lcssa141 = $1034;
      $T$0$i$i$lcssa140 = $T$0$i$i;
      label = 304;
      break;
     } else {
      $K2$0$i$i = $K2$0$i$i << 1;
      $T$0$i$i = $1036;
     }
    }
    if ((label | 0) == 304) if ($$lcssa141 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
     HEAP32[$$lcssa141 >> 2] = $635;
     HEAP32[$635 + 24 >> 2] = $T$0$i$i$lcssa140;
     HEAP32[$635 + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $635;
     break;
    } else if ((label | 0) == 307) {
     $1043 = $T$0$i$i$lcssa + 8 | 0;
     $1044 = HEAP32[$1043 >> 2] | 0;
     $1045 = HEAP32[1804] | 0;
     if ($1044 >>> 0 >= $1045 >>> 0 & $T$0$i$i$lcssa >>> 0 >= $1045 >>> 0) {
      HEAP32[$1044 + 12 >> 2] = $635;
      HEAP32[$1043 >> 2] = $635;
      HEAP32[$635 + 8 >> 2] = $1044;
      HEAP32[$635 + 12 >> 2] = $T$0$i$i$lcssa;
      HEAP32[$635 + 24 >> 2] = 0;
      break;
     } else _abort();
    }
   }
  } while (0);
  $1053 = HEAP32[1803] | 0;
  if ($1053 >>> 0 > $nb$0 >>> 0) {
   $1055 = $1053 - $nb$0 | 0;
   HEAP32[1803] = $1055;
   $1056 = HEAP32[1806] | 0;
   $1057 = $1056 + $nb$0 | 0;
   HEAP32[1806] = $1057;
   HEAP32[$1057 + 4 >> 2] = $1055 | 1;
   HEAP32[$1056 + 4 >> 2] = $nb$0 | 3;
   $$0 = $1056 + 8 | 0;
   return $$0 | 0;
  }
 }
 $1063 = ___errno_location() | 0;
 HEAP32[$1063 >> 2] = 12;
 $$0 = 0;
 return $$0 | 0;
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i$33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0, $$33$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41279$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$590$i = 0, $$a$3$i = 0, $$a$3189$i = 0, $$fl$4 = 0, $$lcssa162$i = 0, $$lcssa321 = 0, $$lcssa322 = 0, $$lcssa326 = 0, $$lcssa328 = 0, $$lcssa329 = 0, $$lcssa330 = 0, $$lcssa331 = 0, $$lcssa332 = 0, $$lcssa334 = 0, $$lcssa344 = 0, $$lcssa347 = 0.0, $$lcssa349 = 0, $$lcssa52 = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre$phi187$iZ2D = 0, $$pre185$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $113 = 0, $12 = 0, $13 = 0, $137 = 0, $138 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $147 = 0, $149 = 0, $15 = 0, $151 = 0, $153 = 0, $154 = 0, $159 = 0, $162 = 0, $167 = 0, $168 = 0, $173 = 0, $180 = 0, $181 = 0, $19 = 0, $192 = 0, $2 = 0, $204 = 0, $21 = 0, $211 = 0, $213 = 0, $216 = 0, $217 = 0, $22 = 0, $222 = 0, $228 = 0, $229 = 0, $235 = 0, $24 = 0, $248 = 0, $25 = 0, $250 = 0, $253 = 0, $258 = 0, $26 = 0, $261 = 0, $262 = 0, $272 = 0, $274 = 0, $276 = 0, $279 = 0, $28 = 0, $281 = 0, $282 = 0, $283 = 0, $289 = 0, $291 = 0, $292 = 0, $296 = 0, $3 = 0, $304 = 0, $31 = 0, $310 = 0, $319 = 0, $32 = 0, $322 = 0, $325 = 0, $326 = 0, $339 = 0, $341 = 0, $346 = 0, $351 = 0, $354 = 0, $364 = 0.0, $37 = 0, $371 = 0, $375 = 0, $382 = 0, $384 = 0, $386 = 0, $387 = 0, $391 = 0, $397 = 0.0, $398 = 0, $4 = 0, $401 = 0, $403 = 0, $406 = 0, $408 = 0, $412 = 0.0, $42 = 0, $422 = 0, $425 = 0, $428 = 0, $43 = 0, $437 = 0, $439 = 0, $440 = 0, $446 = 0, $464 = 0, $469 = 0, $47 = 0, $474 = 0, $484 = 0, $485 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $495 = 0, $497 = 0, $5 = 0, $50 = 0, $500 = 0, $502 = 0, $503 = 0, $504 = 0, $506 = 0, $510 = 0, $512 = 0, $516 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $526 = 0, $532 = 0, $533 = 0, $534 = 0, $538 = 0, $54 = 0, $546 = 0, $560 = 0, $561 = 0, $564 = 0, $569 = 0, $570 = 0, $572 = 0, $580 = 0, $583 = 0, $586 = 0, $587 = 0, $588 = 0, $59 = 0, $591 = 0, $595 = 0, $6 = 0, $603 = 0, $606 = 0, $608 = 0, $610 = 0, $612 = 0, $617 = 0, $618 = 0, $62 = 0, $621 = 0, $623 = 0, $625 = 0, $627 = 0, $63 = 0, $638 = 0, $64 = 0, $641 = 0, $646 = 0, $655 = 0, $656 = 0, $660 = 0, $663 = 0, $665 = 0, $667 = 0, $671 = 0, $674 = 0, $678 = 0, $68 = 0, $688 = 0, $693 = 0, $7 = 0, $70 = 0, $700 = 0, $703 = 0, $711 = 0, $721 = 0, $723 = 0, $731 = 0, $738 = 0, $740 = 0, $744 = 0, $746 = 0, $755 = 0, $761 = 0, $776 = 0, $778 = 0, $791 = 0, $8 = 0, $802 = 0, $9 = 0, $94 = 0, $95 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1150$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3137$i = 0, $a$5$lcssa$i = 0, $a$5112$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0143$i = 0, $carry3$0131$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$142$i = 0, $d$0144$i = 0, $d$1130$i = 0, $d$2$lcssa$i = 0, $d$2111$i = 0, $d$4$i = 0, $d$585$i = 0, $d$678$i = 0, $d$789$i = 0, $e$0126$i = 0, $e$1$i = 0, $e$2107$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$196$i = 0, $estr$2$i = 0, $fl$0103 = 0, $fl$056 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa197 = 0, $i$0108 = 0, $i$0125$i = 0, $i$03$i = 0, $i$03$i$25 = 0, $i$1$lcssa$i = 0, $i$1119 = 0, $i$1119$i = 0, $i$2106$i = 0, $i$295 = 0, $i$295$lcssa = 0, $i$3102$i = 0, $i$393 = 0, $isdigittmp = 0, $isdigittmp$1$i = 0, $isdigittmp$1$i$22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i$24 = 0, $isdigittmp9 = 0, $j$0$118$i = 0, $j$0120$i = 0, $j$1103$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1107 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notrhs$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4195 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$172$i = 0, $round$071$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s7$082$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$073$i = 0, $s9$0$i = 0, $s9$186$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa327 = 0, $storemerge = 0, $storemerge$13 = 0, $storemerge$8102 = 0, $storemerge$854 = 0, $t$0 = 0, $t$1 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0109 = 0, $ws$1120 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$096 = 0, $z$1$lcssa$i = 0, $z$1149$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3136$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 $big$i = sp + 24 | 0;
 $e2$i = sp + 16 | 0;
 $buf$i = sp + 588 | 0;
 $ebuf0$i = sp + 576 | 0;
 $arg = sp;
 $buf = sp + 536 | 0;
 $wc = sp + 8 | 0;
 $mb = sp + 528 | 0;
 $0 = ($f | 0) != 0;
 $1 = $buf + 40 | 0;
 $2 = $1;
 $3 = $buf + 39 | 0;
 $4 = $wc + 4 | 0;
 $5 = $ebuf0$i + 12 | 0;
 $6 = $ebuf0$i + 11 | 0;
 $7 = $buf$i;
 $8 = $5;
 $9 = $8 - $7 | 0;
 $10 = -2 - $7 | 0;
 $11 = $8 + 2 | 0;
 $12 = $big$i + 288 | 0;
 $13 = $buf$i + 9 | 0;
 $14 = $13;
 $15 = $buf$i + 8 | 0;
 $22 = $fmt;
 $cnt$0 = 0;
 $l$0 = 0;
 $l10n$0 = 0;
 L1 : while (1) {
  do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
   $19 = ___errno_location() | 0;
   HEAP32[$19 >> 2] = 75;
   $cnt$1 = -1;
   break;
  } else {
   $cnt$1 = $l$0 + $cnt$0 | 0;
   break;
  } else $cnt$1 = $cnt$0; while (0);
  $21 = HEAP8[$22 >> 0] | 0;
  if (!($21 << 24 >> 24)) {
   $cnt$1$lcssa = $cnt$1;
   $l10n$0$lcssa = $l10n$0;
   label = 242;
   break;
  } else {
   $24 = $21;
   $26 = $22;
  }
  L9 : while (1) {
   switch ($24 << 24 >> 24) {
   case 37:
    {
     $28 = $26;
     $z$096 = $26;
     label = 9;
     break L9;
     break;
    }
   case 0:
    {
     $$lcssa52 = $26;
     $z$0$lcssa = $26;
     break L9;
     break;
    }
   default:
    {}
   }
   $25 = $26 + 1 | 0;
   $24 = HEAP8[$25 >> 0] | 0;
   $26 = $25;
  }
  L12 : do if ((label | 0) == 9) while (1) {
   label = 0;
   if ((HEAP8[$28 + 1 >> 0] | 0) != 37) {
    $$lcssa52 = $28;
    $z$0$lcssa = $z$096;
    break L12;
   }
   $31 = $z$096 + 1 | 0;
   $32 = $28 + 2 | 0;
   if ((HEAP8[$32 >> 0] | 0) == 37) {
    $28 = $32;
    $z$096 = $31;
    label = 9;
   } else {
    $$lcssa52 = $32;
    $z$0$lcssa = $31;
    break;
   }
  } while (0);
  $37 = $z$0$lcssa - $22 | 0;
  if ($0) if (!(HEAP32[$f >> 2] & 32)) ___fwritex($22, $37, $f) | 0;
  if (($z$0$lcssa | 0) != ($22 | 0)) {
   $22 = $$lcssa52;
   $cnt$0 = $cnt$1;
   $l$0 = $37;
   continue;
  }
  $42 = $$lcssa52 + 1 | 0;
  $43 = HEAP8[$42 >> 0] | 0;
  $isdigittmp = ($43 << 24 >> 24) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $47 = (HEAP8[$$lcssa52 + 2 >> 0] | 0) == 36;
   $$43 = $47 ? $$lcssa52 + 3 | 0 : $42;
   $50 = HEAP8[$$43 >> 0] | 0;
   $argpos$0 = $47 ? $isdigittmp : -1;
   $l10n$1 = $47 ? 1 : $l10n$0;
   $storemerge = $$43;
  } else {
   $50 = $43;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0;
   $storemerge = $42;
  }
  $49 = $50 << 24 >> 24;
  L25 : do if (($49 & -32 | 0) == 32) {
   $54 = $49;
   $59 = $50;
   $fl$0103 = 0;
   $storemerge$8102 = $storemerge;
   while (1) {
    if (!(1 << $54 + -32 & 75913)) {
     $68 = $59;
     $fl$056 = $fl$0103;
     $storemerge$854 = $storemerge$8102;
     break L25;
    }
    $62 = 1 << ($59 << 24 >> 24) + -32 | $fl$0103;
    $63 = $storemerge$8102 + 1 | 0;
    $64 = HEAP8[$63 >> 0] | 0;
    $54 = $64 << 24 >> 24;
    if (($54 & -32 | 0) != 32) {
     $68 = $64;
     $fl$056 = $62;
     $storemerge$854 = $63;
     break;
    } else {
     $59 = $64;
     $fl$0103 = $62;
     $storemerge$8102 = $63;
    }
   }
  } else {
   $68 = $50;
   $fl$056 = 0;
   $storemerge$854 = $storemerge;
  } while (0);
  do if ($68 << 24 >> 24 == 42) {
   $70 = $storemerge$854 + 1 | 0;
   $isdigittmp11 = (HEAP8[$70 >> 0] | 0) + -48 | 0;
   if ($isdigittmp11 >>> 0 < 10) if ((HEAP8[$storemerge$854 + 2 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp11 << 2) >> 2] = 10;
    $l10n$2 = 1;
    $storemerge$13 = $storemerge$854 + 3 | 0;
    $w$0 = HEAP32[$nl_arg + ((HEAP8[$70 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else label = 24; else label = 24;
   if ((label | 0) == 24) {
    label = 0;
    if ($l10n$1) {
     $$0 = -1;
     break L1;
    }
    if (!$0) {
     $108 = $70;
     $fl$1 = $fl$056;
     $l10n$3 = 0;
     $w$1 = 0;
     break;
    }
    $94 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $95 = HEAP32[$94 >> 2] | 0;
    HEAP32[$ap >> 2] = $94 + 4;
    $l10n$2 = 0;
    $storemerge$13 = $70;
    $w$0 = $95;
   }
   if (($w$0 | 0) < 0) {
    $108 = $storemerge$13;
    $fl$1 = $fl$056 | 8192;
    $l10n$3 = $l10n$2;
    $w$1 = 0 - $w$0 | 0;
   } else {
    $108 = $storemerge$13;
    $fl$1 = $fl$056;
    $l10n$3 = $l10n$2;
    $w$1 = $w$0;
   }
  } else {
   $isdigittmp$1$i = ($68 << 24 >> 24) + -48 | 0;
   if ($isdigittmp$1$i >>> 0 < 10) {
    $103 = $storemerge$854;
    $i$03$i = 0;
    $isdigittmp4$i = $isdigittmp$1$i;
    while (1) {
     $101 = ($i$03$i * 10 | 0) + $isdigittmp4$i | 0;
     $102 = $103 + 1 | 0;
     $isdigittmp4$i = (HEAP8[$102 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i >>> 0 >= 10) {
      $$lcssa321 = $101;
      $$lcssa322 = $102;
      break;
     } else {
      $103 = $102;
      $i$03$i = $101;
     }
    }
    if (($$lcssa321 | 0) < 0) {
     $$0 = -1;
     break L1;
    } else {
     $108 = $$lcssa322;
     $fl$1 = $fl$056;
     $l10n$3 = $l10n$1;
     $w$1 = $$lcssa321;
    }
   } else {
    $108 = $storemerge$854;
    $fl$1 = $fl$056;
    $l10n$3 = $l10n$1;
    $w$1 = 0;
   }
  } while (0);
  L46 : do if ((HEAP8[$108 >> 0] | 0) == 46) {
   $110 = $108 + 1 | 0;
   $111 = HEAP8[$110 >> 0] | 0;
   if ($111 << 24 >> 24 != 42) {
    $isdigittmp$1$i$22 = ($111 << 24 >> 24) + -48 | 0;
    if ($isdigittmp$1$i$22 >>> 0 < 10) {
     $143 = $110;
     $i$03$i$25 = 0;
     $isdigittmp4$i$24 = $isdigittmp$1$i$22;
    } else {
     $802 = $110;
     $p$0 = 0;
     break;
    }
    while (1) {
     $141 = ($i$03$i$25 * 10 | 0) + $isdigittmp4$i$24 | 0;
     $142 = $143 + 1 | 0;
     $isdigittmp4$i$24 = (HEAP8[$142 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i$24 >>> 0 >= 10) {
      $802 = $142;
      $p$0 = $141;
      break L46;
     } else {
      $143 = $142;
      $i$03$i$25 = $141;
     }
    }
   }
   $113 = $108 + 2 | 0;
   $isdigittmp9 = (HEAP8[$113 >> 0] | 0) + -48 | 0;
   if ($isdigittmp9 >>> 0 < 10) if ((HEAP8[$108 + 3 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp9 << 2) >> 2] = 10;
    $802 = $108 + 4 | 0;
    $p$0 = HEAP32[$nl_arg + ((HEAP8[$113 >> 0] | 0) + -48 << 3) >> 2] | 0;
    break;
   }
   if ($l10n$3) {
    $$0 = -1;
    break L1;
   }
   if ($0) {
    $137 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $138 = HEAP32[$137 >> 2] | 0;
    HEAP32[$ap >> 2] = $137 + 4;
    $802 = $113;
    $p$0 = $138;
   } else {
    $802 = $113;
    $p$0 = 0;
   }
  } else {
   $802 = $108;
   $p$0 = -1;
  } while (0);
  $147 = $802;
  $st$0 = 0;
  while (1) {
   $149 = (HEAP8[$147 >> 0] | 0) + -65 | 0;
   if ($149 >>> 0 > 57) {
    $$0 = -1;
    break L1;
   }
   $151 = $147 + 1 | 0;
   $153 = HEAP8[21765 + ($st$0 * 58 | 0) + $149 >> 0] | 0;
   $154 = $153 & 255;
   if (($154 + -1 | 0) >>> 0 < 8) {
    $147 = $151;
    $st$0 = $154;
   } else {
    $$lcssa326 = $147;
    $$lcssa328 = $151;
    $$lcssa329 = $153;
    $$lcssa330 = $154;
    $st$0$lcssa327 = $st$0;
    break;
   }
  }
  if (!($$lcssa329 << 24 >> 24)) {
   $$0 = -1;
   break;
  }
  $159 = ($argpos$0 | 0) > -1;
  do if ($$lcssa329 << 24 >> 24 == 19) if ($159) {
   $$0 = -1;
   break L1;
  } else label = 52; else {
   if ($159) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $$lcssa330;
    $162 = $nl_arg + ($argpos$0 << 3) | 0;
    $167 = HEAP32[$162 + 4 >> 2] | 0;
    $168 = $arg;
    HEAP32[$168 >> 2] = HEAP32[$162 >> 2];
    HEAP32[$168 + 4 >> 2] = $167;
    label = 52;
    break;
   }
   if (!$0) {
    $$0 = 0;
    break L1;
   }
   _pop_arg($arg, $$lcssa330, $ap);
  } while (0);
  if ((label | 0) == 52) {
   label = 0;
   if (!$0) {
    $22 = $$lcssa328;
    $cnt$0 = $cnt$1;
    $l$0 = $37;
    $l10n$0 = $l10n$3;
    continue;
   }
  }
  $173 = HEAP8[$$lcssa326 >> 0] | 0;
  $t$0 = ($st$0$lcssa327 | 0) != 0 & ($173 & 15 | 0) == 3 ? $173 & -33 : $173;
  $180 = $fl$1 & -65537;
  $fl$1$ = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $180;
  L75 : do switch ($t$0 | 0) {
  case 110:
   {
    switch ($st$0$lcssa327 | 0) {
    case 0:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $22 = $$lcssa328;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 1:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $22 = $$lcssa328;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 2:
     {
      $192 = HEAP32[$arg >> 2] | 0;
      HEAP32[$192 >> 2] = $cnt$1;
      HEAP32[$192 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $22 = $$lcssa328;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 3:
     {
      HEAP16[HEAP32[$arg >> 2] >> 1] = $cnt$1;
      $22 = $$lcssa328;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 4:
     {
      HEAP8[HEAP32[$arg >> 2] >> 0] = $cnt$1;
      $22 = $$lcssa328;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 6:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $22 = $$lcssa328;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 7:
     {
      $204 = HEAP32[$arg >> 2] | 0;
      HEAP32[$204 >> 2] = $cnt$1;
      HEAP32[$204 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $22 = $$lcssa328;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    default:
     {
      $22 = $$lcssa328;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
     }
    }
    break;
   }
  case 112:
   {
    $fl$3 = $fl$1$ | 8;
    $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
    $t$1 = 120;
    label = 64;
    break;
   }
  case 88:
  case 120:
   {
    $fl$3 = $fl$1$;
    $p$1 = $p$0;
    $t$1 = $t$0;
    label = 64;
    break;
   }
  case 111:
   {
    $248 = $arg;
    $250 = HEAP32[$248 >> 2] | 0;
    $253 = HEAP32[$248 + 4 >> 2] | 0;
    if (($250 | 0) == 0 & ($253 | 0) == 0) $$0$lcssa$i = $1; else {
     $$03$i$33 = $1;
     $258 = $250;
     $262 = $253;
     while (1) {
      $261 = $$03$i$33 + -1 | 0;
      HEAP8[$261 >> 0] = $258 & 7 | 48;
      $258 = _bitshift64Lshr($258 | 0, $262 | 0, 3) | 0;
      $262 = tempRet0;
      if (($258 | 0) == 0 & ($262 | 0) == 0) {
       $$0$lcssa$i = $261;
       break;
      } else $$03$i$33 = $261;
     }
    }
    if (!($fl$1$ & 8)) {
     $a$0 = $$0$lcssa$i;
     $fl$4 = $fl$1$;
     $p$2 = $p$0;
     $pl$1 = 0;
     $prefix$1 = 22245;
     label = 77;
    } else {
     $272 = $2 - $$0$lcssa$i + 1 | 0;
     $a$0 = $$0$lcssa$i;
     $fl$4 = $fl$1$;
     $p$2 = ($p$0 | 0) < ($272 | 0) ? $272 : $p$0;
     $pl$1 = 0;
     $prefix$1 = 22245;
     label = 77;
    }
    break;
   }
  case 105:
  case 100:
   {
    $274 = $arg;
    $276 = HEAP32[$274 >> 2] | 0;
    $279 = HEAP32[$274 + 4 >> 2] | 0;
    if (($279 | 0) < 0) {
     $281 = _i64Subtract(0, 0, $276 | 0, $279 | 0) | 0;
     $282 = tempRet0;
     $283 = $arg;
     HEAP32[$283 >> 2] = $281;
     HEAP32[$283 + 4 >> 2] = $282;
     $291 = $281;
     $292 = $282;
     $pl$0 = 1;
     $prefix$0 = 22245;
     label = 76;
     break L75;
    }
    if (!($fl$1$ & 2048)) {
     $289 = $fl$1$ & 1;
     $291 = $276;
     $292 = $279;
     $pl$0 = $289;
     $prefix$0 = ($289 | 0) == 0 ? 22245 : 22247;
     label = 76;
    } else {
     $291 = $276;
     $292 = $279;
     $pl$0 = 1;
     $prefix$0 = 22246;
     label = 76;
    }
    break;
   }
  case 117:
   {
    $181 = $arg;
    $291 = HEAP32[$181 >> 2] | 0;
    $292 = HEAP32[$181 + 4 >> 2] | 0;
    $pl$0 = 0;
    $prefix$0 = 22245;
    label = 76;
    break;
   }
  case 99:
   {
    HEAP8[$3 >> 0] = HEAP32[$arg >> 2];
    $a$2 = $3;
    $fl$6 = $180;
    $p$5 = 1;
    $pl$2 = 0;
    $prefix$2 = 22245;
    $z$2 = $1;
    break;
   }
  case 109:
   {
    $319 = ___errno_location() | 0;
    $a$1 = _strerror(HEAP32[$319 >> 2] | 0) | 0;
    label = 82;
    break;
   }
  case 115:
   {
    $322 = HEAP32[$arg >> 2] | 0;
    $a$1 = ($322 | 0) != 0 ? $322 : 22255;
    label = 82;
    break;
   }
  case 67:
   {
    HEAP32[$wc >> 2] = HEAP32[$arg >> 2];
    HEAP32[$4 >> 2] = 0;
    HEAP32[$arg >> 2] = $wc;
    $p$4195 = -1;
    label = 86;
    break;
   }
  case 83:
   {
    if (!$p$0) {
     _pad($f, 32, $w$1, 0, $fl$1$);
     $i$0$lcssa197 = 0;
     label = 98;
    } else {
     $p$4195 = $p$0;
     label = 86;
    }
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    $364 = +HEAPF64[$arg >> 3];
    HEAP32[$e2$i >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = $364;
    if ((HEAP32[tempDoublePtr + 4 >> 2] | 0) < 0) {
     $$07$i = -$364;
     $pl$0$i = 1;
     $prefix$0$i = 22262;
    } else if (!($fl$1$ & 2048)) {
     $371 = $fl$1$ & 1;
     $$07$i = $364;
     $pl$0$i = $371;
     $prefix$0$i = ($371 | 0) == 0 ? 22263 : 22268;
    } else {
     $$07$i = $364;
     $pl$0$i = 1;
     $prefix$0$i = 22265;
    }
    HEAPF64[tempDoublePtr >> 3] = $$07$i;
    $375 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
    do if ($375 >>> 0 < 2146435072 | ($375 | 0) == 2146435072 & 0 < 0) {
     $397 = +_frexpl($$07$i, $e2$i) * 2.0;
     $398 = $397 != 0.0;
     if ($398) HEAP32[$e2$i >> 2] = (HEAP32[$e2$i >> 2] | 0) + -1;
     $401 = $t$0 | 32;
     if (($401 | 0) == 97) {
      $403 = $t$0 & 32;
      $prefix$0$$i = ($403 | 0) == 0 ? $prefix$0$i : $prefix$0$i + 9 | 0;
      $406 = $pl$0$i | 2;
      $408 = 12 - $p$0 | 0;
      do if ($p$0 >>> 0 > 11 | ($408 | 0) == 0) $$1$i = $397; else {
       $re$172$i = $408;
       $round$071$i = 8.0;
       while (1) {
        $re$172$i = $re$172$i + -1 | 0;
        $412 = $round$071$i * 16.0;
        if (!$re$172$i) {
         $$lcssa347 = $412;
         break;
        } else $round$071$i = $412;
       }
       if ((HEAP8[$prefix$0$$i >> 0] | 0) == 45) {
        $$1$i = -($$lcssa347 + (-$397 - $$lcssa347));
        break;
       } else {
        $$1$i = $397 + $$lcssa347 - $$lcssa347;
        break;
       }
      } while (0);
      $422 = HEAP32[$e2$i >> 2] | 0;
      $425 = ($422 | 0) < 0 ? 0 - $422 | 0 : $422;
      $428 = _fmt_u($425, (($425 | 0) < 0) << 31 >> 31, $5) | 0;
      if (($428 | 0) == ($5 | 0)) {
       HEAP8[$6 >> 0] = 48;
       $estr$0$i = $6;
      } else $estr$0$i = $428;
      HEAP8[$estr$0$i + -1 >> 0] = ($422 >> 31 & 2) + 43;
      $437 = $estr$0$i + -2 | 0;
      HEAP8[$437 >> 0] = $t$0 + 15;
      $notrhs$i = ($p$0 | 0) < 1;
      $439 = ($fl$1$ & 8 | 0) == 0;
      $$2$i = $$1$i;
      $s$0$i = $buf$i;
      while (1) {
       $440 = ~~$$2$i;
       $446 = $s$0$i + 1 | 0;
       HEAP8[$s$0$i >> 0] = HEAPU8[22229 + $440 >> 0] | $403;
       $$2$i = ($$2$i - +($440 | 0)) * 16.0;
       do if (($446 - $7 | 0) == 1) {
        if ($439 & ($notrhs$i & $$2$i == 0.0)) {
         $s$1$i = $446;
         break;
        }
        HEAP8[$446 >> 0] = 46;
        $s$1$i = $s$0$i + 2 | 0;
       } else $s$1$i = $446; while (0);
       if (!($$2$i != 0.0)) {
        $s$1$i$lcssa = $s$1$i;
        break;
       } else $s$0$i = $s$1$i;
      }
      $$pre185$i = $s$1$i$lcssa;
      $l$0$i = ($p$0 | 0) != 0 & ($10 + $$pre185$i | 0) < ($p$0 | 0) ? $11 + $p$0 - $437 | 0 : $9 - $437 + $$pre185$i | 0;
      $464 = $l$0$i + $406 | 0;
      _pad($f, 32, $w$1, $464, $fl$1$);
      if (!(HEAP32[$f >> 2] & 32)) ___fwritex($prefix$0$$i, $406, $f) | 0;
      _pad($f, 48, $w$1, $464, $fl$1$ ^ 65536);
      $469 = $$pre185$i - $7 | 0;
      if (!(HEAP32[$f >> 2] & 32)) ___fwritex($buf$i, $469, $f) | 0;
      $474 = $8 - $437 | 0;
      _pad($f, 48, $l$0$i - ($469 + $474) | 0, 0, 0);
      if (!(HEAP32[$f >> 2] & 32)) ___fwritex($437, $474, $f) | 0;
      _pad($f, 32, $w$1, $464, $fl$1$ ^ 8192);
      $$0$i = ($464 | 0) < ($w$1 | 0) ? $w$1 : $464;
      break;
     }
     $$p$i = ($p$0 | 0) < 0 ? 6 : $p$0;
     if ($398) {
      $484 = (HEAP32[$e2$i >> 2] | 0) + -28 | 0;
      HEAP32[$e2$i >> 2] = $484;
      $$3$i = $397 * 268435456.0;
      $485 = $484;
     } else {
      $$3$i = $397;
      $485 = HEAP32[$e2$i >> 2] | 0;
     }
     $$33$i = ($485 | 0) < 0 ? $big$i : $12;
     $487 = $$33$i;
     $$4$i = $$3$i;
     $z$0$i = $$33$i;
     while (1) {
      $488 = ~~$$4$i >>> 0;
      HEAP32[$z$0$i >> 2] = $488;
      $489 = $z$0$i + 4 | 0;
      $$4$i = ($$4$i - +($488 >>> 0)) * 1.0e9;
      if (!($$4$i != 0.0)) {
       $$lcssa331 = $489;
       break;
      } else $z$0$i = $489;
     }
     $$pr$i = HEAP32[$e2$i >> 2] | 0;
     if (($$pr$i | 0) > 0) {
      $495 = $$pr$i;
      $a$1150$i = $$33$i;
      $z$1149$i = $$lcssa331;
      while (1) {
       $497 = ($495 | 0) > 29 ? 29 : $495;
       $d$0$142$i = $z$1149$i + -4 | 0;
       do if ($d$0$142$i >>> 0 < $a$1150$i >>> 0) $a$2$ph$i = $a$1150$i; else {
        $carry$0143$i = 0;
        $d$0144$i = $d$0$142$i;
        while (1) {
         $500 = _bitshift64Shl(HEAP32[$d$0144$i >> 2] | 0, 0, $497 | 0) | 0;
         $502 = _i64Add($500 | 0, tempRet0 | 0, $carry$0143$i | 0, 0) | 0;
         $503 = tempRet0;
         $504 = ___uremdi3($502 | 0, $503 | 0, 1e9, 0) | 0;
         HEAP32[$d$0144$i >> 2] = $504;
         $506 = ___udivdi3($502 | 0, $503 | 0, 1e9, 0) | 0;
         $d$0144$i = $d$0144$i + -4 | 0;
         if ($d$0144$i >>> 0 < $a$1150$i >>> 0) {
          $$lcssa332 = $506;
          break;
         } else $carry$0143$i = $506;
        }
        if (!$$lcssa332) {
         $a$2$ph$i = $a$1150$i;
         break;
        }
        $510 = $a$1150$i + -4 | 0;
        HEAP32[$510 >> 2] = $$lcssa332;
        $a$2$ph$i = $510;
       } while (0);
       $z$2$i = $z$1149$i;
       while (1) {
        if ($z$2$i >>> 0 <= $a$2$ph$i >>> 0) {
         $z$2$i$lcssa = $z$2$i;
         break;
        }
        $512 = $z$2$i + -4 | 0;
        if (!(HEAP32[$512 >> 2] | 0)) $z$2$i = $512; else {
         $z$2$i$lcssa = $z$2$i;
         break;
        }
       }
       $516 = (HEAP32[$e2$i >> 2] | 0) - $497 | 0;
       HEAP32[$e2$i >> 2] = $516;
       if (($516 | 0) > 0) {
        $495 = $516;
        $a$1150$i = $a$2$ph$i;
        $z$1149$i = $z$2$i$lcssa;
       } else {
        $$pr50$i = $516;
        $a$1$lcssa$i = $a$2$ph$i;
        $z$1$lcssa$i = $z$2$i$lcssa;
        break;
       }
      }
     } else {
      $$pr50$i = $$pr$i;
      $a$1$lcssa$i = $$33$i;
      $z$1$lcssa$i = $$lcssa331;
     }
     if (($$pr50$i | 0) < 0) {
      $521 = (($$p$i + 25 | 0) / 9 | 0) + 1 | 0;
      $522 = ($401 | 0) == 102;
      $524 = $$pr50$i;
      $a$3137$i = $a$1$lcssa$i;
      $z$3136$i = $z$1$lcssa$i;
      while (1) {
       $523 = 0 - $524 | 0;
       $526 = ($523 | 0) > 9 ? 9 : $523;
       do if ($a$3137$i >>> 0 < $z$3136$i >>> 0) {
        $532 = (1 << $526) + -1 | 0;
        $533 = 1e9 >>> $526;
        $carry3$0131$i = 0;
        $d$1130$i = $a$3137$i;
        while (1) {
         $534 = HEAP32[$d$1130$i >> 2] | 0;
         HEAP32[$d$1130$i >> 2] = ($534 >>> $526) + $carry3$0131$i;
         $538 = Math_imul($534 & $532, $533) | 0;
         $d$1130$i = $d$1130$i + 4 | 0;
         if ($d$1130$i >>> 0 >= $z$3136$i >>> 0) {
          $$lcssa334 = $538;
          break;
         } else $carry3$0131$i = $538;
        }
        $$a$3$i = (HEAP32[$a$3137$i >> 2] | 0) == 0 ? $a$3137$i + 4 | 0 : $a$3137$i;
        if (!$$lcssa334) {
         $$a$3189$i = $$a$3$i;
         $z$4$i = $z$3136$i;
         break;
        }
        HEAP32[$z$3136$i >> 2] = $$lcssa334;
        $$a$3189$i = $$a$3$i;
        $z$4$i = $z$3136$i + 4 | 0;
       } else {
        $$a$3189$i = (HEAP32[$a$3137$i >> 2] | 0) == 0 ? $a$3137$i + 4 | 0 : $a$3137$i;
        $z$4$i = $z$3136$i;
       } while (0);
       $546 = $522 ? $$33$i : $$a$3189$i;
       $$z$4$i = ($z$4$i - $546 >> 2 | 0) > ($521 | 0) ? $546 + ($521 << 2) | 0 : $z$4$i;
       $524 = (HEAP32[$e2$i >> 2] | 0) + $526 | 0;
       HEAP32[$e2$i >> 2] = $524;
       if (($524 | 0) >= 0) {
        $a$3$lcssa$i = $$a$3189$i;
        $z$3$lcssa$i = $$z$4$i;
        break;
       } else {
        $a$3137$i = $$a$3189$i;
        $z$3136$i = $$z$4$i;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;
      $z$3$lcssa$i = $z$1$lcssa$i;
     }
     do if ($a$3$lcssa$i >>> 0 < $z$3$lcssa$i >>> 0) {
      $560 = ($487 - $a$3$lcssa$i >> 2) * 9 | 0;
      $561 = HEAP32[$a$3$lcssa$i >> 2] | 0;
      if ($561 >>> 0 < 10) {
       $e$1$i = $560;
       break;
      } else {
       $e$0126$i = $560;
       $i$0125$i = 10;
      }
      while (1) {
       $i$0125$i = $i$0125$i * 10 | 0;
       $564 = $e$0126$i + 1 | 0;
       if ($561 >>> 0 < $i$0125$i >>> 0) {
        $e$1$i = $564;
        break;
       } else $e$0126$i = $564;
      }
     } else $e$1$i = 0; while (0);
     $569 = ($401 | 0) == 103;
     $570 = ($$p$i | 0) != 0;
     $572 = $$p$i - (($401 | 0) != 102 ? $e$1$i : 0) + (($570 & $569) << 31 >> 31) | 0;
     if (($572 | 0) < ((($z$3$lcssa$i - $487 >> 2) * 9 | 0) + -9 | 0)) {
      $580 = $572 + 9216 | 0;
      $583 = $$33$i + 4 + ((($580 | 0) / 9 | 0) + -1024 << 2) | 0;
      $j$0$118$i = (($580 | 0) % 9 | 0) + 1 | 0;
      if (($j$0$118$i | 0) < 9) {
       $i$1119$i = 10;
       $j$0120$i = $j$0$118$i;
       while (1) {
        $586 = $i$1119$i * 10 | 0;
        $j$0120$i = $j$0120$i + 1 | 0;
        if (($j$0120$i | 0) == 9) {
         $i$1$lcssa$i = $586;
         break;
        } else $i$1119$i = $586;
       }
      } else $i$1$lcssa$i = 10;
      $587 = HEAP32[$583 >> 2] | 0;
      $588 = ($587 >>> 0) % ($i$1$lcssa$i >>> 0) | 0;
      $591 = ($583 + 4 | 0) == ($z$3$lcssa$i | 0);
      do if ($591 & ($588 | 0) == 0) {
       $a$8$i = $a$3$lcssa$i;
       $d$4$i = $583;
       $e$4$i = $e$1$i;
      } else {
       $$20$i = ((($587 >>> 0) / ($i$1$lcssa$i >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
       $595 = ($i$1$lcssa$i | 0) / 2 | 0;
       if ($588 >>> 0 < $595 >>> 0) $small$0$i = .5; else $small$0$i = $591 & ($588 | 0) == ($595 | 0) ? 1.0 : 1.5;
       do if (!$pl$0$i) {
        $round6$1$i = $$20$i;
        $small$1$i = $small$0$i;
       } else {
        if ((HEAP8[$prefix$0$i >> 0] | 0) != 45) {
         $round6$1$i = $$20$i;
         $small$1$i = $small$0$i;
         break;
        }
        $round6$1$i = -$$20$i;
        $small$1$i = -$small$0$i;
       } while (0);
       $603 = $587 - $588 | 0;
       HEAP32[$583 >> 2] = $603;
       if (!($round6$1$i + $small$1$i != $round6$1$i)) {
        $a$8$i = $a$3$lcssa$i;
        $d$4$i = $583;
        $e$4$i = $e$1$i;
        break;
       }
       $606 = $603 + $i$1$lcssa$i | 0;
       HEAP32[$583 >> 2] = $606;
       if ($606 >>> 0 > 999999999) {
        $a$5112$i = $a$3$lcssa$i;
        $d$2111$i = $583;
        while (1) {
         $608 = $d$2111$i + -4 | 0;
         HEAP32[$d$2111$i >> 2] = 0;
         if ($608 >>> 0 < $a$5112$i >>> 0) {
          $610 = $a$5112$i + -4 | 0;
          HEAP32[$610 >> 2] = 0;
          $a$6$i = $610;
         } else $a$6$i = $a$5112$i;
         $612 = (HEAP32[$608 >> 2] | 0) + 1 | 0;
         HEAP32[$608 >> 2] = $612;
         if ($612 >>> 0 > 999999999) {
          $a$5112$i = $a$6$i;
          $d$2111$i = $608;
         } else {
          $a$5$lcssa$i = $a$6$i;
          $d$2$lcssa$i = $608;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;
        $d$2$lcssa$i = $583;
       }
       $617 = ($487 - $a$5$lcssa$i >> 2) * 9 | 0;
       $618 = HEAP32[$a$5$lcssa$i >> 2] | 0;
       if ($618 >>> 0 < 10) {
        $a$8$i = $a$5$lcssa$i;
        $d$4$i = $d$2$lcssa$i;
        $e$4$i = $617;
        break;
       } else {
        $e$2107$i = $617;
        $i$2106$i = 10;
       }
       while (1) {
        $i$2106$i = $i$2106$i * 10 | 0;
        $621 = $e$2107$i + 1 | 0;
        if ($618 >>> 0 < $i$2106$i >>> 0) {
         $a$8$i = $a$5$lcssa$i;
         $d$4$i = $d$2$lcssa$i;
         $e$4$i = $621;
         break;
        } else $e$2107$i = $621;
       }
      } while (0);
      $623 = $d$4$i + 4 | 0;
      $a$9$ph$i = $a$8$i;
      $e$5$ph$i = $e$4$i;
      $z$7$ph$i = $z$3$lcssa$i >>> 0 > $623 >>> 0 ? $623 : $z$3$lcssa$i;
     } else {
      $a$9$ph$i = $a$3$lcssa$i;
      $e$5$ph$i = $e$1$i;
      $z$7$ph$i = $z$3$lcssa$i;
     }
     $625 = 0 - $e$5$ph$i | 0;
     $z$7$i = $z$7$ph$i;
     while (1) {
      if ($z$7$i >>> 0 <= $a$9$ph$i >>> 0) {
       $$lcssa162$i = 0;
       $z$7$i$lcssa = $z$7$i;
       break;
      }
      $627 = $z$7$i + -4 | 0;
      if (!(HEAP32[$627 >> 2] | 0)) $z$7$i = $627; else {
       $$lcssa162$i = 1;
       $z$7$i$lcssa = $z$7$i;
       break;
      }
     }
     do if ($569) {
      $$p$$i = ($570 & 1 ^ 1) + $$p$i | 0;
      if (($$p$$i | 0) > ($e$5$ph$i | 0) & ($e$5$ph$i | 0) > -5) {
       $$013$i = $t$0 + -1 | 0;
       $$210$i = $$p$$i + -1 - $e$5$ph$i | 0;
      } else {
       $$013$i = $t$0 + -2 | 0;
       $$210$i = $$p$$i + -1 | 0;
      }
      $638 = $fl$1$ & 8;
      if ($638) {
       $$114$i = $$013$i;
       $$311$i = $$210$i;
       $$pre$phi187$iZ2D = $638;
       break;
      }
      do if ($$lcssa162$i) {
       $641 = HEAP32[$z$7$i$lcssa + -4 >> 2] | 0;
       if (!$641) {
        $j$2$i = 9;
        break;
       }
       if (!(($641 >>> 0) % 10 | 0)) {
        $i$3102$i = 10;
        $j$1103$i = 0;
       } else {
        $j$2$i = 0;
        break;
       }
       while (1) {
        $i$3102$i = $i$3102$i * 10 | 0;
        $646 = $j$1103$i + 1 | 0;
        if (($641 >>> 0) % ($i$3102$i >>> 0) | 0) {
         $j$2$i = $646;
         break;
        } else $j$1103$i = $646;
       }
      } else $j$2$i = 9; while (0);
      $655 = (($z$7$i$lcssa - $487 >> 2) * 9 | 0) + -9 | 0;
      if (($$013$i | 32 | 0) == 102) {
       $656 = $655 - $j$2$i | 0;
       $$23$i = ($656 | 0) < 0 ? 0 : $656;
       $$114$i = $$013$i;
       $$311$i = ($$210$i | 0) < ($$23$i | 0) ? $$210$i : $$23$i;
       $$pre$phi187$iZ2D = 0;
       break;
      } else {
       $660 = $655 + $e$5$ph$i - $j$2$i | 0;
       $$25$i = ($660 | 0) < 0 ? 0 : $660;
       $$114$i = $$013$i;
       $$311$i = ($$210$i | 0) < ($$25$i | 0) ? $$210$i : $$25$i;
       $$pre$phi187$iZ2D = 0;
       break;
      }
     } else {
      $$114$i = $t$0;
      $$311$i = $$p$i;
      $$pre$phi187$iZ2D = $fl$1$ & 8;
     } while (0);
     $663 = $$311$i | $$pre$phi187$iZ2D;
     $665 = ($663 | 0) != 0 & 1;
     $667 = ($$114$i | 32 | 0) == 102;
     if ($667) {
      $$pn$i = ($e$5$ph$i | 0) > 0 ? $e$5$ph$i : 0;
      $estr$2$i = 0;
     } else {
      $671 = ($e$5$ph$i | 0) < 0 ? $625 : $e$5$ph$i;
      $674 = _fmt_u($671, (($671 | 0) < 0) << 31 >> 31, $5) | 0;
      if (($8 - $674 | 0) < 2) {
       $estr$196$i = $674;
       while (1) {
        $678 = $estr$196$i + -1 | 0;
        HEAP8[$678 >> 0] = 48;
        if (($8 - $678 | 0) < 2) $estr$196$i = $678; else {
         $estr$1$lcssa$i = $678;
         break;
        }
       }
      } else $estr$1$lcssa$i = $674;
      HEAP8[$estr$1$lcssa$i + -1 >> 0] = ($e$5$ph$i >> 31 & 2) + 43;
      $688 = $estr$1$lcssa$i + -2 | 0;
      HEAP8[$688 >> 0] = $$114$i;
      $$pn$i = $8 - $688 | 0;
      $estr$2$i = $688;
     }
     $693 = $pl$0$i + 1 + $$311$i + $665 + $$pn$i | 0;
     _pad($f, 32, $w$1, $693, $fl$1$);
     if (!(HEAP32[$f >> 2] & 32)) ___fwritex($prefix$0$i, $pl$0$i, $f) | 0;
     _pad($f, 48, $w$1, $693, $fl$1$ ^ 65536);
     do if ($667) {
      $r$0$a$9$i = $a$9$ph$i >>> 0 > $$33$i >>> 0 ? $$33$i : $a$9$ph$i;
      $d$585$i = $r$0$a$9$i;
      while (1) {
       $700 = _fmt_u(HEAP32[$d$585$i >> 2] | 0, 0, $13) | 0;
       do if (($d$585$i | 0) == ($r$0$a$9$i | 0)) {
        if (($700 | 0) != ($13 | 0)) {
         $s7$1$i = $700;
         break;
        }
        HEAP8[$15 >> 0] = 48;
        $s7$1$i = $15;
       } else {
        if ($700 >>> 0 > $buf$i >>> 0) $s7$082$i = $700; else {
         $s7$1$i = $700;
         break;
        }
        while (1) {
         $703 = $s7$082$i + -1 | 0;
         HEAP8[$703 >> 0] = 48;
         if ($703 >>> 0 > $buf$i >>> 0) $s7$082$i = $703; else {
          $s7$1$i = $703;
          break;
         }
        }
       } while (0);
       if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s7$1$i, $14 - $s7$1$i | 0, $f) | 0;
       $711 = $d$585$i + 4 | 0;
       if ($711 >>> 0 > $$33$i >>> 0) {
        $$lcssa344 = $711;
        break;
       } else $d$585$i = $711;
      }
      do if ($663) {
       if (HEAP32[$f >> 2] & 32) break;
       ___fwritex(22297, 1, $f) | 0;
      } while (0);
      if (($$311$i | 0) > 0 & $$lcssa344 >>> 0 < $z$7$i$lcssa >>> 0) {
       $$41279$i = $$311$i;
       $d$678$i = $$lcssa344;
       while (1) {
        $721 = _fmt_u(HEAP32[$d$678$i >> 2] | 0, 0, $13) | 0;
        if ($721 >>> 0 > $buf$i >>> 0) {
         $s8$073$i = $721;
         while (1) {
          $723 = $s8$073$i + -1 | 0;
          HEAP8[$723 >> 0] = 48;
          if ($723 >>> 0 > $buf$i >>> 0) $s8$073$i = $723; else {
           $s8$0$lcssa$i = $723;
           break;
          }
         }
        } else $s8$0$lcssa$i = $721;
        if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s8$0$lcssa$i, ($$41279$i | 0) > 9 ? 9 : $$41279$i, $f) | 0;
        $d$678$i = $d$678$i + 4 | 0;
        $731 = $$41279$i + -9 | 0;
        if (!(($$41279$i | 0) > 9 & $d$678$i >>> 0 < $z$7$i$lcssa >>> 0)) {
         $$412$lcssa$i = $731;
         break;
        } else $$41279$i = $731;
       }
      } else $$412$lcssa$i = $$311$i;
      _pad($f, 48, $$412$lcssa$i + 9 | 0, 9, 0);
     } else {
      $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $a$9$ph$i + 4 | 0;
      if (($$311$i | 0) > -1) {
       $738 = ($$pre$phi187$iZ2D | 0) == 0;
       $$590$i = $$311$i;
       $d$789$i = $a$9$ph$i;
       while (1) {
        $740 = _fmt_u(HEAP32[$d$789$i >> 2] | 0, 0, $13) | 0;
        if (($740 | 0) == ($13 | 0)) {
         HEAP8[$15 >> 0] = 48;
         $s9$0$i = $15;
        } else $s9$0$i = $740;
        do if (($d$789$i | 0) == ($a$9$ph$i | 0)) {
         $746 = $s9$0$i + 1 | 0;
         if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s9$0$i, 1, $f) | 0;
         if ($738 & ($$590$i | 0) < 1) {
          $s9$2$i = $746;
          break;
         }
         if (HEAP32[$f >> 2] & 32) {
          $s9$2$i = $746;
          break;
         }
         ___fwritex(22297, 1, $f) | 0;
         $s9$2$i = $746;
        } else {
         if ($s9$0$i >>> 0 > $buf$i >>> 0) $s9$186$i = $s9$0$i; else {
          $s9$2$i = $s9$0$i;
          break;
         }
         while (1) {
          $744 = $s9$186$i + -1 | 0;
          HEAP8[$744 >> 0] = 48;
          if ($744 >>> 0 > $buf$i >>> 0) $s9$186$i = $744; else {
           $s9$2$i = $744;
           break;
          }
         }
        } while (0);
        $755 = $14 - $s9$2$i | 0;
        if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s9$2$i, ($$590$i | 0) > ($755 | 0) ? $755 : $$590$i, $f) | 0;
        $761 = $$590$i - $755 | 0;
        $d$789$i = $d$789$i + 4 | 0;
        if (!($d$789$i >>> 0 < $z$7$$i >>> 0 & ($761 | 0) > -1)) {
         $$5$lcssa$i = $761;
         break;
        } else $$590$i = $761;
       }
      } else $$5$lcssa$i = $$311$i;
      _pad($f, 48, $$5$lcssa$i + 18 | 0, 18, 0);
      if (HEAP32[$f >> 2] & 32) break;
      ___fwritex($estr$2$i, $8 - $estr$2$i | 0, $f) | 0;
     } while (0);
     _pad($f, 32, $w$1, $693, $fl$1$ ^ 8192);
     $$0$i = ($693 | 0) < ($w$1 | 0) ? $w$1 : $693;
    } else {
     $382 = ($t$0 & 32 | 0) != 0;
     $384 = $$07$i != $$07$i | 0.0 != 0.0;
     $pl$1$i = $384 ? 0 : $pl$0$i;
     $386 = $pl$1$i + 3 | 0;
     _pad($f, 32, $w$1, $386, $180);
     $387 = HEAP32[$f >> 2] | 0;
     if (!($387 & 32)) {
      ___fwritex($prefix$0$i, $pl$1$i, $f) | 0;
      $391 = HEAP32[$f >> 2] | 0;
     } else $391 = $387;
     if (!($391 & 32)) ___fwritex($384 ? ($382 ? 22289 : 22293) : $382 ? 22281 : 22285, 3, $f) | 0;
     _pad($f, 32, $w$1, $386, $fl$1$ ^ 8192);
     $$0$i = ($386 | 0) < ($w$1 | 0) ? $w$1 : $386;
    } while (0);
    $22 = $$lcssa328;
    $cnt$0 = $cnt$1;
    $l$0 = $$0$i;
    $l10n$0 = $l10n$3;
    continue L1;
    break;
   }
  default:
   {
    $a$2 = $22;
    $fl$6 = $fl$1$;
    $p$5 = $p$0;
    $pl$2 = 0;
    $prefix$2 = 22245;
    $z$2 = $1;
   }
  } while (0);
  L308 : do if ((label | 0) == 64) {
   label = 0;
   $211 = $arg;
   $213 = HEAP32[$211 >> 2] | 0;
   $216 = HEAP32[$211 + 4 >> 2] | 0;
   $217 = $t$1 & 32;
   if (($213 | 0) == 0 & ($216 | 0) == 0) {
    $a$0 = $1;
    $fl$4 = $fl$3;
    $p$2 = $p$1;
    $pl$1 = 0;
    $prefix$1 = 22245;
    label = 77;
   } else {
    $$012$i = $1;
    $222 = $213;
    $229 = $216;
    while (1) {
     $228 = $$012$i + -1 | 0;
     HEAP8[$228 >> 0] = HEAPU8[22229 + ($222 & 15) >> 0] | $217;
     $222 = _bitshift64Lshr($222 | 0, $229 | 0, 4) | 0;
     $229 = tempRet0;
     if (($222 | 0) == 0 & ($229 | 0) == 0) {
      $$lcssa349 = $228;
      break;
     } else $$012$i = $228;
    }
    $235 = $arg;
    if (($fl$3 & 8 | 0) == 0 | (HEAP32[$235 >> 2] | 0) == 0 & (HEAP32[$235 + 4 >> 2] | 0) == 0) {
     $a$0 = $$lcssa349;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 0;
     $prefix$1 = 22245;
     label = 77;
    } else {
     $a$0 = $$lcssa349;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 2;
     $prefix$1 = 22245 + ($t$1 >> 4) | 0;
     label = 77;
    }
   }
  } else if ((label | 0) == 76) {
   label = 0;
   $a$0 = _fmt_u($291, $292, $1) | 0;
   $fl$4 = $fl$1$;
   $p$2 = $p$0;
   $pl$1 = $pl$0;
   $prefix$1 = $prefix$0;
   label = 77;
  } else if ((label | 0) == 82) {
   label = 0;
   $325 = _memchr($a$1, 0, $p$0) | 0;
   $326 = ($325 | 0) == 0;
   $a$2 = $a$1;
   $fl$6 = $180;
   $p$5 = $326 ? $p$0 : $325 - $a$1 | 0;
   $pl$2 = 0;
   $prefix$2 = 22245;
   $z$2 = $326 ? $a$1 + $p$0 | 0 : $325;
  } else if ((label | 0) == 86) {
   label = 0;
   $i$0108 = 0;
   $l$1107 = 0;
   $ws$0109 = HEAP32[$arg >> 2] | 0;
   while (1) {
    $339 = HEAP32[$ws$0109 >> 2] | 0;
    if (!$339) {
     $i$0$lcssa = $i$0108;
     $l$2 = $l$1107;
     break;
    }
    $341 = _wctomb($mb, $339) | 0;
    if (($341 | 0) < 0 | $341 >>> 0 > ($p$4195 - $i$0108 | 0) >>> 0) {
     $i$0$lcssa = $i$0108;
     $l$2 = $341;
     break;
    }
    $346 = $341 + $i$0108 | 0;
    if ($p$4195 >>> 0 > $346 >>> 0) {
     $i$0108 = $346;
     $l$1107 = $341;
     $ws$0109 = $ws$0109 + 4 | 0;
    } else {
     $i$0$lcssa = $346;
     $l$2 = $341;
     break;
    }
   }
   if (($l$2 | 0) < 0) {
    $$0 = -1;
    break L1;
   }
   _pad($f, 32, $w$1, $i$0$lcssa, $fl$1$);
   if (!$i$0$lcssa) {
    $i$0$lcssa197 = 0;
    label = 98;
   } else {
    $i$1119 = 0;
    $ws$1120 = HEAP32[$arg >> 2] | 0;
    while (1) {
     $351 = HEAP32[$ws$1120 >> 2] | 0;
     if (!$351) {
      $i$0$lcssa197 = $i$0$lcssa;
      label = 98;
      break L308;
     }
     $354 = _wctomb($mb, $351) | 0;
     $i$1119 = $354 + $i$1119 | 0;
     if (($i$1119 | 0) > ($i$0$lcssa | 0)) {
      $i$0$lcssa197 = $i$0$lcssa;
      label = 98;
      break L308;
     }
     if (!(HEAP32[$f >> 2] & 32)) ___fwritex($mb, $354, $f) | 0;
     if ($i$1119 >>> 0 >= $i$0$lcssa >>> 0) {
      $i$0$lcssa197 = $i$0$lcssa;
      label = 98;
      break;
     } else $ws$1120 = $ws$1120 + 4 | 0;
    }
   }
  } while (0);
  if ((label | 0) == 98) {
   label = 0;
   _pad($f, 32, $w$1, $i$0$lcssa197, $fl$1$ ^ 8192);
   $22 = $$lcssa328;
   $cnt$0 = $cnt$1;
   $l$0 = ($w$1 | 0) > ($i$0$lcssa197 | 0) ? $w$1 : $i$0$lcssa197;
   $l10n$0 = $l10n$3;
   continue;
  }
  if ((label | 0) == 77) {
   label = 0;
   $$fl$4 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
   $296 = $arg;
   $304 = (HEAP32[$296 >> 2] | 0) != 0 | (HEAP32[$296 + 4 >> 2] | 0) != 0;
   if (($p$2 | 0) != 0 | $304) {
    $310 = ($304 & 1 ^ 1) + ($2 - $a$0) | 0;
    $a$2 = $a$0;
    $fl$6 = $$fl$4;
    $p$5 = ($p$2 | 0) > ($310 | 0) ? $p$2 : $310;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $1;
   } else {
    $a$2 = $1;
    $fl$6 = $$fl$4;
    $p$5 = 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $1;
   }
  }
  $776 = $z$2 - $a$2 | 0;
  $$p$5 = ($p$5 | 0) < ($776 | 0) ? $776 : $p$5;
  $778 = $pl$2 + $$p$5 | 0;
  $w$2 = ($w$1 | 0) < ($778 | 0) ? $778 : $w$1;
  _pad($f, 32, $w$2, $778, $fl$6);
  if (!(HEAP32[$f >> 2] & 32)) ___fwritex($prefix$2, $pl$2, $f) | 0;
  _pad($f, 48, $w$2, $778, $fl$6 ^ 65536);
  _pad($f, 48, $$p$5, $776, 0);
  if (!(HEAP32[$f >> 2] & 32)) ___fwritex($a$2, $776, $f) | 0;
  _pad($f, 32, $w$2, $778, $fl$6 ^ 8192);
  $22 = $$lcssa328;
  $cnt$0 = $cnt$1;
  $l$0 = $w$2;
  $l10n$0 = $l10n$3;
 }
 L343 : do if ((label | 0) == 242) if (!$f) if (!$l10n$0$lcssa) $$0 = 0; else {
  $i$295 = 1;
  while (1) {
   $791 = HEAP32[$nl_type + ($i$295 << 2) >> 2] | 0;
   if (!$791) {
    $i$295$lcssa = $i$295;
    break;
   }
   _pop_arg($nl_arg + ($i$295 << 3) | 0, $791, $ap);
   $i$295 = $i$295 + 1 | 0;
   if (($i$295 | 0) >= 10) {
    $$0 = 1;
    break L343;
   }
  }
  if (($i$295$lcssa | 0) < 10) {
   $i$393 = $i$295$lcssa;
   while (1) {
    if (HEAP32[$nl_type + ($i$393 << 2) >> 2] | 0) {
     $$0 = -1;
     break L343;
    }
    $i$393 = $i$393 + 1 | 0;
    if (($i$393 | 0) >= 10) {
     $$0 = 1;
     break;
    }
   }
  } else $$0 = 1;
 } else $$0 = $cnt$1$lcssa; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$111 = 0, $$0$i$i$1$i$i$139 = 0, $$0$i$i$1$i$i$157 = 0, $$0$i$i$1$i$i$49 = 0, $$0$i$i$1$i$i$64 = 0, $$0$i$i$1$i$i$89 = 0, $$0$i$i$102 = 0, $$0$i$i$120 = 0, $$0$i$i$126 = 0, $$0$i$i$131 = 0, $$0$i$i$148 = 0, $$0$i$i$41 = 0, $$0$i$i$55 = 0, $$0$i$i$57 = 0, $$0$i$i$71 = 0, $$0$i$i$75 = 0, $$0$i$i$80 = 0, $$0$i$i$97 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$105 = 0, $$0$i$i$i$i$133 = 0, $$0$i$i$i$i$151 = 0, $$0$i$i$i$i$43 = 0, $$0$i$i$i$i$58 = 0, $$0$i$i$i$i$83 = 0, $$10 = 0, $$lcssa = 0, $$lcssa216 = 0, $$lcssa320 = 0, $$lcssa321 = 0, $$pre$i$3$i$i$113 = 0, $$pre$i$3$i$i$141 = 0, $$pre$i$3$i$i$141223 = 0, $$pre$i$3$i$i$141225 = 0, $$pre$i$3$i$i$159 = 0, $$pre$i$3$i$i$159236 = 0, $$pre$i$3$i$i$159237 = 0, $$pre$i$3$i$i$66 = 0, $$pre$i$3$i$i$66244 = 0, $$pre$i$3$i$i$66246 = 0, $$pre$i$3$i$i$91 = 0, $$pre$i$3$i$i$91228$ph = 0, $$pre$i$3$i$i$91228249 = 0, $$pre240 = 0, $$sink = 0, $0 = 0, $101 = 0, $104 = 0, $114 = 0, $115 = 0, $117 = 0, $130 = 0, $131 = 0, $132 = 0, $142 = 0, $148 = 0, $149 = 0, $15 = 0, $155 = 0, $158 = 0, $16 = 0, $160 = 0, $162 = 0, $164 = 0, $165 = 0, $17 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $188 = 0, $2 = 0, $20 = 0, $203 = 0, $204 = 0, $205 = 0, $21 = 0, $213 = 0, $22 = 0, $224 = 0, $227 = 0, $23 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $242 = 0, $25 = 0, $26 = 0, $262 = 0, $263 = 0, $264 = 0, $272 = 0, $28 = 0, $288 = 0, $291 = 0, $293 = 0, $299 = 0, $300 = 0, $304 = 0, $308 = 0, $309 = 0, $31 = 0, $319 = 0, $321 = 0, $322 = 0, $323 = 0, $325 = 0, $326 = 0, $327 = 0, $329 = 0, $333 = 0, $337 = 0, $340 = 0, $348 = 0, $349 = 0, $353 = 0, $356 = 0, $357 = 0, $358 = 0, $360 = 0, $363 = 0, $373 = 0, $376 = 0, $386 = 0, $387 = 0, $389 = 0, $400 = 0, $401 = 0, $402 = 0, $41 = 0, $412 = 0, $414 = 0, $425 = 0, $428 = 0, $438 = 0, $44 = 0, $441 = 0, $451 = 0, $452 = 0, $454 = 0, $467 = 0, $471 = 0, $473 = 0, $484 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $503 = 0, $504 = 0, $505 = 0, $507 = 0, $510 = 0, $522 = 0, $532 = 0, $534 = 0, $547 = 0, $548 = 0, $549 = 0, $557 = 0, $559 = 0, $562 = 0, $57 = 0, $572 = 0, $575 = 0, $58 = 0, $585 = 0, $586 = 0, $588 = 0, $60 = 0, $606 = 0, $608 = 0, $617 = 0, $619 = 0, $620 = 0, $621 = 0, $622 = 0, $637 = 0, $638 = 0, $639 = 0, $646 = 0, $647 = 0, $650 = 0, $660 = 0, $663 = 0, $673 = 0, $675 = 0, $689 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $705 = 0, $711 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $73 = 0, $74 = 0, $75 = 0, $88 = 0, $91 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i$29 = 0, $__i$0$i$i$31 = 0, $__i$0$i$i$34 = 0, $__i$0$i$i$37 = 0, $__ng$0 = 0, $__ng$0$lcssa = 0, $__ng$2$ph = 0, $__nsn = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0 = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$1 = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $0 = sp + 96 | 0;
 $__gbuf = sp + 104 | 0;
 $__gb = sp + 88 | 0;
 $__gn = sp + 80 | 0;
 $__ge = sp + 76 | 0;
 $__pat = sp + 504 | 0;
 $__dp = sp + 72 | 0;
 $__ts = sp + 68 | 0;
 $__grp = sp + 56 | 0;
 $__sym = sp + 44 | 0;
 $__psn = sp + 32 | 0;
 $__nsn = sp + 20 | 0;
 $__spaces = sp + 8 | 0;
 $__fd = sp + 4 | 0;
 $__et = sp;
 HEAP32[$0 >> 2] = $__we;
 HEAP32[$__gb >> 2] = $__gbuf;
 $2 = $__gb + 4 | 0;
 HEAP32[$2 >> 2] = 147;
 HEAP32[$__gn >> 2] = $__gbuf;
 HEAP32[$__ge >> 2] = $__gbuf + 400;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i$29 = 0;
 while (1) {
  if (($__i$0$i$i$29 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i$29 << 2) >> 2] = 0;
  $__i$0$i$i$29 = $__i$0$i$i$29 + 1 | 0;
 }
 $__i$0$i$i$31 = 0;
 while (1) {
  if (($__i$0$i$i$31 | 0) == 3) break;
  HEAP32[$__psn + ($__i$0$i$i$31 << 2) >> 2] = 0;
  $__i$0$i$i$31 = $__i$0$i$i$31 + 1 | 0;
 }
 $__i$0$i$i$34 = 0;
 while (1) {
  if (($__i$0$i$i$34 | 0) == 3) break;
  HEAP32[$__nsn + ($__i$0$i$i$34 << 2) >> 2] = 0;
  $__i$0$i$i$34 = $__i$0$i$i$34 + 1 | 0;
 }
 $__i$0$i$i$37 = 0;
 while (1) {
  if (($__i$0$i$i$37 | 0) == 3) break;
  HEAP32[$__spaces + ($__i$0$i$i$37 << 2) >> 2] = 0;
  $__i$0$i$i$37 = $__i$0$i$i$37 + 1 | 0;
 }
 __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd);
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2];
 $15 = $__psn + 4 | 0;
 $16 = $__nsn + 4 | 0;
 $17 = $__nsn + 8 | 0;
 $18 = $__psn + 8 | 0;
 $20 = ($__flags & 512 | 0) != 0;
 $21 = $__sym + 8 | 0;
 $22 = $__sym + 4 | 0;
 $23 = $__spaces + 4 | 0;
 $24 = $__spaces + 8 | 0;
 $25 = $__pat + 3 | 0;
 $26 = $__grp + 4 | 0;
 $714 = $__gbuf;
 $__p$0 = 0;
 $__trailing_sign$0 = 0;
 L21 : while (1) {
  if ($__p$0 >>> 0 >= 4) {
   $$lcssa321 = $714;
   $__trailing_sign$0$lcssa = $__trailing_sign$0;
   label = 232;
   break;
  }
  $28 = HEAP32[$__b >> 2] | 0;
  do if (!$28) $715 = 1; else {
   $31 = HEAP32[$28 + 12 >> 2] | 0;
   if (($31 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $$0$i$i$i$i$43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 127]($28) | 0; else $$0$i$i$i$i$43 = HEAP32[$31 >> 2] | 0;
   if (($$0$i$i$i$i$43 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $715 = 1;
    break;
   } else {
    $715 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $41 = HEAP32[$__e >> 2] | 0;
  do if (!$41) label = 31; else {
   $44 = HEAP32[$41 + 12 >> 2] | 0;
   if (($44 | 0) == (HEAP32[$41 + 16 >> 2] | 0)) $$0$i$i$1$i$i$49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] & 127]($41) | 0; else $$0$i$i$1$i$i$49 = HEAP32[$44 >> 2] | 0;
   if (($$0$i$i$1$i$i$49 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 31;
    break;
   } else if ($715) {
    $716 = $41;
    break;
   } else {
    $$lcssa321 = $714;
    $__trailing_sign$0$lcssa = $__trailing_sign$0;
    label = 232;
    break L21;
   }
  } while (0);
  if ((label | 0) == 31) {
   label = 0;
   if ($715) {
    $$lcssa321 = $714;
    $__trailing_sign$0$lcssa = $__trailing_sign$0;
    label = 232;
    break;
   } else $716 = 0;
  }
  L46 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 1:
   {
    if (($__p$0 | 0) == 3) {
     $717 = $714;
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $58 = HEAP32[$__b >> 2] | 0;
     $60 = HEAP32[$58 + 12 >> 2] | 0;
     if (($60 | 0) == (HEAP32[$58 + 16 >> 2] | 0)) $$0$i$i$55 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$58 >> 2] | 0) + 36 >> 2] & 127]($58) | 0; else $$0$i$i$55 = HEAP32[$60 >> 2] | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 127]($__ct, 8192, $$0$i$i$55) | 0)) {
      label = 44;
      break L21;
     }
     $73 = HEAP32[$__b >> 2] | 0;
     $74 = $73 + 12 | 0;
     $75 = HEAP32[$74 >> 2] | 0;
     if (($75 | 0) == (HEAP32[$73 + 16 >> 2] | 0)) $$0$i$i$57 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$73 >> 2] | 0) + 40 >> 2] & 127]($73) | 0; else {
      HEAP32[$74 >> 2] = $75 + 4;
      $$0$i$i$57 = HEAP32[$75 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $$0$i$i$57);
     $$pre$i$3$i$i$66 = $716;
     $101 = $716;
     label = 46;
    }
    break;
   }
  case 0:
   {
    if (($__p$0 | 0) == 3) {
     $717 = $714;
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $$pre$i$3$i$i$66 = $716;
     $101 = $716;
     label = 46;
    }
    break;
   }
  case 3:
   {
    $142 = HEAP8[$__psn >> 0] | 0;
    $148 = ($142 & 1) == 0 ? ($142 & 255) >>> 1 : HEAP32[$15 >> 2] | 0;
    $149 = HEAP8[$__nsn >> 0] | 0;
    $155 = ($149 & 1) == 0 ? ($149 & 255) >>> 1 : HEAP32[$16 >> 2] | 0;
    if (($148 | 0) == (0 - $155 | 0)) {
     $717 = $714;
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $158 = ($148 | 0) == 0;
     $160 = HEAP32[$__b >> 2] | 0;
     $162 = HEAP32[$160 + 12 >> 2] | 0;
     $164 = HEAP32[$160 + 16 >> 2] | 0;
     $165 = ($162 | 0) == ($164 | 0);
     if ($158 | ($155 | 0) == 0) {
      if ($165) $$0$i$i$97 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$160 >> 2] | 0) + 36 >> 2] & 127]($160) | 0; else $$0$i$i$97 = HEAP32[$162 >> 2] | 0;
      if ($158) {
       if (($$0$i$i$97 | 0) != (HEAP32[((HEAP8[$__nsn >> 0] & 1) == 0 ? $16 : HEAP32[$17 >> 2] | 0) >> 2] | 0)) {
        $717 = $714;
        $__trailing_sign$1 = $__trailing_sign$0;
        break L46;
       }
       $203 = HEAP32[$__b >> 2] | 0;
       $204 = $203 + 12 | 0;
       $205 = HEAP32[$204 >> 2] | 0;
       if (($205 | 0) == (HEAP32[$203 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$203 >> 2] | 0) + 40 >> 2] & 127]($203) | 0; else HEAP32[$204 >> 2] = $205 + 4;
       HEAP8[$__neg >> 0] = 1;
       $213 = HEAP8[$__nsn >> 0] | 0;
       $717 = $714;
       $__trailing_sign$1 = (($213 & 1) == 0 ? ($213 & 255) >>> 1 : HEAP32[$16 >> 2] | 0) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
       break L46;
      }
      if (($$0$i$i$97 | 0) != (HEAP32[((HEAP8[$__psn >> 0] & 1) == 0 ? $15 : HEAP32[$18 >> 2] | 0) >> 2] | 0)) {
       HEAP8[$__neg >> 0] = 1;
       $717 = $714;
       $__trailing_sign$1 = $__trailing_sign$0;
       break L46;
      }
      $178 = HEAP32[$__b >> 2] | 0;
      $179 = $178 + 12 | 0;
      $180 = HEAP32[$179 >> 2] | 0;
      if (($180 | 0) == (HEAP32[$178 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$178 >> 2] | 0) + 40 >> 2] & 127]($178) | 0; else HEAP32[$179 >> 2] = $180 + 4;
      $188 = HEAP8[$__psn >> 0] | 0;
      $717 = $714;
      $__trailing_sign$1 = (($188 & 1) == 0 ? ($188 & 255) >>> 1 : HEAP32[$15 >> 2] | 0) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L46;
     }
     if ($165) {
      $224 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$160 >> 2] | 0) + 36 >> 2] & 127]($160) | 0;
      $$pre240 = HEAP32[$__b >> 2] | 0;
      $$0$i$i$120 = $224;
      $227 = HEAP8[$__psn >> 0] | 0;
      $234 = $$pre240;
      $235 = HEAP32[$$pre240 + 12 >> 2] | 0;
      $237 = HEAP32[$$pre240 + 16 >> 2] | 0;
     } else {
      $$0$i$i$120 = HEAP32[$162 >> 2] | 0;
      $227 = $142;
      $234 = $160;
      $235 = $162;
      $237 = $164;
     }
     $233 = $234 + 12 | 0;
     $236 = ($235 | 0) == ($237 | 0);
     if (($$0$i$i$120 | 0) == (HEAP32[(($227 & 1) == 0 ? $15 : HEAP32[$18 >> 2] | 0) >> 2] | 0)) {
      if ($236) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$234 >> 2] | 0) + 40 >> 2] & 127]($234) | 0; else HEAP32[$233 >> 2] = $235 + 4;
      $242 = HEAP8[$__psn >> 0] | 0;
      $717 = $714;
      $__trailing_sign$1 = (($242 & 1) == 0 ? ($242 & 255) >>> 1 : HEAP32[$15 >> 2] | 0) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L46;
     }
     if ($236) $$0$i$i$126 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$234 >> 2] | 0) + 36 >> 2] & 127]($234) | 0; else $$0$i$i$126 = HEAP32[$235 >> 2] | 0;
     if (($$0$i$i$126 | 0) != (HEAP32[((HEAP8[$__nsn >> 0] & 1) == 0 ? $16 : HEAP32[$17 >> 2] | 0) >> 2] | 0)) {
      label = 102;
      break L21;
     }
     $262 = HEAP32[$__b >> 2] | 0;
     $263 = $262 + 12 | 0;
     $264 = HEAP32[$263 >> 2] | 0;
     if (($264 | 0) == (HEAP32[$262 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$262 >> 2] | 0) + 40 >> 2] & 127]($262) | 0; else HEAP32[$263 >> 2] = $264 + 4;
     HEAP8[$__neg >> 0] = 1;
     $272 = HEAP8[$__nsn >> 0] | 0;
     $717 = $714;
     $__trailing_sign$1 = (($272 & 1) == 0 ? ($272 & 255) >>> 1 : HEAP32[$16 >> 2] | 0) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
    }
    break;
   }
  case 2:
   {
    if (!($__p$0 >>> 0 < 2 | ($__trailing_sign$0 | 0) != 0)) if (!($20 | ($__p$0 | 0) == 2 & (HEAP8[$25 >> 0] | 0) != 0)) {
     $717 = $714;
     $__trailing_sign$1 = 0;
     break L46;
    }
    $288 = HEAP8[$__sym >> 0] | 0;
    $291 = HEAP32[$21 >> 2] | 0;
    $293 = ($288 & 1) == 0 ? $22 : $291;
    L107 : do if (!$__p$0) {
     $$pre$i$3$i$i$159 = $716;
     $348 = $288;
     $353 = $291;
     $357 = $293;
     $373 = $716;
    } else if ((HEAPU8[$__pat + ($__p$0 + -1) >> 0] | 0) < 2) {
     $299 = $288;
     $304 = $291;
     $308 = $293;
     while (1) {
      $300 = ($299 & 1) == 0;
      $309 = $308;
      if (($309 | 0) == (($300 ? $22 : $304) + (($300 ? ($299 & 255) >>> 1 : HEAP32[$22 >> 2] | 0) << 2) | 0)) {
       $319 = $299;
       $321 = $304;
       $325 = $308;
       break;
      }
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 127]($__ct, 8192, HEAP32[$309 >> 2] | 0) | 0)) {
       $$lcssa320 = $308;
       label = 109;
       break;
      }
      $299 = HEAP8[$__sym >> 0] | 0;
      $304 = HEAP32[$21 >> 2] | 0;
      $308 = $309 + 4 | 0;
     }
     if ((label | 0) == 109) {
      label = 0;
      $319 = HEAP8[$__sym >> 0] | 0;
      $321 = HEAP32[$21 >> 2] | 0;
      $325 = $$lcssa320;
     }
     $322 = ($319 & 1) == 0 ? $22 : $321;
     $323 = $322;
     $326 = $325 - $323 >> 2;
     $327 = HEAP8[$__spaces >> 0] | 0;
     $329 = ($327 & 1) == 0;
     $333 = $329 ? ($327 & 255) >>> 1 : HEAP32[$23 >> 2] | 0;
     if ($326 >>> 0 > $333 >>> 0) {
      $$pre$i$3$i$i$159 = $716;
      $348 = $319;
      $353 = $321;
      $357 = $323;
      $373 = $716;
     } else {
      $337 = ($329 ? $23 : HEAP32[$24 >> 2] | 0) + ($333 << 2) | 0;
      $$sink = $322;
      $340 = $337 + (0 - $326 << 2) | 0;
      while (1) {
       if (($340 | 0) == ($337 | 0)) {
        $$pre$i$3$i$i$159 = $716;
        $348 = $319;
        $353 = $321;
        $357 = $325;
        $373 = $716;
        break L107;
       }
       if ((HEAP32[$340 >> 2] | 0) != (HEAP32[$$sink >> 2] | 0)) {
        $$pre$i$3$i$i$159 = $716;
        $348 = $319;
        $353 = $321;
        $357 = $323;
        $373 = $716;
        break L107;
       }
       $$sink = $$sink + 4 | 0;
       $340 = $340 + 4 | 0;
      }
     }
    } else {
     $$pre$i$3$i$i$159 = $716;
     $348 = $288;
     $353 = $291;
     $357 = $293;
     $373 = $716;
    } while (0);
    L121 : while (1) {
     $349 = ($348 & 1) == 0;
     $356 = ($349 ? $22 : $353) + (($349 ? ($348 & 255) >>> 1 : HEAP32[$22 >> 2] | 0) << 2) | 0;
     $358 = $357;
     if (($358 | 0) == ($356 | 0)) {
      $$lcssa216 = $356;
      break;
     }
     $360 = HEAP32[$__b >> 2] | 0;
     do if (!$360) $386 = 1; else {
      $363 = HEAP32[$360 + 12 >> 2] | 0;
      if (($363 | 0) == (HEAP32[$360 + 16 >> 2] | 0)) $$0$i$i$i$i$151 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$360 >> 2] | 0) + 36 >> 2] & 127]($360) | 0; else $$0$i$i$i$i$151 = HEAP32[$363 >> 2] | 0;
      if (($$0$i$i$i$i$151 | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $386 = 1;
       break;
      } else {
       $386 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$373) {
      $$pre$i$3$i$i$159237 = $$pre$i$3$i$i$159;
      label = 130;
     } else {
      $376 = HEAP32[$373 + 12 >> 2] | 0;
      if (($376 | 0) == (HEAP32[$373 + 16 >> 2] | 0)) $$0$i$i$1$i$i$157 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$373 >> 2] | 0) + 36 >> 2] & 127]($373) | 0; else $$0$i$i$1$i$i$157 = HEAP32[$376 >> 2] | 0;
      if (($$0$i$i$1$i$i$157 | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       $$pre$i$3$i$i$159237 = 0;
       label = 130;
       break;
      } else if ($386 ^ ($$pre$i$3$i$i$159 | 0) == 0) {
       $$pre$i$3$i$i$159236 = $$pre$i$3$i$i$159;
       $719 = $$pre$i$3$i$i$159;
       break;
      } else {
       $$lcssa216 = $358;
       break L121;
      }
     } while (0);
     if ((label | 0) == 130) {
      label = 0;
      if ($386) {
       $$lcssa216 = $358;
       break;
      } else {
       $$pre$i$3$i$i$159236 = $$pre$i$3$i$i$159237;
       $719 = 0;
      }
     }
     $387 = HEAP32[$__b >> 2] | 0;
     $389 = HEAP32[$387 + 12 >> 2] | 0;
     if (($389 | 0) == (HEAP32[$387 + 16 >> 2] | 0)) $$0$i$i$148 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$387 >> 2] | 0) + 36 >> 2] & 127]($387) | 0; else $$0$i$i$148 = HEAP32[$389 >> 2] | 0;
     if (($$0$i$i$148 | 0) != (HEAP32[$358 >> 2] | 0)) {
      $$lcssa216 = $358;
      break;
     }
     $400 = HEAP32[$__b >> 2] | 0;
     $401 = $400 + 12 | 0;
     $402 = HEAP32[$401 >> 2] | 0;
     if (($402 | 0) == (HEAP32[$400 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$400 >> 2] | 0) + 40 >> 2] & 127]($400) | 0; else HEAP32[$401 >> 2] = $402 + 4;
     $$pre$i$3$i$i$159 = $$pre$i$3$i$i$159236;
     $348 = HEAP8[$__sym >> 0] | 0;
     $353 = HEAP32[$21 >> 2] | 0;
     $357 = $358 + 4 | 0;
     $373 = $719;
    }
    if ($20) {
     $412 = HEAP8[$__sym >> 0] | 0;
     $414 = ($412 & 1) == 0;
     if (($$lcssa216 | 0) == (($414 ? $22 : HEAP32[$21 >> 2] | 0) + (($414 ? ($412 & 255) >>> 1 : HEAP32[$22 >> 2] | 0) << 2) | 0)) {
      $717 = $714;
      $__trailing_sign$1 = $__trailing_sign$0;
     } else {
      label = 142;
      break L21;
     }
    } else {
     $717 = $714;
     $__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
  case 4:
   {
    $57 = HEAP32[$__ts >> 2] | 0;
    $$pre$i$3$i$i$141 = $716;
    $438 = $716;
    $484 = $714;
    $__ng$0 = 0;
    L158 : while (1) {
     $425 = HEAP32[$__b >> 2] | 0;
     do if (!$425) $451 = 1; else {
      $428 = HEAP32[$425 + 12 >> 2] | 0;
      if (($428 | 0) == (HEAP32[$425 + 16 >> 2] | 0)) $$0$i$i$i$i$133 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$425 >> 2] | 0) + 36 >> 2] & 127]($425) | 0; else $$0$i$i$i$i$133 = HEAP32[$428 >> 2] | 0;
      if (($$0$i$i$i$i$133 | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $451 = 1;
       break;
      } else {
       $451 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$438) {
      $$pre$i$3$i$i$141223 = $$pre$i$3$i$i$141;
      label = 156;
     } else {
      $441 = HEAP32[$438 + 12 >> 2] | 0;
      if (($441 | 0) == (HEAP32[$438 + 16 >> 2] | 0)) $$0$i$i$1$i$i$139 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$438 >> 2] | 0) + 36 >> 2] & 127]($438) | 0; else $$0$i$i$1$i$i$139 = HEAP32[$441 >> 2] | 0;
      if (($$0$i$i$1$i$i$139 | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       $$pre$i$3$i$i$141223 = 0;
       label = 156;
       break;
      } else if ($451 ^ ($$pre$i$3$i$i$141 | 0) == 0) {
       $$pre$i$3$i$i$141225 = $$pre$i$3$i$i$141;
       $720 = $$pre$i$3$i$i$141;
       break;
      } else {
       $$lcssa = $484;
       $$pre$i$3$i$i$113 = $$pre$i$3$i$i$141;
       $__ng$0$lcssa = $__ng$0;
       break L158;
      }
     } while (0);
     if ((label | 0) == 156) {
      label = 0;
      if ($451) {
       $$lcssa = $484;
       $$pre$i$3$i$i$113 = $$pre$i$3$i$i$141223;
       $__ng$0$lcssa = $__ng$0;
       break;
      } else {
       $$pre$i$3$i$i$141225 = $$pre$i$3$i$i$141223;
       $720 = 0;
      }
     }
     $452 = HEAP32[$__b >> 2] | 0;
     $454 = HEAP32[$452 + 12 >> 2] | 0;
     if (($454 | 0) == (HEAP32[$452 + 16 >> 2] | 0)) $$0$i$i$131 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$452 >> 2] | 0) + 36 >> 2] & 127]($452) | 0; else $$0$i$i$131 = HEAP32[$454 >> 2] | 0;
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 127]($__ct, 2048, $$0$i$i$131) | 0) {
      $467 = HEAP32[$__wn >> 2] | 0;
      if (($467 | 0) == (HEAP32[$0 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0);
       $471 = HEAP32[$__wn >> 2] | 0;
      } else $471 = $467;
      HEAP32[$__wn >> 2] = $471 + 4;
      HEAP32[$471 >> 2] = $$0$i$i$131;
      $721 = $484;
      $__ng$2$ph = $__ng$0 + 1 | 0;
     } else {
      $473 = HEAP8[$__grp >> 0] | 0;
      if (!(($$0$i$i$131 | 0) == ($57 | 0) & (($__ng$0 | 0) != 0 ? ((($473 & 1) == 0 ? ($473 & 255) >>> 1 : HEAP32[$26 >> 2] | 0) | 0) != 0 : 0))) {
       $$lcssa = $484;
       $$pre$i$3$i$i$113 = $$pre$i$3$i$i$141225;
       $__ng$0$lcssa = $__ng$0;
       break;
      }
      if (($484 | 0) == (HEAP32[$__ge >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
       $487 = HEAP32[$__gn >> 2] | 0;
      } else $487 = $484;
      $486 = $487 + 4 | 0;
      HEAP32[$__gn >> 2] = $486;
      HEAP32[$487 >> 2] = $__ng$0;
      $721 = $486;
      $__ng$2$ph = 0;
     }
     $488 = HEAP32[$__b >> 2] | 0;
     $489 = $488 + 12 | 0;
     $490 = HEAP32[$489 >> 2] | 0;
     if (($490 | 0) == (HEAP32[$488 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$488 >> 2] | 0) + 40 >> 2] & 127]($488) | 0;
      $$pre$i$3$i$i$141 = $$pre$i$3$i$i$141225;
      $438 = $720;
      $484 = $721;
      $__ng$0 = $__ng$2$ph;
      continue;
     } else {
      HEAP32[$489 >> 2] = $490 + 4;
      $$pre$i$3$i$i$141 = $$pre$i$3$i$i$141225;
      $438 = $720;
      $484 = $721;
      $__ng$0 = $__ng$2$ph;
      continue;
     }
    }
    if (($__ng$0$lcssa | 0) != 0 ? (HEAP32[$__gb >> 2] | 0) != ($$lcssa | 0) : 0) {
     if (($$lcssa | 0) == (HEAP32[$__ge >> 2] | 0)) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
      $504 = HEAP32[$__gn >> 2] | 0;
     } else $504 = $$lcssa;
     $503 = $504 + 4 | 0;
     HEAP32[$__gn >> 2] = $503;
     HEAP32[$504 >> 2] = $__ng$0$lcssa;
     $722 = $503;
    } else $722 = $$lcssa;
    $505 = HEAP32[$__fd >> 2] | 0;
    L207 : do if (($505 | 0) > 0) {
     $507 = HEAP32[$__b >> 2] | 0;
     do if (!$507) $723 = 1; else {
      $510 = HEAP32[$507 + 12 >> 2] | 0;
      if (($510 | 0) == (HEAP32[$507 + 16 >> 2] | 0)) $$0$i$i$i$i$105 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$507 >> 2] | 0) + 36 >> 2] & 127]($507) | 0; else $$0$i$i$i$i$105 = HEAP32[$510 >> 2] | 0;
      if (($$0$i$i$i$i$105 | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $723 = 1;
       break;
      } else {
       $723 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$$pre$i$3$i$i$113) label = 190; else {
      $522 = HEAP32[$$pre$i$3$i$i$113 + 12 >> 2] | 0;
      if (($522 | 0) == (HEAP32[$$pre$i$3$i$i$113 + 16 >> 2] | 0)) $$0$i$i$1$i$i$111 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$3$i$i$113 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$3$i$i$113) | 0; else $$0$i$i$1$i$i$111 = HEAP32[$522 >> 2] | 0;
      if (($$0$i$i$1$i$i$111 | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       label = 190;
       break;
      } else if ($723) {
       $724 = $$pre$i$3$i$i$113;
       break;
      } else {
       label = 196;
       break L21;
      }
     } while (0);
     if ((label | 0) == 190) {
      label = 0;
      if ($723) {
       label = 196;
       break L21;
      } else $724 = 0;
     }
     $532 = HEAP32[$__b >> 2] | 0;
     $534 = HEAP32[$532 + 12 >> 2] | 0;
     if (($534 | 0) == (HEAP32[$532 + 16 >> 2] | 0)) $$0$i$i$102 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$532 >> 2] | 0) + 36 >> 2] & 127]($532) | 0; else $$0$i$i$102 = HEAP32[$534 >> 2] | 0;
     if (($$0$i$i$102 | 0) != (HEAP32[$__dp >> 2] | 0)) {
      label = 196;
      break L21;
     }
     $547 = HEAP32[$__b >> 2] | 0;
     $548 = $547 + 12 | 0;
     $549 = HEAP32[$548 >> 2] | 0;
     if (($549 | 0) == (HEAP32[$547 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$547 >> 2] | 0) + 40 >> 2] & 127]($547) | 0;
      $$pre$i$3$i$i$91 = $724;
      $557 = $505;
      $572 = $724;
     } else {
      HEAP32[$548 >> 2] = $549 + 4;
      $$pre$i$3$i$i$91 = $724;
      $557 = $505;
      $572 = $724;
     }
     while (1) {
      if (($557 | 0) <= 0) break L207;
      $559 = HEAP32[$__b >> 2] | 0;
      do if (!$559) $585 = 1; else {
       $562 = HEAP32[$559 + 12 >> 2] | 0;
       if (($562 | 0) == (HEAP32[$559 + 16 >> 2] | 0)) $$0$i$i$i$i$83 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$559 >> 2] | 0) + 36 >> 2] & 127]($559) | 0; else $$0$i$i$i$i$83 = HEAP32[$562 >> 2] | 0;
       if (($$0$i$i$i$i$83 | 0) == -1) {
        HEAP32[$__b >> 2] = 0;
        $585 = 1;
        break;
       } else {
        $585 = (HEAP32[$__b >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!$572) {
       $$pre$i$3$i$i$91228$ph = $$pre$i$3$i$i$91;
       label = 214;
      } else {
       $575 = HEAP32[$572 + 12 >> 2] | 0;
       if (($575 | 0) == (HEAP32[$572 + 16 >> 2] | 0)) $$0$i$i$1$i$i$89 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$572 >> 2] | 0) + 36 >> 2] & 127]($572) | 0; else $$0$i$i$1$i$i$89 = HEAP32[$575 >> 2] | 0;
       if (($$0$i$i$1$i$i$89 | 0) == -1) {
        HEAP32[$__e >> 2] = 0;
        $$pre$i$3$i$i$91228$ph = 0;
        label = 214;
        break;
       } else if ($585 ^ ($$pre$i$3$i$i$91 | 0) == 0) {
        $$pre$i$3$i$i$91228249 = $$pre$i$3$i$i$91;
        $725 = $$pre$i$3$i$i$91;
        break;
       } else {
        label = 220;
        break L21;
       }
      } while (0);
      if ((label | 0) == 214) {
       label = 0;
       if ($585) {
        label = 220;
        break L21;
       } else {
        $$pre$i$3$i$i$91228249 = $$pre$i$3$i$i$91228$ph;
        $725 = 0;
       }
      }
      $586 = HEAP32[$__b >> 2] | 0;
      $588 = HEAP32[$586 + 12 >> 2] | 0;
      if (($588 | 0) == (HEAP32[$586 + 16 >> 2] | 0)) $$0$i$i$80 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$586 >> 2] | 0) + 36 >> 2] & 127]($586) | 0; else $$0$i$i$80 = HEAP32[$588 >> 2] | 0;
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 127]($__ct, 2048, $$0$i$i$80) | 0)) {
       label = 220;
       break L21;
      }
      if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$0 >> 2] | 0)) __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0);
      $606 = HEAP32[$__b >> 2] | 0;
      $608 = HEAP32[$606 + 12 >> 2] | 0;
      if (($608 | 0) == (HEAP32[$606 + 16 >> 2] | 0)) $$0$i$i$41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$606 >> 2] | 0) + 36 >> 2] & 127]($606) | 0; else $$0$i$i$41 = HEAP32[$608 >> 2] | 0;
      $617 = HEAP32[$__wn >> 2] | 0;
      HEAP32[$__wn >> 2] = $617 + 4;
      HEAP32[$617 >> 2] = $$0$i$i$41;
      $619 = $557 + -1 | 0;
      HEAP32[$__fd >> 2] = $619;
      $620 = HEAP32[$__b >> 2] | 0;
      $621 = $620 + 12 | 0;
      $622 = HEAP32[$621 >> 2] | 0;
      if (($622 | 0) == (HEAP32[$620 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$620 >> 2] | 0) + 40 >> 2] & 127]($620) | 0;
       $$pre$i$3$i$i$91 = $$pre$i$3$i$i$91228249;
       $557 = $619;
       $572 = $725;
       continue;
      } else {
       HEAP32[$621 >> 2] = $622 + 4;
       $$pre$i$3$i$i$91 = $$pre$i$3$i$i$91228249;
       $557 = $619;
       $572 = $725;
       continue;
      }
     }
    } while (0);
    if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
     label = 230;
     break L21;
    } else {
     $717 = $722;
     $__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
  default:
   {
    $717 = $714;
    $__trailing_sign$1 = $__trailing_sign$0;
   }
  } while (0);
  L280 : do if ((label | 0) == 46) while (1) {
   label = 0;
   $88 = HEAP32[$__b >> 2] | 0;
   do if (!$88) $114 = 1; else {
    $91 = HEAP32[$88 + 12 >> 2] | 0;
    if (($91 | 0) == (HEAP32[$88 + 16 >> 2] | 0)) $$0$i$i$i$i$58 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$88 >> 2] | 0) + 36 >> 2] & 127]($88) | 0; else $$0$i$i$i$i$58 = HEAP32[$91 >> 2] | 0;
    if (($$0$i$i$i$i$58 | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $114 = 1;
     break;
    } else {
     $114 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (!$101) {
    $$pre$i$3$i$i$66244 = $$pre$i$3$i$i$66;
    label = 59;
   } else {
    $104 = HEAP32[$101 + 12 >> 2] | 0;
    if (($104 | 0) == (HEAP32[$101 + 16 >> 2] | 0)) $$0$i$i$1$i$i$64 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$101 >> 2] | 0) + 36 >> 2] & 127]($101) | 0; else $$0$i$i$1$i$i$64 = HEAP32[$104 >> 2] | 0;
    if (($$0$i$i$1$i$i$64 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     $$pre$i$3$i$i$66244 = 0;
     label = 59;
     break;
    } else if ($114 ^ ($$pre$i$3$i$i$66 | 0) == 0) {
     $$pre$i$3$i$i$66246 = $$pre$i$3$i$i$66;
     $718 = $$pre$i$3$i$i$66;
     break;
    } else {
     $717 = $714;
     $__trailing_sign$1 = $__trailing_sign$0;
     break L280;
    }
   } while (0);
   if ((label | 0) == 59) {
    label = 0;
    if ($114) {
     $717 = $714;
     $__trailing_sign$1 = $__trailing_sign$0;
     break L280;
    } else {
     $$pre$i$3$i$i$66246 = $$pre$i$3$i$i$66244;
     $718 = 0;
    }
   }
   $115 = HEAP32[$__b >> 2] | 0;
   $117 = HEAP32[$115 + 12 >> 2] | 0;
   if (($117 | 0) == (HEAP32[$115 + 16 >> 2] | 0)) $$0$i$i$71 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$115 >> 2] | 0) + 36 >> 2] & 127]($115) | 0; else $$0$i$i$71 = HEAP32[$117 >> 2] | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 127]($__ct, 8192, $$0$i$i$71) | 0)) {
    $717 = $714;
    $__trailing_sign$1 = $__trailing_sign$0;
    break L280;
   }
   $130 = HEAP32[$__b >> 2] | 0;
   $131 = $130 + 12 | 0;
   $132 = HEAP32[$131 >> 2] | 0;
   if (($132 | 0) == (HEAP32[$130 + 16 >> 2] | 0)) $$0$i$i$75 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$130 >> 2] | 0) + 40 >> 2] & 127]($130) | 0; else {
    HEAP32[$131 >> 2] = $132 + 4;
    $$0$i$i$75 = HEAP32[$132 >> 2] | 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $$0$i$i$75);
   $$pre$i$3$i$i$66 = $$pre$i$3$i$i$66246;
   $101 = $718;
   label = 46;
  } while (0);
  $714 = $717;
  $__p$0 = $__p$0 + 1 | 0;
  $__trailing_sign$0 = $__trailing_sign$1;
 }
 L315 : do if ((label | 0) == 44) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 102) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 142) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 196) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 220) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 230) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 232) {
  L317 : do if ($__trailing_sign$0$lcssa) {
   $637 = $__trailing_sign$0$lcssa + 4 | 0;
   $638 = $__trailing_sign$0$lcssa + 8 | 0;
   $__i$0 = 1;
   L319 : while (1) {
    $639 = HEAP8[$__trailing_sign$0$lcssa >> 0] | 0;
    if (!($639 & 1)) $646 = ($639 & 255) >>> 1; else $646 = HEAP32[$637 >> 2] | 0;
    if ($__i$0 >>> 0 >= $646 >>> 0) break L317;
    $647 = HEAP32[$__b >> 2] | 0;
    do if (!$647) $726 = 1; else {
     $650 = HEAP32[$647 + 12 >> 2] | 0;
     if (($650 | 0) == (HEAP32[$647 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$647 >> 2] | 0) + 36 >> 2] & 127]($647) | 0; else $$0$i$i$i$i = HEAP32[$650 >> 2] | 0;
     if (($$0$i$i$i$i | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $726 = 1;
      break;
     } else {
      $726 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    $660 = HEAP32[$__e >> 2] | 0;
    do if (!$660) label = 251; else {
     $663 = HEAP32[$660 + 12 >> 2] | 0;
     if (($663 | 0) == (HEAP32[$660 + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$660 >> 2] | 0) + 36 >> 2] & 127]($660) | 0; else $$0$i$i$1$i$i = HEAP32[$663 >> 2] | 0;
     if (($$0$i$i$1$i$i | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      label = 251;
      break;
     } else if ($726) break; else break L319;
    } while (0);
    if ((label | 0) == 251) {
     label = 0;
     if ($726) break;
    }
    $673 = HEAP32[$__b >> 2] | 0;
    $675 = HEAP32[$673 + 12 >> 2] | 0;
    if (($675 | 0) == (HEAP32[$673 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$673 >> 2] | 0) + 36 >> 2] & 127]($673) | 0; else $$0$i$i = HEAP32[$675 >> 2] | 0;
    if (!(HEAP8[$__trailing_sign$0$lcssa >> 0] & 1)) $689 = $637; else $689 = HEAP32[$638 >> 2] | 0;
    if (($$0$i$i | 0) != (HEAP32[$689 + ($__i$0 << 2) >> 2] | 0)) break;
    $694 = $__i$0 + 1 | 0;
    $695 = HEAP32[$__b >> 2] | 0;
    $696 = $695 + 12 | 0;
    $697 = HEAP32[$696 >> 2] | 0;
    if (($697 | 0) == (HEAP32[$695 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$695 >> 2] | 0) + 40 >> 2] & 127]($695) | 0;
     $__i$0 = $694;
     continue;
    } else {
     HEAP32[$696 >> 2] = $697 + 4;
     $__i$0 = $694;
     continue;
    }
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$10 = 0;
   break L315;
  } while (0);
  $705 = HEAP32[$__gb >> 2] | 0;
  if (($705 | 0) == ($$lcssa321 | 0)) $$10 = 1; else {
   HEAP32[$__et >> 2] = 0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $705, $$lcssa321, $__et);
   if (!(HEAP32[$__et >> 2] | 0)) {
    $$10 = 1;
    break;
   } else {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    $$10 = 0;
    break;
   }
  }
 } while (0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $711 = HEAP32[$__gb >> 2] | 0;
 HEAP32[$__gb >> 2] = 0;
 if ($711) FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 255]($711);
 STACKTOP = sp;
 return $$10 | 0;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$0$i$i = 0, $$0$i$i$102 = 0, $$0$i$i$110 = 0, $$0$i$i$118 = 0, $$0$i$i$120 = 0, $$0$i$i$135 = 0, $$0$i$i$42 = 0, $$0$i$i$52 = 0, $$0$i$i$54 = 0, $$0$i$i$64 = 0, $$0$i$i$70 = 0, $$0$i$i$74 = 0, $$0$i$i$90 = 0, $$10 = 0, $$lcssa = 0, $$lcssa209 = 0, $$lcssa284 = 0, $$lcssa285 = 0, $$pre$i$2$i$i$128 = 0, $$pre$i$2$i$i$128216 = 0, $$pre$i$2$i$i$128218 = 0, $$pre$i$2$i$i$143 = 0, $$pre$i$2$i$i$143225 = 0, $$pre$i$2$i$i$143226 = 0, $$pre$i$2$i$i$60 = 0, $$pre$i$2$i$i$60233 = 0, $$pre$i$2$i$i$60235 = 0, $$pre$i$2$i$i$82 = 0, $$pre$i$2$i$i$82221$ph = 0, $$pre$i$2$i$i$82221238 = 0, $$pre$i$2$i$i$98 = 0, $$pre229 = 0, $$sink = 0, $0 = 0, $111 = 0, $112 = 0, $113 = 0, $126 = 0, $128 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $159 = 0, $16 = 0, $165 = 0, $166 = 0, $17 = 0, $172 = 0, $175 = 0, $177 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $189 = 0, $19 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $207 = 0, $21 = 0, $222 = 0, $223 = 0, $224 = 0, $23 = 0, $232 = 0, $24 = 0, $243 = 0, $248 = 0, $25 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $263 = 0, $27 = 0, $28 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $295 = 0, $30 = 0, $31 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $330 = 0, $338 = 0, $339 = 0, $341 = 0, $345 = 0, $349 = 0, $352 = 0, $360 = 0, $361 = 0, $365 = 0, $368 = 0, $369 = 0, $370 = 0, $372 = 0, $384 = 0, $385 = 0, $386 = 0, $399 = 0, $401 = 0, $414 = 0, $415 = 0, $416 = 0, $426 = 0, $428 = 0, $439 = 0, $45 = 0, $451 = 0, $452 = 0, $453 = 0, $46 = 0, $466 = 0, $468 = 0, $47 = 0, $478 = 0, $485 = 0, $489 = 0, $491 = 0, $502 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $521 = 0, $522 = 0, $523 = 0, $525 = 0, $537 = 0, $538 = 0, $550 = 0, $552 = 0, $567 = 0, $568 = 0, $569 = 0, $577 = 0, $579 = 0, $591 = 0, $592 = 0, $593 = 0, $606 = 0, $608 = 0, $62 = 0, $63 = 0, $630 = 0, $632 = 0, $643 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $65 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $673 = 0, $674 = 0, $686 = 0, $687 = 0, $688 = 0, $700 = 0, $702 = 0, $718 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $734 = 0, $740 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $750 = 0, $751 = 0, $752 = 0, $82 = 0, $83 = 0, $84 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i$29 = 0, $__i$0$i$i$32 = 0, $__i$0$i$i$35 = 0, $__i$0$i$i$38 = 0, $__ng$0 = 0, $__ng$0$lcssa = 0, $__ng$2$ph = 0, $__nsn = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0 = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$1 = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $0 = sp + 88 | 0;
 $__gbuf = sp + 96 | 0;
 $__gb = sp + 80 | 0;
 $__gn = sp + 72 | 0;
 $__ge = sp + 68 | 0;
 $__pat = sp + 500 | 0;
 $__dp = sp + 497 | 0;
 $__ts = sp + 496 | 0;
 $__grp = sp + 56 | 0;
 $__sym = sp + 44 | 0;
 $__psn = sp + 32 | 0;
 $__nsn = sp + 20 | 0;
 $__spaces = sp + 8 | 0;
 $__fd = sp + 4 | 0;
 $__et = sp;
 HEAP32[$0 >> 2] = $__we;
 HEAP32[$__gb >> 2] = $__gbuf;
 $2 = $__gb + 4 | 0;
 HEAP32[$2 >> 2] = 147;
 HEAP32[$__gn >> 2] = $__gbuf;
 HEAP32[$__ge >> 2] = $__gbuf + 400;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i$29 = 0;
 while (1) {
  if (($__i$0$i$i$29 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i$29 << 2) >> 2] = 0;
  $__i$0$i$i$29 = $__i$0$i$i$29 + 1 | 0;
 }
 $__i$0$i$i$32 = 0;
 while (1) {
  if (($__i$0$i$i$32 | 0) == 3) break;
  HEAP32[$__psn + ($__i$0$i$i$32 << 2) >> 2] = 0;
  $__i$0$i$i$32 = $__i$0$i$i$32 + 1 | 0;
 }
 $__i$0$i$i$35 = 0;
 while (1) {
  if (($__i$0$i$i$35 | 0) == 3) break;
  HEAP32[$__nsn + ($__i$0$i$i$35 << 2) >> 2] = 0;
  $__i$0$i$i$35 = $__i$0$i$i$35 + 1 | 0;
 }
 $__i$0$i$i$38 = 0;
 while (1) {
  if (($__i$0$i$i$38 | 0) == 3) break;
  HEAP32[$__spaces + ($__i$0$i$i$38 << 2) >> 2] = 0;
  $__i$0$i$i$38 = $__i$0$i$i$38 + 1 | 0;
 }
 __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd);
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2];
 $15 = $__ct + 8 | 0;
 $16 = $__psn + 4 | 0;
 $17 = $__nsn + 4 | 0;
 $18 = $__nsn + 8 | 0;
 $19 = $__nsn + 1 | 0;
 $20 = $__psn + 8 | 0;
 $21 = $__psn + 1 | 0;
 $23 = ($__flags & 512 | 0) != 0;
 $24 = $__sym + 8 | 0;
 $25 = $__sym + 1 | 0;
 $26 = $__sym + 4 | 0;
 $27 = $__spaces + 4 | 0;
 $28 = $__spaces + 8 | 0;
 $29 = $__spaces + 1 | 0;
 $30 = $__pat + 3 | 0;
 $31 = $__grp + 4 | 0;
 $743 = $__gbuf;
 $__p$0 = 0;
 $__trailing_sign$0 = 0;
 L21 : while (1) {
  if ($__p$0 >>> 0 >= 4) {
   $$lcssa285 = $743;
   $__trailing_sign$0$lcssa = $__trailing_sign$0;
   label = 218;
   break;
  }
  $33 = HEAP32[$__b >> 2] | 0;
  do if (!$33) $45 = 0; else if ((HEAP32[$33 + 12 >> 2] | 0) == (HEAP32[$33 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] & 127]($33) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $45 = 0;
   break;
  } else {
   $45 = HEAP32[$__b >> 2] | 0;
   break;
  } else $45 = $33; while (0);
  $46 = ($45 | 0) == 0;
  $47 = HEAP32[$__e >> 2] | 0;
  do if (!$47) label = 28; else {
   if ((HEAP32[$47 + 12 >> 2] | 0) != (HEAP32[$47 + 16 >> 2] | 0)) if ($46) {
    $744 = $47;
    break;
   } else {
    $$lcssa285 = $743;
    $__trailing_sign$0$lcssa = $__trailing_sign$0;
    label = 218;
    break L21;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$47 >> 2] | 0) + 36 >> 2] & 127]($47) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 28;
    break;
   } else if ($46) {
    $744 = $47;
    break;
   } else {
    $$lcssa285 = $743;
    $__trailing_sign$0$lcssa = $__trailing_sign$0;
    label = 218;
    break L21;
   }
  } while (0);
  if ((label | 0) == 28) {
   label = 0;
   if ($46) {
    $$lcssa285 = $743;
    $__trailing_sign$0$lcssa = $__trailing_sign$0;
    label = 218;
    break;
   } else $744 = 0;
  }
  L42 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 1:
   {
    if (($__p$0 | 0) == 3) {
     $745 = $743;
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $63 = HEAP32[$__b >> 2] | 0;
     $65 = HEAP32[$63 + 12 >> 2] | 0;
     if (($65 | 0) == (HEAP32[$63 + 16 >> 2] | 0)) $$0$i$i$52 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$63 >> 2] | 0) + 36 >> 2] & 127]($63) | 0; else $$0$i$i$52 = HEAPU8[$65 >> 0] | 0;
     if (($$0$i$i$52 & 255) << 24 >> 24 <= -1) {
      label = 42;
      break L21;
     }
     if (!(HEAP16[(HEAP32[$15 >> 2] | 0) + ($$0$i$i$52 << 24 >> 24 << 1) >> 1] & 8192)) {
      label = 42;
      break L21;
     }
     $82 = HEAP32[$__b >> 2] | 0;
     $83 = $82 + 12 | 0;
     $84 = HEAP32[$83 >> 2] | 0;
     if (($84 | 0) == (HEAP32[$82 + 16 >> 2] | 0)) $$0$i$i$54 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$82 >> 2] | 0) + 40 >> 2] & 127]($82) | 0; else {
      HEAP32[$83 >> 2] = $84 + 1;
      $$0$i$i$54 = HEAPU8[$84 >> 0] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $$0$i$i$54 & 255);
     $$pre$i$2$i$i$60 = $744;
     $113 = $744;
     label = 44;
    }
    break;
   }
  case 0:
   {
    if (($__p$0 | 0) == 3) {
     $745 = $743;
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $$pre$i$2$i$i$60 = $744;
     $113 = $744;
     label = 44;
    }
    break;
   }
  case 3:
   {
    $159 = HEAP8[$__psn >> 0] | 0;
    $165 = ($159 & 1) == 0 ? ($159 & 255) >>> 1 : HEAP32[$16 >> 2] | 0;
    $166 = HEAP8[$__nsn >> 0] | 0;
    $172 = ($166 & 1) == 0 ? ($166 & 255) >>> 1 : HEAP32[$17 >> 2] | 0;
    if (($165 | 0) == (0 - $172 | 0)) {
     $745 = $743;
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $175 = ($165 | 0) == 0;
     $177 = HEAP32[$__b >> 2] | 0;
     $179 = HEAP32[$177 + 12 >> 2] | 0;
     $181 = HEAP32[$177 + 16 >> 2] | 0;
     $182 = ($179 | 0) == ($181 | 0);
     if ($175 | ($172 | 0) == 0) {
      if ($182) $$0$i$i$102 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$177 >> 2] | 0) + 36 >> 2] & 127]($177) | 0; else $$0$i$i$102 = HEAPU8[$179 >> 0] | 0;
      $189 = $$0$i$i$102 & 255;
      if ($175) {
       if ($189 << 24 >> 24 != (HEAP8[((HEAP8[$__nsn >> 0] & 1) == 0 ? $19 : HEAP32[$18 >> 2] | 0) >> 0] | 0)) {
        $745 = $743;
        $__trailing_sign$1 = $__trailing_sign$0;
        break L42;
       }
       $222 = HEAP32[$__b >> 2] | 0;
       $223 = $222 + 12 | 0;
       $224 = HEAP32[$223 >> 2] | 0;
       if (($224 | 0) == (HEAP32[$222 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$222 >> 2] | 0) + 40 >> 2] & 127]($222) | 0; else HEAP32[$223 >> 2] = $224 + 1;
       HEAP8[$__neg >> 0] = 1;
       $232 = HEAP8[$__nsn >> 0] | 0;
       $745 = $743;
       $__trailing_sign$1 = (($232 & 1) == 0 ? ($232 & 255) >>> 1 : HEAP32[$17 >> 2] | 0) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
       break L42;
      }
      if ($189 << 24 >> 24 != (HEAP8[((HEAP8[$__psn >> 0] & 1) == 0 ? $21 : HEAP32[$20 >> 2] | 0) >> 0] | 0)) {
       HEAP8[$__neg >> 0] = 1;
       $745 = $743;
       $__trailing_sign$1 = $__trailing_sign$0;
       break L42;
      }
      $197 = HEAP32[$__b >> 2] | 0;
      $198 = $197 + 12 | 0;
      $199 = HEAP32[$198 >> 2] | 0;
      if (($199 | 0) == (HEAP32[$197 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$197 >> 2] | 0) + 40 >> 2] & 127]($197) | 0; else HEAP32[$198 >> 2] = $199 + 1;
      $207 = HEAP8[$__psn >> 0] | 0;
      $745 = $743;
      $__trailing_sign$1 = (($207 & 1) == 0 ? ($207 & 255) >>> 1 : HEAP32[$16 >> 2] | 0) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L42;
     }
     if ($182) {
      $243 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$177 >> 2] | 0) + 36 >> 2] & 127]($177) | 0;
      $$pre229 = HEAP32[$__b >> 2] | 0;
      $$0$i$i$110 = $243;
      $248 = HEAP8[$__psn >> 0] | 0;
      $255 = $$pre229;
      $256 = HEAP32[$$pre229 + 12 >> 2] | 0;
      $258 = HEAP32[$$pre229 + 16 >> 2] | 0;
     } else {
      $$0$i$i$110 = HEAPU8[$179 >> 0] | 0;
      $248 = $159;
      $255 = $177;
      $256 = $179;
      $258 = $181;
     }
     $254 = $255 + 12 | 0;
     $257 = ($256 | 0) == ($258 | 0);
     if (($$0$i$i$110 & 255) << 24 >> 24 == (HEAP8[(($248 & 1) == 0 ? $21 : HEAP32[$20 >> 2] | 0) >> 0] | 0)) {
      if ($257) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$255 >> 2] | 0) + 40 >> 2] & 127]($255) | 0; else HEAP32[$254 >> 2] = $256 + 1;
      $263 = HEAP8[$__psn >> 0] | 0;
      $745 = $743;
      $__trailing_sign$1 = (($263 & 1) == 0 ? ($263 & 255) >>> 1 : HEAP32[$16 >> 2] | 0) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L42;
     }
     if ($257) $$0$i$i$120 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$255 >> 2] | 0) + 36 >> 2] & 127]($255) | 0; else $$0$i$i$120 = HEAPU8[$256 >> 0] | 0;
     if (($$0$i$i$120 & 255) << 24 >> 24 != (HEAP8[((HEAP8[$__nsn >> 0] & 1) == 0 ? $19 : HEAP32[$18 >> 2] | 0) >> 0] | 0)) {
      label = 98;
      break L21;
     }
     $285 = HEAP32[$__b >> 2] | 0;
     $286 = $285 + 12 | 0;
     $287 = HEAP32[$286 >> 2] | 0;
     if (($287 | 0) == (HEAP32[$285 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$285 >> 2] | 0) + 40 >> 2] & 127]($285) | 0; else HEAP32[$286 >> 2] = $287 + 1;
     HEAP8[$__neg >> 0] = 1;
     $295 = HEAP8[$__nsn >> 0] | 0;
     $745 = $743;
     $__trailing_sign$1 = (($295 & 1) == 0 ? ($295 & 255) >>> 1 : HEAP32[$17 >> 2] | 0) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
    }
    break;
   }
  case 2:
   {
    if (!($__p$0 >>> 0 < 2 | ($__trailing_sign$0 | 0) != 0)) if (!($23 | ($__p$0 | 0) == 2 & (HEAP8[$30 >> 0] | 0) != 0)) {
     $745 = $743;
     $__trailing_sign$1 = 0;
     break L42;
    }
    $311 = HEAP8[$__sym >> 0] | 0;
    $313 = ($311 & 1) == 0;
    $314 = HEAP32[$24 >> 2] | 0;
    $315 = $313 ? $25 : $314;
    $316 = $315;
    L104 : do if (!$__p$0) {
     $$pre$i$2$i$i$143 = $744;
     $360 = $311;
     $365 = $314;
     $369 = $316;
     $386 = $744;
    } else if ((HEAPU8[$__pat + ($__p$0 + -1) >> 0] | 0) < 2) {
     $325 = $315 + ($313 ? ($311 & 255) >>> 1 : HEAP32[$26 >> 2] | 0) | 0;
     $326 = HEAP32[$15 >> 2] | 0;
     $327 = $316;
     while (1) {
      $328 = $327;
      if (($328 | 0) == ($325 | 0)) {
       $$lcssa284 = $327;
       break;
      }
      $330 = HEAP8[$328 >> 0] | 0;
      if ($330 << 24 >> 24 <= -1) {
       $$lcssa284 = $327;
       break;
      }
      if (!(HEAP16[$326 + ($330 << 24 >> 24 << 1) >> 1] & 8192)) {
       $$lcssa284 = $327;
       break;
      }
      $327 = $328 + 1 | 0;
     }
     $338 = $$lcssa284 - $316 | 0;
     $339 = HEAP8[$__spaces >> 0] | 0;
     $341 = ($339 & 1) == 0;
     $345 = $341 ? ($339 & 255) >>> 1 : HEAP32[$27 >> 2] | 0;
     if ($338 >>> 0 > $345 >>> 0) {
      $$pre$i$2$i$i$143 = $744;
      $360 = $311;
      $365 = $314;
      $369 = $316;
      $386 = $744;
     } else {
      $349 = ($341 ? $29 : HEAP32[$28 >> 2] | 0) + $345 | 0;
      $$sink = $315;
      $352 = $349 + (0 - $338) | 0;
      while (1) {
       if (($352 | 0) == ($349 | 0)) {
        $$pre$i$2$i$i$143 = $744;
        $360 = $311;
        $365 = $314;
        $369 = $$lcssa284;
        $386 = $744;
        break L104;
       }
       if ((HEAP8[$352 >> 0] | 0) != (HEAP8[$$sink >> 0] | 0)) {
        $$pre$i$2$i$i$143 = $744;
        $360 = $311;
        $365 = $314;
        $369 = $316;
        $386 = $744;
        break L104;
       }
       $$sink = $$sink + 1 | 0;
       $352 = $352 + 1 | 0;
      }
     }
    } else {
     $$pre$i$2$i$i$143 = $744;
     $360 = $311;
     $365 = $314;
     $369 = $316;
     $386 = $744;
    } while (0);
    L118 : while (1) {
     $361 = ($360 & 1) == 0;
     $368 = ($361 ? $25 : $365) + ($361 ? ($360 & 255) >>> 1 : HEAP32[$26 >> 2] | 0) | 0;
     $370 = $369;
     if (($370 | 0) == ($368 | 0)) {
      $$lcssa209 = $368;
      break;
     }
     $372 = HEAP32[$__b >> 2] | 0;
     do if (!$372) $384 = 0; else if ((HEAP32[$372 + 12 >> 2] | 0) == (HEAP32[$372 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$372 >> 2] | 0) + 36 >> 2] & 127]($372) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $384 = 0;
      break;
     } else {
      $384 = HEAP32[$__b >> 2] | 0;
      break;
     } else $384 = $372; while (0);
     $385 = ($384 | 0) == 0;
     do if (!$386) {
      $$pre$i$2$i$i$143226 = $$pre$i$2$i$i$143;
      label = 124;
     } else {
      if ((HEAP32[$386 + 12 >> 2] | 0) != (HEAP32[$386 + 16 >> 2] | 0)) if ($385) {
       $$pre$i$2$i$i$143225 = $$pre$i$2$i$i$143;
       $747 = $386;
       break;
      } else {
       $$lcssa209 = $370;
       break L118;
      }
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$386 >> 2] | 0) + 36 >> 2] & 127]($386) | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       $$pre$i$2$i$i$143226 = 0;
       label = 124;
       break;
      } else if ($385 ^ ($$pre$i$2$i$i$143 | 0) == 0) {
       $$pre$i$2$i$i$143225 = $$pre$i$2$i$i$143;
       $747 = $$pre$i$2$i$i$143;
       break;
      } else {
       $$lcssa209 = $370;
       break L118;
      }
     } while (0);
     if ((label | 0) == 124) {
      label = 0;
      if ($385) {
       $$lcssa209 = $370;
       break;
      } else {
       $$pre$i$2$i$i$143225 = $$pre$i$2$i$i$143226;
       $747 = 0;
      }
     }
     $399 = HEAP32[$__b >> 2] | 0;
     $401 = HEAP32[$399 + 12 >> 2] | 0;
     if (($401 | 0) == (HEAP32[$399 + 16 >> 2] | 0)) $$0$i$i$135 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$399 >> 2] | 0) + 36 >> 2] & 127]($399) | 0; else $$0$i$i$135 = HEAPU8[$401 >> 0] | 0;
     if (($$0$i$i$135 & 255) << 24 >> 24 != (HEAP8[$370 >> 0] | 0)) {
      $$lcssa209 = $370;
      break;
     }
     $414 = HEAP32[$__b >> 2] | 0;
     $415 = $414 + 12 | 0;
     $416 = HEAP32[$415 >> 2] | 0;
     if (($416 | 0) == (HEAP32[$414 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$414 >> 2] | 0) + 40 >> 2] & 127]($414) | 0; else HEAP32[$415 >> 2] = $416 + 1;
     $$pre$i$2$i$i$143 = $$pre$i$2$i$i$143225;
     $360 = HEAP8[$__sym >> 0] | 0;
     $365 = HEAP32[$24 >> 2] | 0;
     $369 = $370 + 1 | 0;
     $386 = $747;
    }
    if ($23) {
     $426 = HEAP8[$__sym >> 0] | 0;
     $428 = ($426 & 1) == 0;
     if (($$lcssa209 | 0) == (($428 ? $25 : HEAP32[$24 >> 2] | 0) + ($428 ? ($426 & 255) >>> 1 : HEAP32[$26 >> 2] | 0) | 0)) {
      $745 = $743;
      $__trailing_sign$1 = $__trailing_sign$0;
     } else {
      label = 136;
      break L21;
     }
    } else {
     $745 = $743;
     $__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
  case 4:
   {
    $62 = HEAP8[$__ts >> 0] | 0;
    $$pre$i$2$i$i$128 = $744;
    $453 = $744;
    $502 = $743;
    $__ng$0 = 0;
    L151 : while (1) {
     $439 = HEAP32[$__b >> 2] | 0;
     do if (!$439) $451 = 0; else if ((HEAP32[$439 + 12 >> 2] | 0) == (HEAP32[$439 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$439 >> 2] | 0) + 36 >> 2] & 127]($439) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $451 = 0;
      break;
     } else {
      $451 = HEAP32[$__b >> 2] | 0;
      break;
     } else $451 = $439; while (0);
     $452 = ($451 | 0) == 0;
     do if (!$453) {
      $$pre$i$2$i$i$128216 = $$pre$i$2$i$i$128;
      label = 147;
     } else {
      if ((HEAP32[$453 + 12 >> 2] | 0) != (HEAP32[$453 + 16 >> 2] | 0)) if ($452) {
       $$pre$i$2$i$i$128218 = $$pre$i$2$i$i$128;
       $748 = $453;
       break;
      } else {
       $$lcssa = $502;
       $$pre$i$2$i$i$98 = $$pre$i$2$i$i$128;
       $__ng$0$lcssa = $__ng$0;
       break L151;
      }
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$453 >> 2] | 0) + 36 >> 2] & 127]($453) | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       $$pre$i$2$i$i$128216 = 0;
       label = 147;
       break;
      } else if ($452 ^ ($$pre$i$2$i$i$128 | 0) == 0) {
       $$pre$i$2$i$i$128218 = $$pre$i$2$i$i$128;
       $748 = $$pre$i$2$i$i$128;
       break;
      } else {
       $$lcssa = $502;
       $$pre$i$2$i$i$98 = $$pre$i$2$i$i$128;
       $__ng$0$lcssa = $__ng$0;
       break L151;
      }
     } while (0);
     if ((label | 0) == 147) {
      label = 0;
      if ($452) {
       $$lcssa = $502;
       $$pre$i$2$i$i$98 = $$pre$i$2$i$i$128216;
       $__ng$0$lcssa = $__ng$0;
       break;
      } else {
       $$pre$i$2$i$i$128218 = $$pre$i$2$i$i$128216;
       $748 = 0;
      }
     }
     $466 = HEAP32[$__b >> 2] | 0;
     $468 = HEAP32[$466 + 12 >> 2] | 0;
     if (($468 | 0) == (HEAP32[$466 + 16 >> 2] | 0)) $$0$i$i$118 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$466 >> 2] | 0) + 36 >> 2] & 127]($466) | 0; else $$0$i$i$118 = HEAPU8[$468 >> 0] | 0;
     $478 = $$0$i$i$118 & 255;
     if ($478 << 24 >> 24 > -1) if (!(HEAP16[(HEAP32[$15 >> 2] | 0) + ($$0$i$i$118 << 24 >> 24 << 1) >> 1] & 2048)) label = 157; else {
      $485 = HEAP32[$__wn >> 2] | 0;
      if (($485 | 0) == (HEAP32[$0 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0);
       $489 = HEAP32[$__wn >> 2] | 0;
      } else $489 = $485;
      HEAP32[$__wn >> 2] = $489 + 1;
      HEAP8[$489 >> 0] = $478;
      $749 = $502;
      $__ng$2$ph = $__ng$0 + 1 | 0;
     } else label = 157;
     if ((label | 0) == 157) {
      label = 0;
      $491 = HEAP8[$__grp >> 0] | 0;
      if (!($478 << 24 >> 24 == $62 << 24 >> 24 & (($__ng$0 | 0) != 0 ? ((($491 & 1) == 0 ? ($491 & 255) >>> 1 : HEAP32[$31 >> 2] | 0) | 0) != 0 : 0))) {
       $$lcssa = $502;
       $$pre$i$2$i$i$98 = $$pre$i$2$i$i$128218;
       $__ng$0$lcssa = $__ng$0;
       break;
      }
      if (($502 | 0) == (HEAP32[$__ge >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
       $505 = HEAP32[$__gn >> 2] | 0;
      } else $505 = $502;
      $504 = $505 + 4 | 0;
      HEAP32[$__gn >> 2] = $504;
      HEAP32[$505 >> 2] = $__ng$0;
      $749 = $504;
      $__ng$2$ph = 0;
     }
     $506 = HEAP32[$__b >> 2] | 0;
     $507 = $506 + 12 | 0;
     $508 = HEAP32[$507 >> 2] | 0;
     if (($508 | 0) == (HEAP32[$506 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$506 >> 2] | 0) + 40 >> 2] & 127]($506) | 0;
      $$pre$i$2$i$i$128 = $$pre$i$2$i$i$128218;
      $453 = $748;
      $502 = $749;
      $__ng$0 = $__ng$2$ph;
      continue;
     } else {
      HEAP32[$507 >> 2] = $508 + 1;
      $$pre$i$2$i$i$128 = $$pre$i$2$i$i$128218;
      $453 = $748;
      $502 = $749;
      $__ng$0 = $__ng$2$ph;
      continue;
     }
    }
    if (($__ng$0$lcssa | 0) != 0 ? (HEAP32[$__gb >> 2] | 0) != ($$lcssa | 0) : 0) {
     if (($$lcssa | 0) == (HEAP32[$__ge >> 2] | 0)) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
      $522 = HEAP32[$__gn >> 2] | 0;
     } else $522 = $$lcssa;
     $521 = $522 + 4 | 0;
     HEAP32[$__gn >> 2] = $521;
     HEAP32[$522 >> 2] = $__ng$0$lcssa;
     $750 = $521;
    } else $750 = $$lcssa;
    $523 = HEAP32[$__fd >> 2] | 0;
    L198 : do if (($523 | 0) > 0) {
     $525 = HEAP32[$__b >> 2] | 0;
     do if (!$525) $537 = 0; else if ((HEAP32[$525 + 12 >> 2] | 0) == (HEAP32[$525 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$525 >> 2] | 0) + 36 >> 2] & 127]($525) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $537 = 0;
      break;
     } else {
      $537 = HEAP32[$__b >> 2] | 0;
      break;
     } else $537 = $525; while (0);
     $538 = ($537 | 0) == 0;
     do if (!$$pre$i$2$i$i$98) label = 179; else {
      if ((HEAP32[$$pre$i$2$i$i$98 + 12 >> 2] | 0) == (HEAP32[$$pre$i$2$i$i$98 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$2$i$i$98 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$2$i$i$98) | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       label = 179;
       break;
      }
      if ($538) $751 = $$pre$i$2$i$i$98; else {
       label = 184;
       break L21;
      }
     } while (0);
     if ((label | 0) == 179) {
      label = 0;
      if ($538) {
       label = 184;
       break L21;
      } else $751 = 0;
     }
     $550 = HEAP32[$__b >> 2] | 0;
     $552 = HEAP32[$550 + 12 >> 2] | 0;
     if (($552 | 0) == (HEAP32[$550 + 16 >> 2] | 0)) $$0$i$i$90 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$550 >> 2] | 0) + 36 >> 2] & 127]($550) | 0; else $$0$i$i$90 = HEAPU8[$552 >> 0] | 0;
     if (($$0$i$i$90 & 255) << 24 >> 24 != (HEAP8[$__dp >> 0] | 0)) {
      label = 184;
      break L21;
     }
     $567 = HEAP32[$__b >> 2] | 0;
     $568 = $567 + 12 | 0;
     $569 = HEAP32[$568 >> 2] | 0;
     if (($569 | 0) == (HEAP32[$567 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$567 >> 2] | 0) + 40 >> 2] & 127]($567) | 0;
      $$pre$i$2$i$i$82 = $751;
      $577 = $523;
      $593 = $751;
     } else {
      HEAP32[$568 >> 2] = $569 + 1;
      $$pre$i$2$i$i$82 = $751;
      $577 = $523;
      $593 = $751;
     }
     while (1) {
      if (($577 | 0) <= 0) break L198;
      $579 = HEAP32[$__b >> 2] | 0;
      do if (!$579) $591 = 0; else if ((HEAP32[$579 + 12 >> 2] | 0) == (HEAP32[$579 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$579 >> 2] | 0) + 36 >> 2] & 127]($579) | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $591 = 0;
       break;
      } else {
       $591 = HEAP32[$__b >> 2] | 0;
       break;
      } else $591 = $579; while (0);
      $592 = ($591 | 0) == 0;
      do if (!$593) {
       $$pre$i$2$i$i$82221$ph = $$pre$i$2$i$i$82;
       label = 199;
      } else {
       if ((HEAP32[$593 + 12 >> 2] | 0) != (HEAP32[$593 + 16 >> 2] | 0)) if ($592) {
        $$pre$i$2$i$i$82221238 = $$pre$i$2$i$i$82;
        $752 = $593;
        break;
       } else {
        label = 206;
        break L21;
       }
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$593 >> 2] | 0) + 36 >> 2] & 127]($593) | 0) == -1) {
        HEAP32[$__e >> 2] = 0;
        $$pre$i$2$i$i$82221$ph = 0;
        label = 199;
        break;
       } else if ($592 ^ ($$pre$i$2$i$i$82 | 0) == 0) {
        $$pre$i$2$i$i$82221238 = $$pre$i$2$i$i$82;
        $752 = $$pre$i$2$i$i$82;
        break;
       } else {
        label = 206;
        break L21;
       }
      } while (0);
      if ((label | 0) == 199) {
       label = 0;
       if ($592) {
        label = 206;
        break L21;
       } else {
        $$pre$i$2$i$i$82221238 = $$pre$i$2$i$i$82221$ph;
        $752 = 0;
       }
      }
      $606 = HEAP32[$__b >> 2] | 0;
      $608 = HEAP32[$606 + 12 >> 2] | 0;
      if (($608 | 0) == (HEAP32[$606 + 16 >> 2] | 0)) $$0$i$i$74 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$606 >> 2] | 0) + 36 >> 2] & 127]($606) | 0; else $$0$i$i$74 = HEAPU8[$608 >> 0] | 0;
      if (($$0$i$i$74 & 255) << 24 >> 24 <= -1) {
       label = 206;
       break L21;
      }
      if (!(HEAP16[(HEAP32[$15 >> 2] | 0) + ($$0$i$i$74 << 24 >> 24 << 1) >> 1] & 2048)) {
       label = 206;
       break L21;
      }
      if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$0 >> 2] | 0)) __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0);
      $630 = HEAP32[$__b >> 2] | 0;
      $632 = HEAP32[$630 + 12 >> 2] | 0;
      if (($632 | 0) == (HEAP32[$630 + 16 >> 2] | 0)) $$0$i$i$42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$630 >> 2] | 0) + 36 >> 2] & 127]($630) | 0; else $$0$i$i$42 = HEAPU8[$632 >> 0] | 0;
      $643 = HEAP32[$__wn >> 2] | 0;
      HEAP32[$__wn >> 2] = $643 + 1;
      HEAP8[$643 >> 0] = $$0$i$i$42;
      $645 = $577 + -1 | 0;
      HEAP32[$__fd >> 2] = $645;
      $646 = HEAP32[$__b >> 2] | 0;
      $647 = $646 + 12 | 0;
      $648 = HEAP32[$647 >> 2] | 0;
      if (($648 | 0) == (HEAP32[$646 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$646 >> 2] | 0) + 40 >> 2] & 127]($646) | 0;
       $$pre$i$2$i$i$82 = $$pre$i$2$i$i$82221238;
       $577 = $645;
       $593 = $752;
       continue;
      } else {
       HEAP32[$647 >> 2] = $648 + 1;
       $$pre$i$2$i$i$82 = $$pre$i$2$i$i$82221238;
       $577 = $645;
       $593 = $752;
       continue;
      }
     }
    } while (0);
    if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
     label = 216;
     break L21;
    } else {
     $745 = $750;
     $__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
  default:
   {
    $745 = $743;
    $__trailing_sign$1 = $__trailing_sign$0;
   }
  } while (0);
  L262 : do if ((label | 0) == 44) while (1) {
   label = 0;
   $99 = HEAP32[$__b >> 2] | 0;
   do if (!$99) $111 = 0; else if ((HEAP32[$99 + 12 >> 2] | 0) == (HEAP32[$99 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$99 >> 2] | 0) + 36 >> 2] & 127]($99) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $111 = 0;
    break;
   } else {
    $111 = HEAP32[$__b >> 2] | 0;
    break;
   } else $111 = $99; while (0);
   $112 = ($111 | 0) == 0;
   do if (!$113) {
    $$pre$i$2$i$i$60233 = $$pre$i$2$i$i$60;
    label = 54;
   } else {
    if ((HEAP32[$113 + 12 >> 2] | 0) != (HEAP32[$113 + 16 >> 2] | 0)) if ($112) {
     $$pre$i$2$i$i$60235 = $$pre$i$2$i$i$60;
     $746 = $113;
     break;
    } else {
     $745 = $743;
     $__trailing_sign$1 = $__trailing_sign$0;
     break L262;
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$113 >> 2] | 0) + 36 >> 2] & 127]($113) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     $$pre$i$2$i$i$60233 = 0;
     label = 54;
     break;
    } else if ($112 ^ ($$pre$i$2$i$i$60 | 0) == 0) {
     $$pre$i$2$i$i$60235 = $$pre$i$2$i$i$60;
     $746 = $$pre$i$2$i$i$60;
     break;
    } else {
     $745 = $743;
     $__trailing_sign$1 = $__trailing_sign$0;
     break L262;
    }
   } while (0);
   if ((label | 0) == 54) {
    label = 0;
    if ($112) {
     $745 = $743;
     $__trailing_sign$1 = $__trailing_sign$0;
     break L262;
    } else {
     $$pre$i$2$i$i$60235 = $$pre$i$2$i$i$60233;
     $746 = 0;
    }
   }
   $126 = HEAP32[$__b >> 2] | 0;
   $128 = HEAP32[$126 + 12 >> 2] | 0;
   if (($128 | 0) == (HEAP32[$126 + 16 >> 2] | 0)) $$0$i$i$64 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$126 >> 2] | 0) + 36 >> 2] & 127]($126) | 0; else $$0$i$i$64 = HEAPU8[$128 >> 0] | 0;
   if (($$0$i$i$64 & 255) << 24 >> 24 <= -1) {
    $745 = $743;
    $__trailing_sign$1 = $__trailing_sign$0;
    break L262;
   }
   if (!(HEAP16[(HEAP32[$15 >> 2] | 0) + ($$0$i$i$64 << 24 >> 24 << 1) >> 1] & 8192)) {
    $745 = $743;
    $__trailing_sign$1 = $__trailing_sign$0;
    break L262;
   }
   $145 = HEAP32[$__b >> 2] | 0;
   $146 = $145 + 12 | 0;
   $147 = HEAP32[$146 >> 2] | 0;
   if (($147 | 0) == (HEAP32[$145 + 16 >> 2] | 0)) $$0$i$i$70 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$145 >> 2] | 0) + 40 >> 2] & 127]($145) | 0; else {
    HEAP32[$146 >> 2] = $147 + 1;
    $$0$i$i$70 = HEAPU8[$147 >> 0] | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $$0$i$i$70 & 255);
   $$pre$i$2$i$i$60 = $$pre$i$2$i$i$60235;
   $113 = $746;
   label = 44;
  } while (0);
  $743 = $745;
  $__p$0 = $__p$0 + 1 | 0;
  $__trailing_sign$0 = $__trailing_sign$1;
 }
 L294 : do if ((label | 0) == 42) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 98) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 136) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 184) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 206) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 216) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 218) {
  L296 : do if ($__trailing_sign$0$lcssa) {
   $663 = $__trailing_sign$0$lcssa + 1 | 0;
   $664 = $__trailing_sign$0$lcssa + 8 | 0;
   $665 = $__trailing_sign$0$lcssa + 4 | 0;
   $__i$0 = 1;
   L298 : while (1) {
    $666 = HEAP8[$__trailing_sign$0$lcssa >> 0] | 0;
    if (!($666 & 1)) $673 = ($666 & 255) >>> 1; else $673 = HEAP32[$665 >> 2] | 0;
    if ($__i$0 >>> 0 >= $673 >>> 0) break L296;
    $674 = HEAP32[$__b >> 2] | 0;
    do if (!$674) $686 = 0; else if ((HEAP32[$674 + 12 >> 2] | 0) == (HEAP32[$674 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$674 >> 2] | 0) + 36 >> 2] & 127]($674) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $686 = 0;
     break;
    } else {
     $686 = HEAP32[$__b >> 2] | 0;
     break;
    } else $686 = $674; while (0);
    $687 = ($686 | 0) == 0;
    $688 = HEAP32[$__e >> 2] | 0;
    do if (!$688) label = 234; else {
     if ((HEAP32[$688 + 12 >> 2] | 0) == (HEAP32[$688 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$688 >> 2] | 0) + 36 >> 2] & 127]($688) | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      label = 234;
      break;
     }
     if (!$687) break L298;
    } while (0);
    if ((label | 0) == 234) {
     label = 0;
     if ($687) break;
    }
    $700 = HEAP32[$__b >> 2] | 0;
    $702 = HEAP32[$700 + 12 >> 2] | 0;
    if (($702 | 0) == (HEAP32[$700 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$700 >> 2] | 0) + 36 >> 2] & 127]($700) | 0; else $$0$i$i = HEAPU8[$702 >> 0] | 0;
    if (!(HEAP8[$__trailing_sign$0$lcssa >> 0] & 1)) $718 = $663; else $718 = HEAP32[$664 >> 2] | 0;
    if (($$0$i$i & 255) << 24 >> 24 != (HEAP8[$718 + $__i$0 >> 0] | 0)) break;
    $723 = $__i$0 + 1 | 0;
    $724 = HEAP32[$__b >> 2] | 0;
    $725 = $724 + 12 | 0;
    $726 = HEAP32[$725 >> 2] | 0;
    if (($726 | 0) == (HEAP32[$724 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$724 >> 2] | 0) + 40 >> 2] & 127]($724) | 0;
     $__i$0 = $723;
     continue;
    } else {
     HEAP32[$725 >> 2] = $726 + 1;
     $__i$0 = $723;
     continue;
    }
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$10 = 0;
   break L294;
  } while (0);
  $734 = HEAP32[$__gb >> 2] | 0;
  if (($734 | 0) == ($$lcssa285 | 0)) $$10 = 1; else {
   HEAP32[$__et >> 2] = 0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $734, $$lcssa285, $__et);
   if (!(HEAP32[$__et >> 2] | 0)) {
    $$10 = 1;
    break;
   } else {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    $$10 = 0;
    break;
   }
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $740 = HEAP32[$__gb >> 2] | 0;
 HEAP32[$__gb >> 2] = 0;
 if ($740) FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 255]($740);
 STACKTOP = sp;
 return $$10 | 0;
}

function _vfscanf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$lcssa = 0, $$lcssa386 = 0, $$lcssa40 = 0, $$pre$phi184Z2D = 0, $$size$0 = 0, $0 = 0, $10 = 0, $104 = 0, $105 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $117 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $136 = 0, $14 = 0, $142 = 0, $148 = 0, $15 = 0, $150 = 0, $151 = 0, $156 = 0, $160 = 0, $164 = 0, $166 = 0, $168 = 0, $17 = 0, $173 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $181 = 0, $186 = 0, $190 = 0, $195 = 0, $196 = 0, $197 = 0, $199 = 0, $20 = 0, $201 = 0, $202 = 0, $210 = 0, $220 = 0, $222 = 0, $226 = 0, $228 = 0, $236 = 0, $244 = 0, $245 = 0, $248 = 0, $25 = 0, $250 = 0, $256 = 0, $263 = 0, $265 = 0, $271 = 0, $278 = 0, $283 = 0, $284 = 0, $291 = 0, $304 = 0, $308 = 0.0, $32 = 0, $327 = 0, $38 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $61 = 0, $7 = 0, $8 = 0, $81 = 0, $82 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0402 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $base$0 = 0, $c$0102 = 0, $dest$0 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph22 = 0, $i$0$ph22$lcssa = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigittmp = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0107 = 0, $matches$0107$lcssa = 0, $matches$0107371 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $p$0110 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$398 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0111 = 0, $pos$1 = 0, $pos$2 = 0, $s$0105 = 0, $s$0105$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $scanset = 0, $size$0 = 0, $st = 0, $wc = 0, $wcs$0106 = 0, $wcs$0106$lcssa = 0, $wcs$1 = 0, $wcs$10 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$099 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $ap2$i = sp + 16 | 0;
 $st = sp + 8 | 0;
 $scanset = sp + 33 | 0;
 $wc = sp;
 $0 = sp + 32 | 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $327 = ___lockfile($f) | 0; else $327 = 0;
 $5 = HEAP8[$fmt >> 0] | 0;
 L4 : do if (!($5 << 24 >> 24)) $matches$3 = 0; else {
  $7 = $f + 4 | 0;
  $8 = $f + 100 | 0;
  $9 = $f + 108 | 0;
  $10 = $f + 8 | 0;
  $11 = $scanset + 10 | 0;
  $12 = $scanset + 33 | 0;
  $13 = $st + 4 | 0;
  $14 = $scanset + 46 | 0;
  $15 = $scanset + 94 | 0;
  $17 = $5;
  $matches$0107 = 0;
  $p$0110 = $fmt;
  $pos$0111 = 0;
  $s$0105 = 0;
  $wcs$0106 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace($17 & 255) | 0)) {
    $47 = (HEAP8[$p$0110 >> 0] | 0) == 37;
    L10 : do if ($47) {
     $48 = $p$0110 + 1 | 0;
     $49 = HEAP8[$48 >> 0] | 0;
     L12 : do switch ($49 << 24 >> 24) {
     case 37:
      {
       break L10;
       break;
      }
     case 42:
      {
       $dest$0 = 0;
       $p$2 = $p$0110 + 2 | 0;
       break;
      }
     default:
      {
       $isdigittmp = ($49 & 255) + -48 | 0;
       if ($isdigittmp >>> 0 < 10) if ((HEAP8[$p$0110 + 2 >> 0] | 0) == 36) {
        HEAP32[$ap2$i >> 2] = HEAP32[$ap >> 2];
        $i$0$i = $isdigittmp;
        while (1) {
         $81 = (HEAP32[$ap2$i >> 2] | 0) + (4 - 1) & ~(4 - 1);
         $82 = HEAP32[$81 >> 2] | 0;
         HEAP32[$ap2$i >> 2] = $81 + 4;
         if ($i$0$i >>> 0 > 1) $i$0$i = $i$0$i + -1 | 0; else {
          $$lcssa = $82;
          break;
         }
        }
        $dest$0 = $$lcssa;
        $p$2 = $p$0110 + 3 | 0;
        break L12;
       }
       $90 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
       $91 = HEAP32[$90 >> 2] | 0;
       HEAP32[$ap >> 2] = $90 + 4;
       $dest$0 = $91;
       $p$2 = $48;
      }
     } while (0);
     $92 = HEAP8[$p$2 >> 0] | 0;
     $93 = $92 & 255;
     if (($93 + -48 | 0) >>> 0 < 10) {
      $97 = $93;
      $p$398 = $p$2;
      $width$099 = 0;
      while (1) {
       $96 = ($width$099 * 10 | 0) + -48 + $97 | 0;
       $98 = $p$398 + 1 | 0;
       $99 = HEAP8[$98 >> 0] | 0;
       $97 = $99 & 255;
       if (($97 + -48 | 0) >>> 0 >= 10) {
        $$lcssa40 = $99;
        $p$3$lcssa = $98;
        $width$0$lcssa = $96;
        break;
       } else {
        $p$398 = $98;
        $width$099 = $96;
       }
      }
     } else {
      $$lcssa40 = $92;
      $p$3$lcssa = $p$2;
      $width$0$lcssa = 0;
     }
     if ($$lcssa40 << 24 >> 24 == 109) {
      $104 = $p$3$lcssa + 1 | 0;
      $107 = HEAP8[$104 >> 0] | 0;
      $alloc$0 = ($dest$0 | 0) != 0 & 1;
      $p$4 = $104;
      $s$1 = 0;
      $wcs$1 = 0;
     } else {
      $107 = $$lcssa40;
      $alloc$0 = 0;
      $p$4 = $p$3$lcssa;
      $s$1 = $s$0105;
      $wcs$1 = $wcs$0106;
     }
     $105 = $p$4 + 1 | 0;
     switch ($107 & 255 | 0) {
     case 104:
      {
       $109 = (HEAP8[$105 >> 0] | 0) == 104;
       $p$5 = $109 ? $p$4 + 2 | 0 : $105;
       $size$0 = $109 ? -2 : -1;
       break;
      }
     case 108:
      {
       $112 = (HEAP8[$105 >> 0] | 0) == 108;
       $p$5 = $112 ? $p$4 + 2 | 0 : $105;
       $size$0 = $112 ? 3 : 1;
       break;
      }
     case 106:
      {
       $p$5 = $105;
       $size$0 = 3;
       break;
      }
     case 116:
     case 122:
      {
       $p$5 = $105;
       $size$0 = 1;
       break;
      }
     case 76:
      {
       $p$5 = $105;
       $size$0 = 2;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       $p$5 = $p$4;
       $size$0 = 0;
       break;
      }
     default:
      {
       $alloc$0402 = $alloc$0;
       $matches$0107371 = $matches$0107;
       $s$7 = $s$1;
       $wcs$8 = $wcs$1;
       label = 154;
       break L6;
      }
     }
     $115 = HEAPU8[$p$5 >> 0] | 0;
     $117 = ($115 & 47 | 0) == 3;
     $$ = $117 ? $115 | 32 : $115;
     $$size$0 = $117 ? 1 : $size$0;
     switch ($$ | 0) {
     case 99:
      {
       $pos$1 = $pos$0111;
       $width$1 = ($width$0$lcssa | 0) < 1 ? 1 : $width$0$lcssa;
       break;
      }
     case 91:
      {
       $pos$1 = $pos$0111;
       $width$1 = $width$0$lcssa;
       break;
      }
     case 110:
      {
       if (!$dest$0) {
        $matches$1 = $matches$0107;
        $p$11 = $p$5;
        $pos$2 = $pos$0111;
        $s$6 = $s$1;
        $wcs$7 = $wcs$1;
        break L8;
       }
       switch ($$size$0 | 0) {
       case -2:
        {
         HEAP8[$dest$0 >> 0] = $pos$0111;
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
         break;
        }
       case -1:
        {
         HEAP16[$dest$0 >> 1] = $pos$0111;
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
         break;
        }
       case 0:
        {
         HEAP32[$dest$0 >> 2] = $pos$0111;
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
         break;
        }
       case 1:
        {
         HEAP32[$dest$0 >> 2] = $pos$0111;
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
         break;
        }
       case 3:
        {
         $125 = $dest$0;
         HEAP32[$125 >> 2] = $pos$0111;
         HEAP32[$125 + 4 >> 2] = (($pos$0111 | 0) < 0) << 31 >> 31;
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
         break;
        }
       default:
        {
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
        }
       }
       break;
      }
     default:
      {
       ___shlim($f, 0);
       do {
        $129 = HEAP32[$7 >> 2] | 0;
        if ($129 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
         HEAP32[$7 >> 2] = $129 + 1;
         $136 = HEAPU8[$129 >> 0] | 0;
        } else $136 = ___shgetc($f) | 0;
       } while ((_isspace($136) | 0) != 0);
       if (!(HEAP32[$8 >> 2] | 0)) $148 = HEAP32[$7 >> 2] | 0; else {
        $142 = (HEAP32[$7 >> 2] | 0) + -1 | 0;
        HEAP32[$7 >> 2] = $142;
        $148 = $142;
       }
       $pos$1 = (HEAP32[$9 >> 2] | 0) + $pos$0111 + $148 - (HEAP32[$10 >> 2] | 0) | 0;
       $width$1 = $width$0$lcssa;
      }
     }
     ___shlim($f, $width$1);
     $150 = HEAP32[$7 >> 2] | 0;
     $151 = HEAP32[$8 >> 2] | 0;
     if ($150 >>> 0 < $151 >>> 0) {
      HEAP32[$7 >> 2] = $150 + 1;
      $156 = $151;
     } else {
      if ((___shgetc($f) | 0) < 0) {
       $alloc$0402 = $alloc$0;
       $matches$0107371 = $matches$0107;
       $s$7 = $s$1;
       $wcs$8 = $wcs$1;
       label = 154;
       break L6;
      }
      $156 = HEAP32[$8 >> 2] | 0;
     }
     if ($156) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
     L68 : do switch ($$ | 0) {
     case 91:
     case 99:
     case 115:
      {
       $160 = ($$ | 0) == 99;
       L70 : do if (($$ & 239 | 0) == 99) {
        _memset($scanset | 0, -1, 257) | 0;
        HEAP8[$scanset >> 0] = 0;
        if (($$ | 0) == 115) {
         HEAP8[$12 >> 0] = 0;
         HEAP8[$11 >> 0] = 0;
         HEAP8[$11 + 1 >> 0] = 0;
         HEAP8[$11 + 2 >> 0] = 0;
         HEAP8[$11 + 3 >> 0] = 0;
         HEAP8[$11 + 4 >> 0] = 0;
         $p$9 = $p$5;
        } else $p$9 = $p$5;
       } else {
        $164 = $p$5 + 1 | 0;
        $166 = (HEAP8[$164 >> 0] | 0) == 94;
        $invert$0 = $166 & 1;
        $168 = $166 ? $164 : $p$5;
        $p$6 = $166 ? $p$5 + 2 | 0 : $164;
        _memset($scanset | 0, $166 & 1 | 0, 257) | 0;
        HEAP8[$scanset >> 0] = 0;
        switch (HEAP8[$p$6 >> 0] | 0) {
        case 45:
         {
          $173 = ($invert$0 ^ 1) & 255;
          HEAP8[$14 >> 0] = $173;
          $$pre$phi184Z2D = $173;
          $p$7$ph = $168 + 2 | 0;
          break;
         }
        case 93:
         {
          $176 = ($invert$0 ^ 1) & 255;
          HEAP8[$15 >> 0] = $176;
          $$pre$phi184Z2D = $176;
          $p$7$ph = $168 + 2 | 0;
          break;
         }
        default:
         {
          $$pre$phi184Z2D = ($invert$0 ^ 1) & 255;
          $p$7$ph = $p$6;
         }
        }
        $p$7 = $p$7$ph;
        while (1) {
         $177 = HEAP8[$p$7 >> 0] | 0;
         L81 : do switch ($177 << 24 >> 24) {
         case 0:
          {
           $alloc$0402 = $alloc$0;
           $matches$0107371 = $matches$0107;
           $s$7 = $s$1;
           $wcs$8 = $wcs$1;
           label = 154;
           break L6;
           break;
          }
         case 93:
          {
           $p$9 = $p$7;
           break L70;
           break;
          }
         case 45:
          {
           $178 = $p$7 + 1 | 0;
           $179 = HEAP8[$178 >> 0] | 0;
           switch ($179 << 24 >> 24) {
           case 93:
           case 0:
            {
             $190 = 45;
             $p$8 = $p$7;
             break L81;
             break;
            }
           default:
            {}
           }
           $181 = HEAP8[$p$7 + -1 >> 0] | 0;
           if (($181 & 255) < ($179 & 255)) {
            $c$0102 = $181 & 255;
            do {
             $c$0102 = $c$0102 + 1 | 0;
             HEAP8[$scanset + $c$0102 >> 0] = $$pre$phi184Z2D;
             $186 = HEAP8[$178 >> 0] | 0;
            } while (($c$0102 | 0) < ($186 & 255 | 0));
            $190 = $186;
            $p$8 = $178;
           } else {
            $190 = $179;
            $p$8 = $178;
           }
           break;
          }
         default:
          {
           $190 = $177;
           $p$8 = $p$7;
          }
         } while (0);
         HEAP8[$scanset + (($190 & 255) + 1) >> 0] = $$pre$phi184Z2D;
         $p$7 = $p$8 + 1 | 0;
        }
       } while (0);
       $195 = $160 ? $width$1 + 1 | 0 : 31;
       $196 = ($$size$0 | 0) == 1;
       $197 = ($alloc$0 | 0) != 0;
       L89 : do if ($196) {
        if ($197) {
         $199 = _malloc($195 << 2) | 0;
         if (!$199) {
          $alloc$0402 = $alloc$0;
          $matches$0107371 = $matches$0107;
          $s$7 = 0;
          $wcs$8 = $199;
          label = 154;
          break L6;
         } else $wcs$2 = $199;
        } else $wcs$2 = $dest$0;
        HEAP32[$st >> 2] = 0;
        HEAP32[$13 >> 2] = 0;
        $i$0$ph = 0;
        $k$0$ph = $195;
        $wcs$3$ph = $wcs$2;
        L95 : while (1) {
         $201 = ($wcs$3$ph | 0) == 0;
         $i$0$ph22 = $i$0$ph;
         while (1) {
          L99 : while (1) {
           $202 = HEAP32[$7 >> 2] | 0;
           if ($202 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
            HEAP32[$7 >> 2] = $202 + 1;
            $210 = HEAPU8[$202 >> 0] | 0;
           } else $210 = ___shgetc($f) | 0;
           if (!(HEAP8[$scanset + ($210 + 1) >> 0] | 0)) {
            $i$0$ph22$lcssa = $i$0$ph22;
            $wcs$3$ph$lcssa = $wcs$3$ph;
            break L95;
           }
           HEAP8[$0 >> 0] = $210;
           switch (_mbrtowc($wc, $0, 1, $st) | 0) {
           case -1:
            {
             $alloc$0402 = $alloc$0;
             $matches$0107371 = $matches$0107;
             $s$7 = 0;
             $wcs$8 = $wcs$3$ph;
             label = 154;
             break L6;
             break;
            }
           case -2:
            break;
           default:
            break L99;
           }
          }
          if ($201) $i$1 = $i$0$ph22; else {
           HEAP32[$wcs$3$ph + ($i$0$ph22 << 2) >> 2] = HEAP32[$wc >> 2];
           $i$1 = $i$0$ph22 + 1 | 0;
          }
          if ($197 & ($i$1 | 0) == ($k$0$ph | 0)) break; else $i$0$ph22 = $i$1;
         }
         $220 = $k$0$ph << 1 | 1;
         $222 = _realloc($wcs$3$ph, $220 << 2) | 0;
         if (!$222) {
          $alloc$0402 = $alloc$0;
          $matches$0107371 = $matches$0107;
          $s$7 = 0;
          $wcs$8 = $wcs$3$ph;
          label = 154;
          break L6;
         } else {
          $i$0$ph$phi = $k$0$ph;
          $k$0$ph = $220;
          $wcs$3$ph = $222;
          $i$0$ph = $i$0$ph$phi;
         }
        }
        if (!(_mbsinit($st) | 0)) {
         $alloc$0402 = $alloc$0;
         $matches$0107371 = $matches$0107;
         $s$7 = 0;
         $wcs$8 = $wcs$3$ph$lcssa;
         label = 154;
         break L6;
        } else {
         $i$4 = $i$0$ph22$lcssa;
         $s$4 = 0;
         $wcs$5 = $wcs$3$ph$lcssa;
        }
       } else {
        if ($197) {
         $226 = _malloc($195) | 0;
         if (!$226) {
          $alloc$0402 = $alloc$0;
          $matches$0107371 = $matches$0107;
          $s$7 = 0;
          $wcs$8 = 0;
          label = 154;
          break L6;
         } else {
          $i$2$ph = 0;
          $k$1$ph = $195;
          $s$2$ph = $226;
         }
         while (1) {
          $i$2 = $i$2$ph;
          do {
           $228 = HEAP32[$7 >> 2] | 0;
           if ($228 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
            HEAP32[$7 >> 2] = $228 + 1;
            $236 = HEAPU8[$228 >> 0] | 0;
           } else $236 = ___shgetc($f) | 0;
           if (!(HEAP8[$scanset + ($236 + 1) >> 0] | 0)) {
            $i$4 = $i$2;
            $s$4 = $s$2$ph;
            $wcs$5 = 0;
            break L89;
           }
           HEAP8[$s$2$ph + $i$2 >> 0] = $236;
           $i$2 = $i$2 + 1 | 0;
          } while (($i$2 | 0) != ($k$1$ph | 0));
          $244 = $k$1$ph << 1 | 1;
          $245 = _realloc($s$2$ph, $244) | 0;
          if (!$245) {
           $alloc$0402 = $alloc$0;
           $matches$0107371 = $matches$0107;
           $s$7 = $s$2$ph;
           $wcs$8 = 0;
           label = 154;
           break L6;
          } else {
           $i$2$ph$phi = $k$1$ph;
           $k$1$ph = $244;
           $s$2$ph = $245;
           $i$2$ph = $i$2$ph$phi;
          }
         }
        }
        if (!$dest$0) {
         $265 = $156;
         while (1) {
          $263 = HEAP32[$7 >> 2] | 0;
          if ($263 >>> 0 < $265 >>> 0) {
           HEAP32[$7 >> 2] = $263 + 1;
           $271 = HEAPU8[$263 >> 0] | 0;
          } else $271 = ___shgetc($f) | 0;
          if (!(HEAP8[$scanset + ($271 + 1) >> 0] | 0)) {
           $i$4 = 0;
           $s$4 = 0;
           $wcs$5 = 0;
           break L89;
          }
          $265 = HEAP32[$8 >> 2] | 0;
         }
        } else {
         $250 = $156;
         $i$3 = 0;
         while (1) {
          $248 = HEAP32[$7 >> 2] | 0;
          if ($248 >>> 0 < $250 >>> 0) {
           HEAP32[$7 >> 2] = $248 + 1;
           $256 = HEAPU8[$248 >> 0] | 0;
          } else $256 = ___shgetc($f) | 0;
          if (!(HEAP8[$scanset + ($256 + 1) >> 0] | 0)) {
           $i$4 = $i$3;
           $s$4 = $dest$0;
           $wcs$5 = 0;
           break L89;
          }
          HEAP8[$dest$0 + $i$3 >> 0] = $256;
          $250 = HEAP32[$8 >> 2] | 0;
          $i$3 = $i$3 + 1 | 0;
         }
        }
       } while (0);
       if (!(HEAP32[$8 >> 2] | 0)) $283 = HEAP32[$7 >> 2] | 0; else {
        $278 = (HEAP32[$7 >> 2] | 0) + -1 | 0;
        HEAP32[$7 >> 2] = $278;
        $283 = $278;
       }
       $284 = $283 - (HEAP32[$10 >> 2] | 0) + (HEAP32[$9 >> 2] | 0) | 0;
       if (!$284) {
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0107;
        $s$9 = $s$4;
        $wcs$10 = $wcs$5;
        break L6;
       }
       if (!(($284 | 0) == ($width$1 | 0) | $160 ^ 1)) {
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0107;
        $s$9 = $s$4;
        $wcs$10 = $wcs$5;
        break L6;
       }
       do if ($197) if ($196) {
        HEAP32[$dest$0 >> 2] = $wcs$5;
        break;
       } else {
        HEAP32[$dest$0 >> 2] = $s$4;
        break;
       } while (0);
       if ($160) {
        $p$10 = $p$9;
        $s$5 = $s$4;
        $wcs$6 = $wcs$5;
       } else {
        if ($wcs$5) HEAP32[$wcs$5 + ($i$4 << 2) >> 2] = 0;
        if (!$s$4) {
         $p$10 = $p$9;
         $s$5 = 0;
         $wcs$6 = $wcs$5;
         break L68;
        }
        HEAP8[$s$4 + $i$4 >> 0] = 0;
        $p$10 = $p$9;
        $s$5 = $s$4;
        $wcs$6 = $wcs$5;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       $base$0 = 16;
       label = 136;
       break;
      }
     case 111:
      {
       $base$0 = 8;
       label = 136;
       break;
      }
     case 117:
     case 100:
      {
       $base$0 = 10;
       label = 136;
       break;
      }
     case 105:
      {
       $base$0 = 0;
       label = 136;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       $308 = +___floatscan($f, $$size$0, 0);
       if ((HEAP32[$9 >> 2] | 0) == ((HEAP32[$10 >> 2] | 0) - (HEAP32[$7 >> 2] | 0) | 0)) {
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0107;
        $s$9 = $s$1;
        $wcs$10 = $wcs$1;
        break L6;
       }
       if (!$dest$0) {
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
       } else switch ($$size$0 | 0) {
       case 0:
        {
         HEAPF32[$dest$0 >> 2] = $308;
         $p$10 = $p$5;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L68;
         break;
        }
       case 1:
        {
         HEAPF64[$dest$0 >> 3] = $308;
         $p$10 = $p$5;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L68;
         break;
        }
       case 2:
        {
         HEAPF64[$dest$0 >> 3] = $308;
         $p$10 = $p$5;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L68;
         break;
        }
       default:
        {
         $p$10 = $p$5;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L68;
        }
       }
       break;
      }
     default:
      {
       $p$10 = $p$5;
       $s$5 = $s$1;
       $wcs$6 = $wcs$1;
      }
     } while (0);
     L169 : do if ((label | 0) == 136) {
      label = 0;
      $291 = ___intscan($f, $base$0, 0, -1, -1) | 0;
      if ((HEAP32[$9 >> 2] | 0) == ((HEAP32[$10 >> 2] | 0) - (HEAP32[$7 >> 2] | 0) | 0)) {
       $alloc$2 = $alloc$0;
       $matches$2 = $matches$0107;
       $s$9 = $s$1;
       $wcs$10 = $wcs$1;
       break L6;
      }
      if (($dest$0 | 0) != 0 & ($$ | 0) == 112) {
       HEAP32[$dest$0 >> 2] = $291;
       $p$10 = $p$5;
       $s$5 = $s$1;
       $wcs$6 = $wcs$1;
       break;
      }
      if (!$dest$0) {
       $p$10 = $p$5;
       $s$5 = $s$1;
       $wcs$6 = $wcs$1;
      } else switch ($$size$0 | 0) {
      case -2:
       {
        HEAP8[$dest$0 >> 0] = $291;
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
        break;
       }
      case -1:
       {
        HEAP16[$dest$0 >> 1] = $291;
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
        break;
       }
      case 0:
       {
        HEAP32[$dest$0 >> 2] = $291;
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
        break;
       }
      case 1:
       {
        HEAP32[$dest$0 >> 2] = $291;
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
        break;
       }
      case 3:
       {
        $304 = $dest$0;
        HEAP32[$304 >> 2] = $291;
        HEAP32[$304 + 4 >> 2] = tempRet0;
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
        break;
       }
      default:
       {
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
       }
      }
     } while (0);
     $matches$1 = (($dest$0 | 0) != 0 & 1) + $matches$0107 | 0;
     $p$11 = $p$10;
     $pos$2 = (HEAP32[$9 >> 2] | 0) + $pos$1 + (HEAP32[$7 >> 2] | 0) - (HEAP32[$10 >> 2] | 0) | 0;
     $s$6 = $s$5;
     $wcs$7 = $wcs$6;
     break L8;
    } while (0);
    $51 = $p$0110 + ($47 & 1) | 0;
    ___shlim($f, 0);
    $52 = HEAP32[$7 >> 2] | 0;
    if ($52 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
     HEAP32[$7 >> 2] = $52 + 1;
     $61 = HEAPU8[$52 >> 0] | 0;
    } else $61 = ___shgetc($f) | 0;
    if (($61 | 0) != (HEAPU8[$51 >> 0] | 0)) {
     $$lcssa386 = $61;
     $matches$0107$lcssa = $matches$0107;
     $s$0105$lcssa = $s$0105;
     $wcs$0106$lcssa = $wcs$0106;
     label = 22;
     break L6;
    }
    $matches$1 = $matches$0107;
    $p$11 = $51;
    $pos$2 = $pos$0111 + 1 | 0;
    $s$6 = $s$0105;
    $wcs$7 = $wcs$0106;
   } else {
    $p$1 = $p$0110;
    while (1) {
     $20 = $p$1 + 1 | 0;
     if (!(_isspace(HEAPU8[$20 >> 0] | 0) | 0)) {
      $p$1$lcssa = $p$1;
      break;
     } else $p$1 = $20;
    }
    ___shlim($f, 0);
    do {
     $25 = HEAP32[$7 >> 2] | 0;
     if ($25 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $25 + 1;
      $32 = HEAPU8[$25 >> 0] | 0;
     } else $32 = ___shgetc($f) | 0;
    } while ((_isspace($32) | 0) != 0);
    if (!(HEAP32[$8 >> 2] | 0)) $44 = HEAP32[$7 >> 2] | 0; else {
     $38 = (HEAP32[$7 >> 2] | 0) + -1 | 0;
     HEAP32[$7 >> 2] = $38;
     $44 = $38;
    }
    $matches$1 = $matches$0107;
    $p$11 = $p$1$lcssa;
    $pos$2 = (HEAP32[$9 >> 2] | 0) + $pos$0111 + $44 - (HEAP32[$10 >> 2] | 0) | 0;
    $s$6 = $s$0105;
    $wcs$7 = $wcs$0106;
   } while (0);
   $p$0110 = $p$11 + 1 | 0;
   $17 = HEAP8[$p$0110 >> 0] | 0;
   if (!($17 << 24 >> 24)) {
    $matches$3 = $matches$1;
    break L4;
   } else {
    $matches$0107 = $matches$1;
    $pos$0111 = $pos$2;
    $s$0105 = $s$6;
    $wcs$0106 = $wcs$7;
   }
  }
  if ((label | 0) == 22) {
   if (HEAP32[$8 >> 2] | 0) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
   if (($matches$0107$lcssa | 0) != 0 | ($$lcssa386 | 0) > -1) {
    $matches$3 = $matches$0107$lcssa;
    break;
   } else {
    $alloc$1 = 0;
    $s$8 = $s$0105$lcssa;
    $wcs$9 = $wcs$0106$lcssa;
    label = 155;
   }
  } else if ((label | 0) == 154) if (!$matches$0107371) {
   $alloc$1 = $alloc$0402;
   $s$8 = $s$7;
   $wcs$9 = $wcs$8;
   label = 155;
  } else {
   $alloc$2 = $alloc$0402;
   $matches$2 = $matches$0107371;
   $s$9 = $s$7;
   $wcs$10 = $wcs$8;
  }
  if ((label | 0) == 155) {
   $alloc$2 = $alloc$1;
   $matches$2 = -1;
   $s$9 = $s$8;
   $wcs$10 = $wcs$9;
  }
  if (!$alloc$2) $matches$3 = $matches$2; else {
   _free($s$9);
   _free($wcs$10);
   $matches$3 = $matches$2;
  }
 } while (0);
 if ($327) ___unlockfile($f);
 STACKTOP = sp;
 return $matches$3 | 0;
}

function __ZN4Gear9CorrectorERb($this, $flag) {
 $this = $this | 0;
 $flag = $flag | 0;
 var $$lcssa = 0, $$lcssa230 = 0.0, $$lcssa232 = 0.0, $$lcssa234 = 0.0, $$lcssa236 = 0.0, $$lcssa238 = 0.0, $$lcssa240 = 0.0, $$lcssa242 = 0.0, $$lcssa243 = 0.0, $$lcssa244 = 0.0, $$lcssa245 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $106 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $12 = 0, $125 = 0.0, $128 = 0.0, $13 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $147 = 0, $15 = 0, $153 = 0.0, $154 = 0, $16 = 0, $160 = 0, $161 = 0, $166 = 0, $168 = 0, $17 = 0, $171 = 0, $173 = 0, $175 = 0, $177 = 0, $188 = 0, $19 = 0, $190 = 0, $193 = 0, $195 = 0, $197 = 0, $199 = 0, $2 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $35 = 0.0, $36 = 0, $4 = 0, $40 = 0.0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0.0, $65 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $72 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $93 = 0, $95 = 0, $96 = 0.0, $98 = 0, $MBig = 0, $P = 0, $count$0 = 0, $deltaE = 0, $ecurr = 0, $gm = 0, $i$088 = 0, $i1$081 = 0, $i3$072 = 0, $j$085 = 0, $j2$077$in = 0, $j4$071$in = 0, $powrecip = 0.0, $rDown$0 = 0.0, $rUp$0 = 0.0, $x0 = 0, $xcurr = 0, $xprev = 0, $z0 = 0, $zcurr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $ecurr = sp + 248 | 0;
 $xcurr = sp + 240 | 0;
 $x0 = sp + 232 | 0;
 $zcurr = sp + 220 | 0;
 $z0 = sp + 208 | 0;
 $xprev = sp + 200 | 0;
 $gm = sp + 192 | 0;
 $deltaE = sp + 184 | 0;
 $P = sp + 168 | 0;
 $0 = sp + 144 | 0;
 $1 = sp + 132 | 0;
 $2 = sp + 120 | 0;
 $3 = sp + 112 | 0;
 $4 = sp + 104 | 0;
 $5 = sp + 96 | 0;
 $6 = sp + 88 | 0;
 $7 = sp + 80 | 0;
 $8 = sp + 72 | 0;
 $9 = sp + 64 | 0;
 $10 = sp + 56 | 0;
 $11 = sp + 48 | 0;
 $12 = sp + 40 | 0;
 $MBig = sp + 156 | 0;
 $13 = sp + 24 | 0;
 $14 = sp + 16 | 0;
 $15 = sp + 8 | 0;
 $16 = sp;
 $17 = $this + 152 | 0;
 __ZN6VectorC2Ei($ecurr, HEAP32[$17 >> 2] | 0);
 $19 = $this + 80 | 0;
 __ZN6Matrix9GetColumnEi($xcurr, HEAP32[$19 >> 2] | 0, 0);
 __ZN6Matrix9GetColumnEi($x0, HEAP32[$19 >> 2] | 0, 0);
 __ZN6MatrixC2ERKS_($zcurr, HEAP32[$19 >> 2] | 0);
 __ZN6MatrixC2ERKS_($z0, HEAP32[$19 >> 2] | 0);
 $24 = $this + 120 | 0;
 $25 = HEAP32[$24 >> 2] | 0;
 $26 = $this + 124 | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 $28 = $this + 96 | 0;
 $29 = +HEAPF64[$28 >> 3];
 $30 = $this + 88 | 0;
 $31 = +HEAPF64[$30 >> 3];
 $32 = $25 + 1 | 0;
 $powrecip = 1.0 / +($32 | 0);
 $35 = $powrecip * +__ZN4Gear9FactorialEi($25);
 $36 = $25 + -1 | 0;
 $40 = 1.0 / ($35 * +HEAPF64[168 + ($36 * 56 | 0) + ($25 << 3) >> 3]);
 __ZN6VectorC2Ei($xprev, HEAP32[$17 >> 2] | 0);
 __ZN6VectorC2Ei($gm, HEAP32[$17 >> 2] | 0);
 __ZN6VectorC2Ei($deltaE, HEAP32[$17 >> 2] | 0);
 $45 = HEAP32[$this + 72 >> 2] | 0;
 if (!$45) $51 = __ZN14NordsieckState8JacobianEPFvdPdS0_ER6Vectord(HEAP32[$this >> 2] | 0, $xcurr, $29 + $31) | 0; else $51 = $45;
 $50 = HEAP32[$17 >> 2] | 0;
 __ZN6Matrix8IdentityEii($0, $50, $50);
 __ZNK6MatrixmlEd($2, $51, $29);
 $53 = +HEAPF64[504 + ($36 << 3) >> 3];
 __ZNK6MatrixmlEd($1, $2, $53);
 __ZNK6MatrixmiERKS_($P, $0, $1);
 __ZN6MatrixD2Ev($1);
 __ZN6MatrixD2Ev($2);
 __ZN6MatrixD2Ev($0);
 $54 = $xcurr + 4 | 0;
 $55 = $29 + $31;
 $56 = 168 + ($36 * 56 | 0) | 0;
 $57 = $zcurr + 4 | 0;
 $58 = $zcurr + 8 | 0;
 $59 = $this + 24 | 0;
 $60 = $this + 16 | 0;
 $61 = $this + 148 | 0;
 $62 = $25 + 2 | 0;
 $64 = 1.0 / +($62 | 0);
 $65 = 168 + ($36 * 56 | 0) + ($36 << 3) | 0;
 $68 = $40 / +($62 << 1 | 0);
 $69 = $this + 76 | 0;
 $count$0 = 0;
 while (1) {
  __ZN6VectoraSERKS_($xprev, $xcurr) | 0;
  $70 = HEAP32[$54 >> 2] | 0;
  $72 = __Znaj($70 >>> 0 > 536870911 ? -1 : $70 << 3) | 0;
  FUNCTION_TABLE_vdii[HEAP32[$this >> 2] & 63]($55, HEAP32[$xcurr >> 2] | 0, $72);
  __ZN6VectorC2EPKdi($6, $72, HEAP32[$54 >> 2] | 0);
  __ZdaPv($72);
  __ZNK6VectormlEd($5, $6, $29);
  __ZN6Matrix9GetColumnEi($7, $z0, 1);
  __ZNK6VectormiERKS_($4, $5, $7);
  __ZNK6VectormiERKS_($3, $4, $ecurr);
  __ZN6VectoraSERKS_($gm, $3) | 0;
  __ZN6VectorD2Ev($3);
  __ZN6VectorD2Ev($4);
  __ZN6VectorD2Ev($7);
  __ZN6VectorD2Ev($5);
  __ZN6VectorD2Ev($6);
  __ZN6Matrix7SolveGEERK6Vector($9, $P, $gm);
  __ZNK6VectorplERKS_($8, $ecurr, $9);
  __ZN6VectoraSERKS_($ecurr, $8) | 0;
  __ZN6VectorD2Ev($8);
  __ZN6VectorD2Ev($9);
  __ZNK6VectormlEd($11, $ecurr, $53);
  __ZNK6VectorplERKS_($10, $x0, $11);
  __ZN6VectoraSERKS_($xcurr, $10) | 0;
  __ZN6VectorD2Ev($10);
  __ZN6VectorD2Ev($11);
  __ZN6VectorC2EPKdi($12, $56, $32);
  $76 = __ZN6VectoranERKS_($ecurr, $12) | 0;
  __ZN6VectorD2Ev($12);
  __ZN6Matrix8IdentityEii($MBig, HEAP32[$57 >> 2] | 0, HEAP32[$58 >> 2] | 0);
  $79 = HEAP32[$57 >> 2] | 0;
  if (($79 | 0) > 0) {
   $81 = $76 + 4 | 0;
   $82 = $76 + 8 | 0;
   $202 = $79;
   $83 = HEAP32[$58 >> 2] | 0;
   $i$088 = 0;
   while (1) {
    if (($83 | 0) > 0) {
     $j$085 = 0;
     do {
      if (($i$088 | 0) < (HEAP32[$81 >> 2] | 0)) if (($j$085 | 0) < (HEAP32[$82 >> 2] | 0)) {
       $93 = __ZNK6Matrix9ElementAtEii($76, $i$088, $j$085) | 0;
       $96 = +HEAPF64[$93 >> 3];
      } else $96 = 0.0; else $96 = 0.0;
      $95 = __ZNK6Matrix9ElementAtEii($MBig, $i$088, $j$085) | 0;
      HEAPF64[$95 >> 3] = $96;
      $j$085 = $j$085 + 1 | 0;
      $98 = HEAP32[$58 >> 2] | 0;
     } while (($j$085 | 0) < ($98 | 0));
     $$lcssa = $98;
     $203 = $$lcssa;
     $88 = HEAP32[$57 >> 2] | 0;
    } else {
     $203 = $83;
     $88 = $202;
    }
    $i$088 = $i$088 + 1 | 0;
    if (($i$088 | 0) >= ($88 | 0)) break; else {
     $202 = $88;
     $83 = $203;
    }
   }
  }
  if ($76) {
   __ZN6MatrixD2Ev($76);
   __ZdlPv($76);
  }
  __ZNK6MatrixplERKS_($13, $z0, $MBig);
  __ZN6MatrixaSERKS_($zcurr, $13) | 0;
  __ZN6MatrixD2Ev($13);
  $100 = +HEAPF64[$59 >> 3];
  $101 = +HEAPF64[$60 >> 3];
  $102 = +__ZNK6Vector13LInfinityNormEv($ecurr);
  $106 = $102 / ($101 + $100 * +__ZNK6Vector13LInfinityNormEv($xprev));
  __ZNK6VectormiERKS_($14, $ecurr, HEAP32[$61 >> 2] | 0);
  __ZN6VectoraSERKS_($deltaE, $14) | 0;
  __ZN6VectorD2Ev($14);
  __ZNK6VectormlEd($15, $deltaE, $64 * +HEAPF64[$65 >> 3]);
  __ZN6VectoraSERKS_($deltaE, $15) | 0;
  __ZN6VectorD2Ev($15);
  $110 = +HEAPF64[$59 >> 3];
  $111 = +HEAPF64[$60 >> 3];
  $112 = +__ZNK6Vector13LInfinityNormEv($deltaE);
  $113 = +__ZNK6Vector13LInfinityNormEv($xcurr);
  __ZN6Matrix9GetColumnEi($16, $zcurr, $36);
  $114 = +HEAPF64[$59 >> 3];
  $115 = +HEAPF64[$60 >> 3];
  $116 = +__ZNK6Vector13LInfinityNormEv($16);
  $117 = +__ZNK6Vector13LInfinityNormEv($xcurr);
  __ZN6VectorD2Ev($16);
  $118 = $count$0 + 1 | 0;
  __ZN6MatrixD2Ev($MBig);
  if (!($106 / $68 > 1.0)) {
   $$lcssa230 = $106;
   $$lcssa232 = $110;
   $$lcssa234 = $111;
   $$lcssa236 = $112;
   $$lcssa238 = $113;
   $$lcssa240 = $114;
   $$lcssa242 = $115;
   $$lcssa243 = $116;
   $$lcssa244 = $117;
   $$lcssa245 = $118;
   break;
  }
  if (($118 | 0) < (HEAP32[$69 >> 2] | 0)) $count$0 = $118; else {
   $$lcssa230 = $106;
   $$lcssa232 = $110;
   $$lcssa234 = $111;
   $$lcssa236 = $112;
   $$lcssa238 = $113;
   $$lcssa240 = $114;
   $$lcssa242 = $115;
   $$lcssa243 = $116;
   $$lcssa244 = $117;
   $$lcssa245 = $118;
   break;
  }
 }
 $125 = $$lcssa236 / ($$lcssa234 + $$lcssa232 * $$lcssa238);
 $128 = $$lcssa243 / ($$lcssa242 + $$lcssa240 * $$lcssa244);
 if ($51) {
  __ZN6MatrixD2Ev($51);
  __ZdlPv($51);
 }
 if (($$lcssa245 | 0) < (HEAP32[$69 >> 2] | 0)) {
  $134 = (HEAP32[$this + 128 >> 2] | 0) + 1 | 0;
  HEAP8[$flag >> 0] = 0;
  $135 = HEAP32[$19 >> 2] | 0;
  if ($135) {
   __ZN6MatrixD2Ev($135);
   __ZdlPv($135);
  }
  HEAP32[$19 >> 2] = 0;
  $137 = $this + 144 | 0;
  $138 = HEAP32[$137 >> 2] | 0;
  if ($138) {
   __ZN6VectorD2Ev($138);
   __ZdlPv($138);
  }
  HEAP32[$137 >> 2] = 0;
  $140 = HEAP32[$61 >> 2] | 0;
  if ($140) {
   __ZN6VectorD2Ev($140);
   __ZdlPv($140);
  }
  HEAP32[$61 >> 2] = 0;
  $142 = __Znwj(12) | 0;
  __ZN6MatrixC2ERKS_($142, $zcurr);
  HEAP32[$19 >> 2] = $142;
  $143 = __Znwj(8) | 0;
  __ZN6Matrix9GetColumnEi($143, $zcurr, 0);
  HEAP32[$137 >> 2] = $143;
  $144 = __Znwj(8) | 0;
  __ZN6VectorC2ERKS_($144, $ecurr);
  HEAP32[$61 >> 2] = $144;
  $160 = $134;
 } else {
  HEAP8[$flag >> 0] = 1;
  $160 = 0;
 }
 $145 = HEAP32[$24 >> 2] | 0;
 $147 = ($145 | 0) < (HEAP32[$26 >> 2] | 0);
 if ($147) $rUp$0 = .7142857142857143 / (+Math_pow(+$125, +$64) + 1.0e-06); else $rUp$0 = 0.0;
 $153 = .8333333333333334 / (+Math_pow(+$$lcssa230, +$powrecip) + 1.0e-06);
 $154 = ($145 | 0) > 1;
 if ($154) $rDown$0 = .7692307692307692 / (+Math_pow(+$128, +(1.0 / +($25 | 0))) + 1.0e-06); else $rDown$0 = 0.0;
 $161 = ($160 | 0) >= ($145 | 0);
 HEAP32[$this + 128 >> 2] = $161 ? 0 : $160;
 if ($153 >= $rUp$0) {
  if (!($153 <= $rDown$0 & ($161 & $154))) {
   HEAPF64[$this + 104 >> 3] = $$lcssa230;
   HEAPF64[$this + 136 >> 3] = $153;
   HEAP32[$26 >> 2] = $27;
   HEAPF64[$28 >> 3] = $29;
   HEAPF64[$30 >> 3] = $31;
   __ZN6MatrixD2Ev($P);
   __ZN6VectorD2Ev($deltaE);
   __ZN6VectorD2Ev($gm);
   __ZN6VectorD2Ev($xprev);
   __ZN6MatrixD2Ev($z0);
   __ZN6MatrixD2Ev($zcurr);
   __ZN6VectorD2Ev($x0);
   __ZN6VectorD2Ev($xcurr);
   __ZN6VectorD2Ev($ecurr);
   STACKTOP = sp;
   return;
  }
  $166 = $145 + -1 | 0;
  HEAP32[$24 >> 2] = $166;
  HEAPF64[$this + 104 >> 3] = $128;
  $168 = HEAP32[$17 >> 2] | 0;
  L53 : do if (($168 | 0) > 0) {
   $171 = $166;
   $204 = $168;
   $i1$081 = 0;
   while (1) {
    if (($171 | 0) < ($27 | 0)) {
     $j2$077$in = $171;
     do {
      $j2$077$in = $j2$077$in + 1 | 0;
      $177 = __ZNK6Matrix9ElementAtEii(HEAP32[$19 >> 2] | 0, $i1$081, $j2$077$in) | 0;
      HEAPF64[$177 >> 3] = 0.0;
     } while (($j2$077$in | 0) < ($27 | 0));
     $175 = HEAP32[$17 >> 2] | 0;
    } else $175 = $204;
    $173 = $i1$081 + 1 | 0;
    if (($173 | 0) >= ($175 | 0)) break L53;
    $171 = HEAP32[$24 >> 2] | 0;
    $204 = $175;
    $i1$081 = $173;
   }
  } while (0);
  HEAPF64[$this + 136 >> 3] = $rDown$0;
  HEAP32[$26 >> 2] = $27;
  HEAPF64[$28 >> 3] = $29;
  HEAPF64[$30 >> 3] = $31;
  __ZN6MatrixD2Ev($P);
  __ZN6VectorD2Ev($deltaE);
  __ZN6VectorD2Ev($gm);
  __ZN6VectorD2Ev($xprev);
  __ZN6MatrixD2Ev($z0);
  __ZN6MatrixD2Ev($zcurr);
  __ZN6VectorD2Ev($x0);
  __ZN6VectorD2Ev($xcurr);
  __ZN6VectorD2Ev($ecurr);
  STACKTOP = sp;
  return;
 }
 if ($rUp$0 >= $rDown$0) if (!($rUp$0 >= $153) | ($160 | 0) < ($145 | 0) | $147 ^ 1) {
  HEAPF64[$this + 136 >> 3] = $153;
  HEAP32[$26 >> 2] = $27;
  HEAPF64[$28 >> 3] = $29;
  HEAPF64[$30 >> 3] = $31;
  __ZN6MatrixD2Ev($P);
  __ZN6VectorD2Ev($deltaE);
  __ZN6VectorD2Ev($gm);
  __ZN6VectorD2Ev($xprev);
  __ZN6MatrixD2Ev($z0);
  __ZN6MatrixD2Ev($zcurr);
  __ZN6VectorD2Ev($x0);
  __ZN6VectorD2Ev($xcurr);
  __ZN6VectorD2Ev($ecurr);
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$24 >> 2] = $145 + 1;
  HEAPF64[$this + 104 >> 3] = $125;
  HEAPF64[$this + 136 >> 3] = $rUp$0;
  HEAP32[$26 >> 2] = $27;
  HEAPF64[$28 >> 3] = $29;
  HEAPF64[$30 >> 3] = $31;
  __ZN6MatrixD2Ev($P);
  __ZN6VectorD2Ev($deltaE);
  __ZN6VectorD2Ev($gm);
  __ZN6VectorD2Ev($xprev);
  __ZN6MatrixD2Ev($z0);
  __ZN6MatrixD2Ev($zcurr);
  __ZN6VectorD2Ev($x0);
  __ZN6VectorD2Ev($xcurr);
  __ZN6VectorD2Ev($ecurr);
  STACKTOP = sp;
  return;
 }
 if (!($161 & $154)) {
  HEAPF64[$this + 136 >> 3] = $153;
  HEAP32[$26 >> 2] = $27;
  HEAPF64[$28 >> 3] = $29;
  HEAPF64[$30 >> 3] = $31;
  __ZN6MatrixD2Ev($P);
  __ZN6VectorD2Ev($deltaE);
  __ZN6VectorD2Ev($gm);
  __ZN6VectorD2Ev($xprev);
  __ZN6MatrixD2Ev($z0);
  __ZN6MatrixD2Ev($zcurr);
  __ZN6VectorD2Ev($x0);
  __ZN6VectorD2Ev($xcurr);
  __ZN6VectorD2Ev($ecurr);
  STACKTOP = sp;
  return;
 }
 $188 = $145 + -1 | 0;
 HEAP32[$24 >> 2] = $188;
 HEAPF64[$this + 104 >> 3] = $128;
 $190 = HEAP32[$17 >> 2] | 0;
 L77 : do if (($190 | 0) > 0) {
  $193 = $188;
  $205 = $190;
  $i3$072 = 0;
  while (1) {
   if (($193 | 0) < ($27 | 0)) {
    $j4$071$in = $193;
    do {
     $j4$071$in = $j4$071$in + 1 | 0;
     $199 = __ZNK6Matrix9ElementAtEii(HEAP32[$19 >> 2] | 0, $i3$072, $j4$071$in) | 0;
     HEAPF64[$199 >> 3] = 0.0;
    } while (($j4$071$in | 0) < ($27 | 0));
    $197 = HEAP32[$17 >> 2] | 0;
   } else $197 = $205;
   $195 = $i3$072 + 1 | 0;
   if (($195 | 0) >= ($197 | 0)) break L77;
   $193 = HEAP32[$24 >> 2] | 0;
   $205 = $197;
   $i3$072 = $195;
  }
 } while (0);
 HEAPF64[$this + 136 >> 3] = $rDown$0;
 HEAP32[$26 >> 2] = $27;
 HEAPF64[$28 >> 3] = $29;
 HEAPF64[$30 >> 3] = $31;
 __ZN6MatrixD2Ev($P);
 __ZN6VectorD2Ev($deltaE);
 __ZN6VectorD2Ev($gm);
 __ZN6VectorD2Ev($xprev);
 __ZN6MatrixD2Ev($z0);
 __ZN6MatrixD2Ev($zcurr);
 __ZN6VectorD2Ev($x0);
 __ZN6VectorD2Ev($xcurr);
 __ZN6VectorD2Ev($ecurr);
 STACKTOP = sp;
 return;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$lcssa = 0, $$pre$phi46Z2D = 0, $$pre$phi48Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $104 = 0, $105 = 0, $113 = 0, $114 = 0, $12 = 0, $122 = 0, $130 = 0, $135 = 0, $136 = 0, $139 = 0, $141 = 0, $143 = 0, $15 = 0, $158 = 0, $16 = 0, $163 = 0, $165 = 0, $168 = 0, $171 = 0, $174 = 0, $177 = 0, $178 = 0, $179 = 0, $181 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $203 = 0, $208 = 0, $211 = 0, $212 = 0, $218 = 0, $23 = 0, $233 = 0, $236 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $249 = 0, $25 = 0, $254 = 0, $255 = 0, $258 = 0, $260 = 0, $263 = 0, $268 = 0, $27 = 0, $274 = 0, $278 = 0, $279 = 0, $297 = 0, $299 = 0, $306 = 0, $307 = 0, $308 = 0, $316 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $52 = 0, $55 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $73 = 0, $74 = 0, $8 = 0, $83 = 0, $88 = 0, $9 = 0, $91 = 0, $92 = 0, $98 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa53 = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0;
 if (!$mem) return;
 $1 = $mem + -8 | 0;
 $2 = HEAP32[1804] | 0;
 if ($1 >>> 0 < $2 >>> 0) _abort();
 $5 = HEAP32[$mem + -4 >> 2] | 0;
 $6 = $5 & 3;
 if (($6 | 0) == 1) _abort();
 $8 = $5 & -8;
 $9 = $1 + $8 | 0;
 do if (!($5 & 1)) {
  $12 = HEAP32[$1 >> 2] | 0;
  if (!$6) return;
  $15 = $1 + (0 - $12) | 0;
  $16 = $12 + $8 | 0;
  if ($15 >>> 0 < $2 >>> 0) _abort();
  if (($15 | 0) == (HEAP32[1805] | 0)) {
   $104 = $9 + 4 | 0;
   $105 = HEAP32[$104 >> 2] | 0;
   if (($105 & 3 | 0) != 3) {
    $p$1 = $15;
    $psize$1 = $16;
    break;
   }
   HEAP32[1802] = $16;
   HEAP32[$104 >> 2] = $105 & -2;
   HEAP32[$15 + 4 >> 2] = $16 | 1;
   HEAP32[$15 + $16 >> 2] = $16;
   return;
  }
  $20 = $12 >>> 3;
  if ($12 >>> 0 < 256) {
   $23 = HEAP32[$15 + 8 >> 2] | 0;
   $25 = HEAP32[$15 + 12 >> 2] | 0;
   $27 = 7240 + ($20 << 1 << 2) | 0;
   if (($23 | 0) != ($27 | 0)) {
    if ($23 >>> 0 < $2 >>> 0) _abort();
    if ((HEAP32[$23 + 12 >> 2] | 0) != ($15 | 0)) _abort();
   }
   if (($25 | 0) == ($23 | 0)) {
    HEAP32[1800] = HEAP32[1800] & ~(1 << $20);
    $p$1 = $15;
    $psize$1 = $16;
    break;
   }
   if (($25 | 0) == ($27 | 0)) $$pre$phi48Z2D = $25 + 8 | 0; else {
    if ($25 >>> 0 < $2 >>> 0) _abort();
    $40 = $25 + 8 | 0;
    if ((HEAP32[$40 >> 2] | 0) == ($15 | 0)) $$pre$phi48Z2D = $40; else _abort();
   }
   HEAP32[$23 + 12 >> 2] = $25;
   HEAP32[$$pre$phi48Z2D >> 2] = $23;
   $p$1 = $15;
   $psize$1 = $16;
   break;
  }
  $45 = HEAP32[$15 + 24 >> 2] | 0;
  $47 = HEAP32[$15 + 12 >> 2] | 0;
  do if (($47 | 0) == ($15 | 0)) {
   $58 = $15 + 16 | 0;
   $59 = $58 + 4 | 0;
   $60 = HEAP32[$59 >> 2] | 0;
   if (!$60) {
    $62 = HEAP32[$58 >> 2] | 0;
    if (!$62) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $62;
     $RP$1 = $58;
    }
   } else {
    $R$1 = $60;
    $RP$1 = $59;
   }
   while (1) {
    $64 = $R$1 + 20 | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    if ($65) {
     $R$1 = $65;
     $RP$1 = $64;
     continue;
    }
    $67 = $R$1 + 16 | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    if (!$68) {
     $R$1$lcssa = $R$1;
     $RP$1$lcssa = $RP$1;
     break;
    } else {
     $R$1 = $68;
     $RP$1 = $67;
    }
   }
   if ($RP$1$lcssa >>> 0 < $2 >>> 0) _abort(); else {
    HEAP32[$RP$1$lcssa >> 2] = 0;
    $R$3 = $R$1$lcssa;
    break;
   }
  } else {
   $50 = HEAP32[$15 + 8 >> 2] | 0;
   if ($50 >>> 0 < $2 >>> 0) _abort();
   $52 = $50 + 12 | 0;
   if ((HEAP32[$52 >> 2] | 0) != ($15 | 0)) _abort();
   $55 = $47 + 8 | 0;
   if ((HEAP32[$55 >> 2] | 0) == ($15 | 0)) {
    HEAP32[$52 >> 2] = $47;
    HEAP32[$55 >> 2] = $50;
    $R$3 = $47;
    break;
   } else _abort();
  } while (0);
  if (!$45) {
   $p$1 = $15;
   $psize$1 = $16;
  } else {
   $73 = HEAP32[$15 + 28 >> 2] | 0;
   $74 = 7504 + ($73 << 2) | 0;
   if (($15 | 0) == (HEAP32[$74 >> 2] | 0)) {
    HEAP32[$74 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[1801] = HEAP32[1801] & ~(1 << $73);
     $p$1 = $15;
     $psize$1 = $16;
     break;
    }
   } else {
    if ($45 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort();
    $83 = $45 + 16 | 0;
    if ((HEAP32[$83 >> 2] | 0) == ($15 | 0)) HEAP32[$83 >> 2] = $R$3; else HEAP32[$45 + 20 >> 2] = $R$3;
    if (!$R$3) {
     $p$1 = $15;
     $psize$1 = $16;
     break;
    }
   }
   $88 = HEAP32[1804] | 0;
   if ($R$3 >>> 0 < $88 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $45;
   $91 = $15 + 16 | 0;
   $92 = HEAP32[$91 >> 2] | 0;
   do if ($92) if ($92 >>> 0 < $88 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $92;
    HEAP32[$92 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $98 = HEAP32[$91 + 4 >> 2] | 0;
   if (!$98) {
    $p$1 = $15;
    $psize$1 = $16;
   } else if ($98 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $98;
    HEAP32[$98 + 24 >> 2] = $R$3;
    $p$1 = $15;
    $psize$1 = $16;
    break;
   }
  }
 } else {
  $p$1 = $1;
  $psize$1 = $8;
 } while (0);
 if ($p$1 >>> 0 >= $9 >>> 0) _abort();
 $113 = $9 + 4 | 0;
 $114 = HEAP32[$113 >> 2] | 0;
 if (!($114 & 1)) _abort();
 if (!($114 & 2)) {
  if (($9 | 0) == (HEAP32[1806] | 0)) {
   $122 = (HEAP32[1803] | 0) + $psize$1 | 0;
   HEAP32[1803] = $122;
   HEAP32[1806] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $122 | 1;
   if (($p$1 | 0) != (HEAP32[1805] | 0)) return;
   HEAP32[1805] = 0;
   HEAP32[1802] = 0;
   return;
  }
  if (($9 | 0) == (HEAP32[1805] | 0)) {
   $130 = (HEAP32[1802] | 0) + $psize$1 | 0;
   HEAP32[1802] = $130;
   HEAP32[1805] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $130 | 1;
   HEAP32[$p$1 + $130 >> 2] = $130;
   return;
  }
  $135 = ($114 & -8) + $psize$1 | 0;
  $136 = $114 >>> 3;
  do if ($114 >>> 0 < 256) {
   $139 = HEAP32[$9 + 8 >> 2] | 0;
   $141 = HEAP32[$9 + 12 >> 2] | 0;
   $143 = 7240 + ($136 << 1 << 2) | 0;
   if (($139 | 0) != ($143 | 0)) {
    if ($139 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort();
    if ((HEAP32[$139 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($141 | 0) == ($139 | 0)) {
    HEAP32[1800] = HEAP32[1800] & ~(1 << $136);
    break;
   }
   if (($141 | 0) == ($143 | 0)) $$pre$phi46Z2D = $141 + 8 | 0; else {
    if ($141 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort();
    $158 = $141 + 8 | 0;
    if ((HEAP32[$158 >> 2] | 0) == ($9 | 0)) $$pre$phi46Z2D = $158; else _abort();
   }
   HEAP32[$139 + 12 >> 2] = $141;
   HEAP32[$$pre$phi46Z2D >> 2] = $139;
  } else {
   $163 = HEAP32[$9 + 24 >> 2] | 0;
   $165 = HEAP32[$9 + 12 >> 2] | 0;
   do if (($165 | 0) == ($9 | 0)) {
    $177 = $9 + 16 | 0;
    $178 = $177 + 4 | 0;
    $179 = HEAP32[$178 >> 2] | 0;
    if (!$179) {
     $181 = HEAP32[$177 >> 2] | 0;
     if (!$181) {
      $R8$3 = 0;
      break;
     } else {
      $R8$1 = $181;
      $RP10$1 = $177;
     }
    } else {
     $R8$1 = $179;
     $RP10$1 = $178;
    }
    while (1) {
     $183 = $R8$1 + 20 | 0;
     $184 = HEAP32[$183 >> 2] | 0;
     if ($184) {
      $R8$1 = $184;
      $RP10$1 = $183;
      continue;
     }
     $186 = $R8$1 + 16 | 0;
     $187 = HEAP32[$186 >> 2] | 0;
     if (!$187) {
      $R8$1$lcssa = $R8$1;
      $RP10$1$lcssa = $RP10$1;
      break;
     } else {
      $R8$1 = $187;
      $RP10$1 = $186;
     }
    }
    if ($RP10$1$lcssa >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
     HEAP32[$RP10$1$lcssa >> 2] = 0;
     $R8$3 = $R8$1$lcssa;
     break;
    }
   } else {
    $168 = HEAP32[$9 + 8 >> 2] | 0;
    if ($168 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort();
    $171 = $168 + 12 | 0;
    if ((HEAP32[$171 >> 2] | 0) != ($9 | 0)) _abort();
    $174 = $165 + 8 | 0;
    if ((HEAP32[$174 >> 2] | 0) == ($9 | 0)) {
     HEAP32[$171 >> 2] = $165;
     HEAP32[$174 >> 2] = $168;
     $R8$3 = $165;
     break;
    } else _abort();
   } while (0);
   if ($163) {
    $193 = HEAP32[$9 + 28 >> 2] | 0;
    $194 = 7504 + ($193 << 2) | 0;
    if (($9 | 0) == (HEAP32[$194 >> 2] | 0)) {
     HEAP32[$194 >> 2] = $R8$3;
     if (!$R8$3) {
      HEAP32[1801] = HEAP32[1801] & ~(1 << $193);
      break;
     }
    } else {
     if ($163 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort();
     $203 = $163 + 16 | 0;
     if ((HEAP32[$203 >> 2] | 0) == ($9 | 0)) HEAP32[$203 >> 2] = $R8$3; else HEAP32[$163 + 20 >> 2] = $R8$3;
     if (!$R8$3) break;
    }
    $208 = HEAP32[1804] | 0;
    if ($R8$3 >>> 0 < $208 >>> 0) _abort();
    HEAP32[$R8$3 + 24 >> 2] = $163;
    $211 = $9 + 16 | 0;
    $212 = HEAP32[$211 >> 2] | 0;
    do if ($212) if ($212 >>> 0 < $208 >>> 0) _abort(); else {
     HEAP32[$R8$3 + 16 >> 2] = $212;
     HEAP32[$212 + 24 >> 2] = $R8$3;
     break;
    } while (0);
    $218 = HEAP32[$211 + 4 >> 2] | 0;
    if ($218) if ($218 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
     HEAP32[$R8$3 + 20 >> 2] = $218;
     HEAP32[$218 + 24 >> 2] = $R8$3;
     break;
    }
   }
  } while (0);
  HEAP32[$p$1 + 4 >> 2] = $135 | 1;
  HEAP32[$p$1 + $135 >> 2] = $135;
  if (($p$1 | 0) == (HEAP32[1805] | 0)) {
   HEAP32[1802] = $135;
   return;
  } else $psize$2 = $135;
 } else {
  HEAP32[$113 >> 2] = $114 & -2;
  HEAP32[$p$1 + 4 >> 2] = $psize$1 | 1;
  HEAP32[$p$1 + $psize$1 >> 2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 if ($psize$2 >>> 0 < 256) {
  $236 = 7240 + ($233 << 1 << 2) | 0;
  $237 = HEAP32[1800] | 0;
  $238 = 1 << $233;
  if (!($237 & $238)) {
   HEAP32[1800] = $237 | $238;
   $$pre$phiZ2D = $236 + 8 | 0;
   $F18$0 = $236;
  } else {
   $242 = $236 + 8 | 0;
   $243 = HEAP32[$242 >> 2] | 0;
   if ($243 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $242;
    $F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$1;
  HEAP32[$F18$0 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $F18$0;
  HEAP32[$p$1 + 12 >> 2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 if (!$249) $I20$0 = 0; else if ($psize$2 >>> 0 > 16777215) $I20$0 = 31; else {
  $254 = ($249 + 1048320 | 0) >>> 16 & 8;
  $255 = $249 << $254;
  $258 = ($255 + 520192 | 0) >>> 16 & 4;
  $260 = $255 << $258;
  $263 = ($260 + 245760 | 0) >>> 16 & 2;
  $268 = 14 - ($258 | $254 | $263) + ($260 << $263 >>> 15) | 0;
  $I20$0 = $psize$2 >>> ($268 + 7 | 0) & 1 | $268 << 1;
 }
 $274 = 7504 + ($I20$0 << 2) | 0;
 HEAP32[$p$1 + 28 >> 2] = $I20$0;
 HEAP32[$p$1 + 20 >> 2] = 0;
 HEAP32[$p$1 + 16 >> 2] = 0;
 $278 = HEAP32[1801] | 0;
 $279 = 1 << $I20$0;
 do if (!($278 & $279)) {
  HEAP32[1801] = $278 | $279;
  HEAP32[$274 >> 2] = $p$1;
  HEAP32[$p$1 + 24 >> 2] = $274;
  HEAP32[$p$1 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $p$1;
 } else {
  $K21$0 = $psize$2 << (($I20$0 | 0) == 31 ? 0 : 25 - ($I20$0 >>> 1) | 0);
  $T$0 = HEAP32[$274 >> 2] | 0;
  while (1) {
   if ((HEAP32[$T$0 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) {
    $T$0$lcssa = $T$0;
    label = 130;
    break;
   }
   $297 = $T$0 + 16 + ($K21$0 >>> 31 << 2) | 0;
   $299 = HEAP32[$297 >> 2] | 0;
   if (!$299) {
    $$lcssa = $297;
    $T$0$lcssa53 = $T$0;
    label = 127;
    break;
   } else {
    $K21$0 = $K21$0 << 1;
    $T$0 = $299;
   }
  }
  if ((label | 0) == 127) if ($$lcssa >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
   HEAP32[$$lcssa >> 2] = $p$1;
   HEAP32[$p$1 + 24 >> 2] = $T$0$lcssa53;
   HEAP32[$p$1 + 12 >> 2] = $p$1;
   HEAP32[$p$1 + 8 >> 2] = $p$1;
   break;
  } else if ((label | 0) == 130) {
   $306 = $T$0$lcssa + 8 | 0;
   $307 = HEAP32[$306 >> 2] | 0;
   $308 = HEAP32[1804] | 0;
   if ($307 >>> 0 >= $308 >>> 0 & $T$0$lcssa >>> 0 >= $308 >>> 0) {
    HEAP32[$307 + 12 >> 2] = $p$1;
    HEAP32[$306 >> 2] = $p$1;
    HEAP32[$p$1 + 8 >> 2] = $307;
    HEAP32[$p$1 + 12 >> 2] = $T$0$lcssa;
    HEAP32[$p$1 + 24 >> 2] = 0;
    break;
   } else _abort();
  }
 } while (0);
 $316 = (HEAP32[1808] | 0) + -1 | 0;
 HEAP32[1808] = $316;
 if (!$316) $sp$0$in$i = 7656; else return;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[1808] = -1;
 return;
}

function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$115 = 0, $$116 = 0, $$base14 = 0, $$lcssa = 0, $$lcssa118 = 0, $$lcssa119 = 0, $$lcssa120 = 0, $$lcssa121 = 0, $$lcssa122 = 0, $$lcssa123 = 0, $100 = 0, $101 = 0, $108 = 0, $120 = 0, $121 = 0, $128 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $135 = 0, $136 = 0, $144 = 0, $149 = 0, $150 = 0, $152 = 0, $154 = 0, $156 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $185 = 0, $186 = 0, $187 = 0, $195 = 0, $201 = 0, $203 = 0, $204 = 0, $205 = 0, $207 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $222 = 0, $223 = 0, $224 = 0, $239 = 0, $25 = 0, $250 = 0, $259 = 0, $261 = 0, $271 = 0, $272 = 0, $279 = 0, $281 = 0, $284 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $47 = 0, $5 = 0, $51 = 0, $6 = 0, $65 = 0, $67 = 0, $70 = 0, $71 = 0, $72 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $91 = 0, $93 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$117 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$742 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$1 = 0, $x$070 = 0, $x$136 = 0, $x$254 = 0, label = 0;
 L1 : do if ($base >>> 0 > 36) {
  $5 = ___errno_location() | 0;
  HEAP32[$5 >> 2] = 22;
  $286 = 0;
  $287 = 0;
 } else {
  $3 = $f + 4 | 0;
  $4 = $f + 100 | 0;
  do {
   $6 = HEAP32[$3 >> 2] | 0;
   if ($6 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $6 + 1;
    $13 = HEAPU8[$6 >> 0] | 0;
   } else $13 = ___shgetc($f) | 0;
  } while ((_isspace($13) | 0) != 0);
  $$lcssa123 = $13;
  L11 : do switch ($$lcssa123 | 0) {
  case 43:
  case 45:
   {
    $17 = (($$lcssa123 | 0) == 45) << 31 >> 31;
    $18 = HEAP32[$3 >> 2] | 0;
    if ($18 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $18 + 1;
     $c$0 = HEAPU8[$18 >> 0] | 0;
     $neg$0 = $17;
     break L11;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $neg$0 = $17;
     break L11;
    }
    break;
   }
  default:
   {
    $c$0 = $$lcssa123;
    $neg$0 = 0;
   }
  } while (0);
  $25 = ($base | 0) == 0;
  do if (($base & -17 | 0) == 0 & ($c$0 | 0) == 48) {
   $29 = HEAP32[$3 >> 2] | 0;
   if ($29 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $29 + 1;
    $37 = HEAPU8[$29 >> 0] | 0;
   } else $37 = ___shgetc($f) | 0;
   if (($37 | 32 | 0) != 120) if ($25) {
    $$116 = 8;
    $c$117 = $37;
    label = 46;
    break;
   } else {
    $$1 = $base;
    $c$1 = $37;
    label = 32;
    break;
   }
   $39 = HEAP32[$3 >> 2] | 0;
   if ($39 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $39 + 1;
    $47 = HEAPU8[$39 >> 0] | 0;
   } else $47 = ___shgetc($f) | 0;
   if ((HEAPU8[17521 + $47 >> 0] | 0) > 15) {
    $51 = (HEAP32[$4 >> 2] | 0) == 0;
    if (!$51) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    if (!$pok) {
     ___shlim($f, 0);
     $286 = 0;
     $287 = 0;
     break L1;
    }
    if ($51) {
     $286 = 0;
     $287 = 0;
     break L1;
    }
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    $286 = 0;
    $287 = 0;
    break L1;
   } else {
    $$116 = 16;
    $c$117 = $47;
    label = 46;
   }
  } else {
   $$base14 = $25 ? 10 : $base;
   if ((HEAPU8[17521 + $c$0 >> 0] | 0) >>> 0 < $$base14 >>> 0) {
    $$1 = $$base14;
    $c$1 = $c$0;
    label = 32;
   } else {
    if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    ___shlim($f, 0);
    $65 = ___errno_location() | 0;
    HEAP32[$65 >> 2] = 22;
    $286 = 0;
    $287 = 0;
    break L1;
   }
  } while (0);
  if ((label | 0) == 32) if (($$1 | 0) == 10) {
   $67 = $c$1 + -48 | 0;
   if ($67 >>> 0 < 10) {
    $71 = $67;
    $x$070 = 0;
    while (1) {
     $70 = ($x$070 * 10 | 0) + $71 | 0;
     $72 = HEAP32[$3 >> 2] | 0;
     if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $72 + 1;
      $c$2$be = HEAPU8[$72 >> 0] | 0;
     } else $c$2$be = ___shgetc($f) | 0;
     $71 = $c$2$be + -48 | 0;
     if (!($71 >>> 0 < 10 & $70 >>> 0 < 429496729)) {
      $$lcssa122 = $70;
      $c$2$be$lcssa = $c$2$be;
      break;
     } else $x$070 = $70;
    }
    $288 = $$lcssa122;
    $289 = 0;
    $c$2$lcssa = $c$2$be$lcssa;
   } else {
    $288 = 0;
    $289 = 0;
    $c$2$lcssa = $c$1;
   }
   $83 = $c$2$lcssa + -48 | 0;
   if ($83 >>> 0 < 10) {
    $85 = $288;
    $86 = $289;
    $89 = $83;
    $c$359 = $c$2$lcssa;
    while (1) {
     $87 = ___muldi3($85 | 0, $86 | 0, 10, 0) | 0;
     $88 = tempRet0;
     $91 = (($89 | 0) < 0) << 31 >> 31;
     $93 = ~$91;
     if ($88 >>> 0 > $93 >>> 0 | ($88 | 0) == ($93 | 0) & $87 >>> 0 > ~$89 >>> 0) {
      $$lcssa = $89;
      $290 = $85;
      $291 = $86;
      $c$3$lcssa = $c$359;
      break;
     }
     $99 = _i64Add($87 | 0, $88 | 0, $89 | 0, $91 | 0) | 0;
     $100 = tempRet0;
     $101 = HEAP32[$3 >> 2] | 0;
     if ($101 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $101 + 1;
      $c$3$be = HEAPU8[$101 >> 0] | 0;
     } else $c$3$be = ___shgetc($f) | 0;
     $108 = $c$3$be + -48 | 0;
     if ($108 >>> 0 < 10 & ($100 >>> 0 < 429496729 | ($100 | 0) == 429496729 & $99 >>> 0 < 2576980378)) {
      $85 = $99;
      $86 = $100;
      $89 = $108;
      $c$359 = $c$3$be;
     } else {
      $$lcssa = $108;
      $290 = $99;
      $291 = $100;
      $c$3$lcssa = $c$3$be;
      break;
     }
    }
    if ($$lcssa >>> 0 > 9) {
     $259 = $291;
     $261 = $290;
     $neg$1 = $neg$0;
    } else {
     $$115 = 10;
     $292 = $290;
     $293 = $291;
     $c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $259 = $289;
    $261 = $288;
    $neg$1 = $neg$0;
   }
  } else {
   $$116 = $$1;
   $c$117 = $c$1;
   label = 46;
  }
  L63 : do if ((label | 0) == 46) {
   if (!($$116 + -1 & $$116)) {
    $128 = HEAP8[17777 + (($$116 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    $130 = HEAP8[17521 + $c$117 >> 0] | 0;
    $131 = $130 & 255;
    if ($131 >>> 0 < $$116 >>> 0) {
     $135 = $131;
     $x$136 = 0;
     while (1) {
      $134 = $135 | $x$136 << $128;
      $136 = HEAP32[$3 >> 2] | 0;
      if ($136 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $136 + 1;
       $c$4$be = HEAPU8[$136 >> 0] | 0;
      } else $c$4$be = ___shgetc($f) | 0;
      $144 = HEAP8[17521 + $c$4$be >> 0] | 0;
      $135 = $144 & 255;
      if (!($134 >>> 0 < 134217728 & $135 >>> 0 < $$116 >>> 0)) {
       $$lcssa118 = $134;
       $$lcssa119 = $144;
       $c$4$be$lcssa = $c$4$be;
       break;
      } else $x$136 = $134;
     }
     $152 = $$lcssa119;
     $154 = 0;
     $156 = $$lcssa118;
     $c$4$lcssa = $c$4$be$lcssa;
    } else {
     $152 = $130;
     $154 = 0;
     $156 = 0;
     $c$4$lcssa = $c$117;
    }
    $149 = _bitshift64Lshr(-1, -1, $128 | 0) | 0;
    $150 = tempRet0;
    if (($152 & 255) >>> 0 >= $$116 >>> 0 | ($154 >>> 0 > $150 >>> 0 | ($154 | 0) == ($150 | 0) & $156 >>> 0 > $149 >>> 0)) {
     $$115 = $$116;
     $292 = $156;
     $293 = $154;
     $c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $161 = $156;
     $162 = $154;
     $166 = $152;
    }
    while (1) {
     $163 = _bitshift64Shl($161 | 0, $162 | 0, $128 | 0) | 0;
     $164 = tempRet0;
     $167 = $166 & 255 | $163;
     $168 = HEAP32[$3 >> 2] | 0;
     if ($168 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $168 + 1;
      $c$5$be = HEAPU8[$168 >> 0] | 0;
     } else $c$5$be = ___shgetc($f) | 0;
     $166 = HEAP8[17521 + $c$5$be >> 0] | 0;
     if (($166 & 255) >>> 0 >= $$116 >>> 0 | ($164 >>> 0 > $150 >>> 0 | ($164 | 0) == ($150 | 0) & $167 >>> 0 > $149 >>> 0)) {
      $$115 = $$116;
      $292 = $167;
      $293 = $164;
      $c$8 = $c$5$be;
      label = 72;
      break L63;
     } else {
      $161 = $167;
      $162 = $164;
     }
    }
   }
   $120 = HEAP8[17521 + $c$117 >> 0] | 0;
   $121 = $120 & 255;
   if ($121 >>> 0 < $$116 >>> 0) {
    $186 = $121;
    $x$254 = 0;
    while (1) {
     $185 = $186 + (Math_imul($x$254, $$116) | 0) | 0;
     $187 = HEAP32[$3 >> 2] | 0;
     if ($187 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $187 + 1;
      $c$6$be = HEAPU8[$187 >> 0] | 0;
     } else $c$6$be = ___shgetc($f) | 0;
     $195 = HEAP8[17521 + $c$6$be >> 0] | 0;
     $186 = $195 & 255;
     if (!($185 >>> 0 < 119304647 & $186 >>> 0 < $$116 >>> 0)) {
      $$lcssa120 = $185;
      $$lcssa121 = $195;
      $c$6$be$lcssa = $c$6$be;
      break;
     } else $x$254 = $185;
    }
    $201 = $$lcssa121;
    $294 = $$lcssa120;
    $295 = 0;
    $c$6$lcssa = $c$6$be$lcssa;
   } else {
    $201 = $120;
    $294 = 0;
    $295 = 0;
    $c$6$lcssa = $c$117;
   }
   if (($201 & 255) >>> 0 < $$116 >>> 0) {
    $203 = ___udivdi3(-1, -1, $$116 | 0, 0) | 0;
    $204 = tempRet0;
    $205 = $295;
    $207 = $294;
    $215 = $201;
    $c$742 = $c$6$lcssa;
    while (1) {
     if ($205 >>> 0 > $204 >>> 0 | ($205 | 0) == ($204 | 0) & $207 >>> 0 > $203 >>> 0) {
      $$115 = $$116;
      $292 = $207;
      $293 = $205;
      $c$8 = $c$742;
      label = 72;
      break L63;
     }
     $212 = ___muldi3($207 | 0, $205 | 0, $$116 | 0, 0) | 0;
     $213 = tempRet0;
     $214 = $215 & 255;
     if ($213 >>> 0 > 4294967295 | ($213 | 0) == -1 & $212 >>> 0 > ~$214 >>> 0) {
      $$115 = $$116;
      $292 = $207;
      $293 = $205;
      $c$8 = $c$742;
      label = 72;
      break L63;
     }
     $222 = _i64Add($214 | 0, 0, $212 | 0, $213 | 0) | 0;
     $223 = tempRet0;
     $224 = HEAP32[$3 >> 2] | 0;
     if ($224 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $224 + 1;
      $c$7$be = HEAPU8[$224 >> 0] | 0;
     } else $c$7$be = ___shgetc($f) | 0;
     $215 = HEAP8[17521 + $c$7$be >> 0] | 0;
     if (($215 & 255) >>> 0 >= $$116 >>> 0) {
      $$115 = $$116;
      $292 = $222;
      $293 = $223;
      $c$8 = $c$7$be;
      label = 72;
      break;
     } else {
      $205 = $223;
      $207 = $222;
      $c$742 = $c$7$be;
     }
    }
   } else {
    $$115 = $$116;
    $292 = $294;
    $293 = $295;
    $c$8 = $c$6$lcssa;
    label = 72;
   }
  } while (0);
  if ((label | 0) == 72) if ((HEAPU8[17521 + $c$8 >> 0] | 0) >>> 0 < $$115 >>> 0) {
   do {
    $239 = HEAP32[$3 >> 2] | 0;
    if ($239 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $239 + 1;
     $c$9$be = HEAPU8[$239 >> 0] | 0;
    } else $c$9$be = ___shgetc($f) | 0;
   } while ((HEAPU8[17521 + $c$9$be >> 0] | 0) >>> 0 < $$115 >>> 0);
   $250 = ___errno_location() | 0;
   HEAP32[$250 >> 2] = 34;
   $259 = $1;
   $261 = $0;
   $neg$1 = ($0 & 1 | 0) == 0 & 0 == 0 ? $neg$0 : 0;
  } else {
   $259 = $293;
   $261 = $292;
   $neg$1 = $neg$0;
  }
  if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
  if (!($259 >>> 0 < $1 >>> 0 | ($259 | 0) == ($1 | 0) & $261 >>> 0 < $0 >>> 0)) {
   if (!(($0 & 1 | 0) != 0 | 0 != 0 | ($neg$1 | 0) != 0)) {
    $271 = ___errno_location() | 0;
    HEAP32[$271 >> 2] = 34;
    $272 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0;
    $286 = tempRet0;
    $287 = $272;
    break;
   }
   if ($259 >>> 0 > $1 >>> 0 | ($259 | 0) == ($1 | 0) & $261 >>> 0 > $0 >>> 0) {
    $279 = ___errno_location() | 0;
    HEAP32[$279 >> 2] = 34;
    $286 = $1;
    $287 = $0;
    break;
   }
  }
  $281 = (($neg$1 | 0) < 0) << 31 >> 31;
  $284 = _i64Subtract($261 ^ $neg$1 | 0, $259 ^ $281 | 0, $neg$1 | 0, $281 | 0) | 0;
  $286 = tempRet0;
  $287 = $284;
 } while (0);
 tempRet0 = $286;
 return $287 | 0;
}

function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $10 = 0, $100 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $116 = 0, $124 = 0, $129 = 0, $130 = 0, $133 = 0, $135 = 0, $137 = 0, $15 = 0, $150 = 0, $155 = 0, $157 = 0, $160 = 0, $162 = 0, $165 = 0, $168 = 0, $169 = 0, $170 = 0, $172 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $18 = 0, $183 = 0, $184 = 0, $193 = 0, $198 = 0, $2 = 0, $20 = 0, $201 = 0, $202 = 0, $208 = 0, $22 = 0, $223 = 0, $226 = 0, $227 = 0, $228 = 0, $232 = 0, $233 = 0, $239 = 0, $244 = 0, $245 = 0, $248 = 0, $250 = 0, $253 = 0, $258 = 0, $264 = 0, $268 = 0, $269 = 0, $287 = 0, $289 = 0, $296 = 0, $297 = 0, $298 = 0, $35 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $68 = 0, $69 = 0, $78 = 0, $83 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, label = 0;
 $0 = $p + $psize | 0;
 $2 = HEAP32[$p + 4 >> 2] | 0;
 do if (!($2 & 1)) {
  $5 = HEAP32[$p >> 2] | 0;
  if (!($2 & 3)) return;
  $9 = $p + (0 - $5) | 0;
  $10 = $5 + $psize | 0;
  $11 = HEAP32[1804] | 0;
  if ($9 >>> 0 < $11 >>> 0) _abort();
  if (($9 | 0) == (HEAP32[1805] | 0)) {
   $99 = $0 + 4 | 0;
   $100 = HEAP32[$99 >> 2] | 0;
   if (($100 & 3 | 0) != 3) {
    $$1 = $9;
    $$14 = $10;
    break;
   }
   HEAP32[1802] = $10;
   HEAP32[$99 >> 2] = $100 & -2;
   HEAP32[$9 + 4 >> 2] = $10 | 1;
   HEAP32[$9 + $10 >> 2] = $10;
   return;
  }
  $15 = $5 >>> 3;
  if ($5 >>> 0 < 256) {
   $18 = HEAP32[$9 + 8 >> 2] | 0;
   $20 = HEAP32[$9 + 12 >> 2] | 0;
   $22 = 7240 + ($15 << 1 << 2) | 0;
   if (($18 | 0) != ($22 | 0)) {
    if ($18 >>> 0 < $11 >>> 0) _abort();
    if ((HEAP32[$18 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($20 | 0) == ($18 | 0)) {
    HEAP32[1800] = HEAP32[1800] & ~(1 << $15);
    $$1 = $9;
    $$14 = $10;
    break;
   }
   if (($20 | 0) == ($22 | 0)) $$pre$phi24Z2D = $20 + 8 | 0; else {
    if ($20 >>> 0 < $11 >>> 0) _abort();
    $35 = $20 + 8 | 0;
    if ((HEAP32[$35 >> 2] | 0) == ($9 | 0)) $$pre$phi24Z2D = $35; else _abort();
   }
   HEAP32[$18 + 12 >> 2] = $20;
   HEAP32[$$pre$phi24Z2D >> 2] = $18;
   $$1 = $9;
   $$14 = $10;
   break;
  }
  $40 = HEAP32[$9 + 24 >> 2] | 0;
  $42 = HEAP32[$9 + 12 >> 2] | 0;
  do if (($42 | 0) == ($9 | 0)) {
   $53 = $9 + 16 | 0;
   $54 = $53 + 4 | 0;
   $55 = HEAP32[$54 >> 2] | 0;
   if (!$55) {
    $57 = HEAP32[$53 >> 2] | 0;
    if (!$57) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $57;
     $RP$1 = $53;
    }
   } else {
    $R$1 = $55;
    $RP$1 = $54;
   }
   while (1) {
    $59 = $R$1 + 20 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    if ($60) {
     $R$1 = $60;
     $RP$1 = $59;
     continue;
    }
    $62 = $R$1 + 16 | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    if (!$63) {
     $R$1$lcssa = $R$1;
     $RP$1$lcssa = $RP$1;
     break;
    } else {
     $R$1 = $63;
     $RP$1 = $62;
    }
   }
   if ($RP$1$lcssa >>> 0 < $11 >>> 0) _abort(); else {
    HEAP32[$RP$1$lcssa >> 2] = 0;
    $R$3 = $R$1$lcssa;
    break;
   }
  } else {
   $45 = HEAP32[$9 + 8 >> 2] | 0;
   if ($45 >>> 0 < $11 >>> 0) _abort();
   $47 = $45 + 12 | 0;
   if ((HEAP32[$47 >> 2] | 0) != ($9 | 0)) _abort();
   $50 = $42 + 8 | 0;
   if ((HEAP32[$50 >> 2] | 0) == ($9 | 0)) {
    HEAP32[$47 >> 2] = $42;
    HEAP32[$50 >> 2] = $45;
    $R$3 = $42;
    break;
   } else _abort();
  } while (0);
  if (!$40) {
   $$1 = $9;
   $$14 = $10;
  } else {
   $68 = HEAP32[$9 + 28 >> 2] | 0;
   $69 = 7504 + ($68 << 2) | 0;
   if (($9 | 0) == (HEAP32[$69 >> 2] | 0)) {
    HEAP32[$69 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[1801] = HEAP32[1801] & ~(1 << $68);
     $$1 = $9;
     $$14 = $10;
     break;
    }
   } else {
    if ($40 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort();
    $78 = $40 + 16 | 0;
    if ((HEAP32[$78 >> 2] | 0) == ($9 | 0)) HEAP32[$78 >> 2] = $R$3; else HEAP32[$40 + 20 >> 2] = $R$3;
    if (!$R$3) {
     $$1 = $9;
     $$14 = $10;
     break;
    }
   }
   $83 = HEAP32[1804] | 0;
   if ($R$3 >>> 0 < $83 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $40;
   $86 = $9 + 16 | 0;
   $87 = HEAP32[$86 >> 2] | 0;
   do if ($87) if ($87 >>> 0 < $83 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $87;
    HEAP32[$87 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $93 = HEAP32[$86 + 4 >> 2] | 0;
   if (!$93) {
    $$1 = $9;
    $$14 = $10;
   } else if ($93 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $93;
    HEAP32[$93 + 24 >> 2] = $R$3;
    $$1 = $9;
    $$14 = $10;
    break;
   }
  }
 } else {
  $$1 = $p;
  $$14 = $psize;
 } while (0);
 $107 = HEAP32[1804] | 0;
 if ($0 >>> 0 < $107 >>> 0) _abort();
 $109 = $0 + 4 | 0;
 $110 = HEAP32[$109 >> 2] | 0;
 if (!($110 & 2)) {
  if (($0 | 0) == (HEAP32[1806] | 0)) {
   $116 = (HEAP32[1803] | 0) + $$14 | 0;
   HEAP32[1803] = $116;
   HEAP32[1806] = $$1;
   HEAP32[$$1 + 4 >> 2] = $116 | 1;
   if (($$1 | 0) != (HEAP32[1805] | 0)) return;
   HEAP32[1805] = 0;
   HEAP32[1802] = 0;
   return;
  }
  if (($0 | 0) == (HEAP32[1805] | 0)) {
   $124 = (HEAP32[1802] | 0) + $$14 | 0;
   HEAP32[1802] = $124;
   HEAP32[1805] = $$1;
   HEAP32[$$1 + 4 >> 2] = $124 | 1;
   HEAP32[$$1 + $124 >> 2] = $124;
   return;
  }
  $129 = ($110 & -8) + $$14 | 0;
  $130 = $110 >>> 3;
  do if ($110 >>> 0 < 256) {
   $133 = HEAP32[$0 + 8 >> 2] | 0;
   $135 = HEAP32[$0 + 12 >> 2] | 0;
   $137 = 7240 + ($130 << 1 << 2) | 0;
   if (($133 | 0) != ($137 | 0)) {
    if ($133 >>> 0 < $107 >>> 0) _abort();
    if ((HEAP32[$133 + 12 >> 2] | 0) != ($0 | 0)) _abort();
   }
   if (($135 | 0) == ($133 | 0)) {
    HEAP32[1800] = HEAP32[1800] & ~(1 << $130);
    break;
   }
   if (($135 | 0) == ($137 | 0)) $$pre$phi22Z2D = $135 + 8 | 0; else {
    if ($135 >>> 0 < $107 >>> 0) _abort();
    $150 = $135 + 8 | 0;
    if ((HEAP32[$150 >> 2] | 0) == ($0 | 0)) $$pre$phi22Z2D = $150; else _abort();
   }
   HEAP32[$133 + 12 >> 2] = $135;
   HEAP32[$$pre$phi22Z2D >> 2] = $133;
  } else {
   $155 = HEAP32[$0 + 24 >> 2] | 0;
   $157 = HEAP32[$0 + 12 >> 2] | 0;
   do if (($157 | 0) == ($0 | 0)) {
    $168 = $0 + 16 | 0;
    $169 = $168 + 4 | 0;
    $170 = HEAP32[$169 >> 2] | 0;
    if (!$170) {
     $172 = HEAP32[$168 >> 2] | 0;
     if (!$172) {
      $R7$3 = 0;
      break;
     } else {
      $R7$1 = $172;
      $RP9$1 = $168;
     }
    } else {
     $R7$1 = $170;
     $RP9$1 = $169;
    }
    while (1) {
     $174 = $R7$1 + 20 | 0;
     $175 = HEAP32[$174 >> 2] | 0;
     if ($175) {
      $R7$1 = $175;
      $RP9$1 = $174;
      continue;
     }
     $177 = $R7$1 + 16 | 0;
     $178 = HEAP32[$177 >> 2] | 0;
     if (!$178) {
      $R7$1$lcssa = $R7$1;
      $RP9$1$lcssa = $RP9$1;
      break;
     } else {
      $R7$1 = $178;
      $RP9$1 = $177;
     }
    }
    if ($RP9$1$lcssa >>> 0 < $107 >>> 0) _abort(); else {
     HEAP32[$RP9$1$lcssa >> 2] = 0;
     $R7$3 = $R7$1$lcssa;
     break;
    }
   } else {
    $160 = HEAP32[$0 + 8 >> 2] | 0;
    if ($160 >>> 0 < $107 >>> 0) _abort();
    $162 = $160 + 12 | 0;
    if ((HEAP32[$162 >> 2] | 0) != ($0 | 0)) _abort();
    $165 = $157 + 8 | 0;
    if ((HEAP32[$165 >> 2] | 0) == ($0 | 0)) {
     HEAP32[$162 >> 2] = $157;
     HEAP32[$165 >> 2] = $160;
     $R7$3 = $157;
     break;
    } else _abort();
   } while (0);
   if ($155) {
    $183 = HEAP32[$0 + 28 >> 2] | 0;
    $184 = 7504 + ($183 << 2) | 0;
    if (($0 | 0) == (HEAP32[$184 >> 2] | 0)) {
     HEAP32[$184 >> 2] = $R7$3;
     if (!$R7$3) {
      HEAP32[1801] = HEAP32[1801] & ~(1 << $183);
      break;
     }
    } else {
     if ($155 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort();
     $193 = $155 + 16 | 0;
     if ((HEAP32[$193 >> 2] | 0) == ($0 | 0)) HEAP32[$193 >> 2] = $R7$3; else HEAP32[$155 + 20 >> 2] = $R7$3;
     if (!$R7$3) break;
    }
    $198 = HEAP32[1804] | 0;
    if ($R7$3 >>> 0 < $198 >>> 0) _abort();
    HEAP32[$R7$3 + 24 >> 2] = $155;
    $201 = $0 + 16 | 0;
    $202 = HEAP32[$201 >> 2] | 0;
    do if ($202) if ($202 >>> 0 < $198 >>> 0) _abort(); else {
     HEAP32[$R7$3 + 16 >> 2] = $202;
     HEAP32[$202 + 24 >> 2] = $R7$3;
     break;
    } while (0);
    $208 = HEAP32[$201 + 4 >> 2] | 0;
    if ($208) if ($208 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
     HEAP32[$R7$3 + 20 >> 2] = $208;
     HEAP32[$208 + 24 >> 2] = $R7$3;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $129 | 1;
  HEAP32[$$1 + $129 >> 2] = $129;
  if (($$1 | 0) == (HEAP32[1805] | 0)) {
   HEAP32[1802] = $129;
   return;
  } else $$2 = $129;
 } else {
  HEAP32[$109 >> 2] = $110 & -2;
  HEAP32[$$1 + 4 >> 2] = $$14 | 1;
  HEAP32[$$1 + $$14 >> 2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $226 = 7240 + ($223 << 1 << 2) | 0;
  $227 = HEAP32[1800] | 0;
  $228 = 1 << $223;
  if (!($227 & $228)) {
   HEAP32[1800] = $227 | $228;
   $$pre$phiZ2D = $226 + 8 | 0;
   $F17$0 = $226;
  } else {
   $232 = $226 + 8 | 0;
   $233 = HEAP32[$232 >> 2] | 0;
   if ($233 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $232;
    $F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$F17$0 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $F17$0;
  HEAP32[$$1 + 12 >> 2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 if (!$239) $I20$0 = 0; else if ($$2 >>> 0 > 16777215) $I20$0 = 31; else {
  $244 = ($239 + 1048320 | 0) >>> 16 & 8;
  $245 = $239 << $244;
  $248 = ($245 + 520192 | 0) >>> 16 & 4;
  $250 = $245 << $248;
  $253 = ($250 + 245760 | 0) >>> 16 & 2;
  $258 = 14 - ($248 | $244 | $253) + ($250 << $253 >>> 15) | 0;
  $I20$0 = $$2 >>> ($258 + 7 | 0) & 1 | $258 << 1;
 }
 $264 = 7504 + ($I20$0 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $I20$0;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $268 = HEAP32[1801] | 0;
 $269 = 1 << $I20$0;
 if (!($268 & $269)) {
  HEAP32[1801] = $268 | $269;
  HEAP32[$264 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $264;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 }
 $K21$0 = $$2 << (($I20$0 | 0) == 31 ? 0 : 25 - ($I20$0 >>> 1) | 0);
 $T$0 = HEAP32[$264 >> 2] | 0;
 while (1) {
  if ((HEAP32[$T$0 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $287 = $T$0 + 16 + ($K21$0 >>> 31 << 2) | 0;
  $289 = HEAP32[$287 >> 2] | 0;
  if (!$289) {
   $$lcssa = $287;
   $T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $K21$0 << 1;
   $T$0 = $289;
  }
 }
 if ((label | 0) == 124) {
  if ($$lcssa >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort();
  HEAP32[$$lcssa >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $T$0$lcssa30;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 } else if ((label | 0) == 127) {
  $296 = $T$0$lcssa + 8 | 0;
  $297 = HEAP32[$296 >> 2] | 0;
  $298 = HEAP32[1804] | 0;
  if (!($297 >>> 0 >= $298 >>> 0 & $T$0$lcssa >>> 0 >= $298 >>> 0)) _abort();
  HEAP32[$297 + 12 >> 2] = $$1;
  HEAP32[$296 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $297;
  HEAP32[$$1 + 12 >> 2] = $T$0$lcssa;
  HEAP32[$$1 + 24 >> 2] = 0;
  return;
 }
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $$byval_copy$26 = 0, $$byval_copy$30 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $58 = 0, $59 = 0, $6 = 0, $64 = 0, $67 = 0, $7 = 0, $8 = 0, $83 = 0, $86 = 0, $9 = 0, $90 = 0, $95 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $$byval_copy$30 = sp + 132 | 0;
 $$byval_copy$26 = sp + 116 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 124 | 0;
 $3 = sp + 120 | 0;
 $4 = sp + 112 | 0;
 $5 = sp + 108 | 0;
 $6 = sp + 104 | 0;
 $7 = sp + 100 | 0;
 $8 = sp + 96 | 0;
 $9 = sp + 92 | 0;
 $10 = sp + 88 | 0;
 $11 = sp + 84 | 0;
 $12 = sp + 80 | 0;
 $13 = sp + 76 | 0;
 $14 = sp + 72 | 0;
 $15 = sp + 68 | 0;
 $16 = sp + 64 | 0;
 $17 = sp + 60 | 0;
 $18 = sp + 56 | 0;
 $19 = sp + 52 | 0;
 $20 = sp + 48 | 0;
 $21 = sp + 44 | 0;
 $22 = sp + 40 | 0;
 $23 = sp + 36 | 0;
 $24 = sp + 32 | 0;
 $25 = sp + 28 | 0;
 $26 = sp + 24 | 0;
 $27 = sp + 20 | 0;
 $28 = sp + 16 | 0;
 $29 = sp + 12 | 0;
 $30 = sp + 8 | 0;
 $31 = sp + 4 | 0;
 $32 = sp;
 HEAP32[$__err >> 2] = 0;
 $33 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$1 >> 2] = $33;
 $34 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 10384) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($33) | 0;
 do switch ($__fmt << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[$2 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$2 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[$3 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$3 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 99:
  {
   $40 = $this + 8 | 0;
   $44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 12 >> 2] & 127]($40) | 0;
   HEAP32[$4 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$5 >> 2] = HEAP32[$__e >> 2];
   $47 = HEAP8[$44 >> 0] | 0;
   $49 = ($47 & 1) == 0;
   $52 = $44 + 4 | 0;
   $53 = $49 ? $52 : HEAP32[$44 + 8 >> 2] | 0;
   $58 = $53 + (($49 ? ($47 & 255) >>> 1 : HEAP32[$52 >> 2] | 0) << 2) | 0;
   HEAP32[$$byval_copy$26 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$5 >> 2];
   $59 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy$26, $$byval_copy$30, $__iob, $__err, $__tm, $53, $58) | 0;
   HEAP32[$__b >> 2] = $59;
   label = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[$6 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$6 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 12 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 68:
  {
   HEAP32[$7 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$8 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$26 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$8 >> 2];
   $64 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy$26, $$byval_copy$30, $__iob, $__err, $__tm, 10992, 11024) | 0;
   HEAP32[$__b >> 2] = $64;
   label = 26;
   break;
  }
 case 70:
  {
   HEAP32[$9 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$10 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$26 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$10 >> 2];
   $67 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy$26, $$byval_copy$30, $__iob, $__err, $__tm, 11024, 11056) | 0;
   HEAP32[$__b >> 2] = $67;
   label = 26;
   break;
  }
 case 72:
  {
   HEAP32[$11 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$11 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 73:
  {
   HEAP32[$12 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$12 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 106:
  {
   HEAP32[$13 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$13 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 28 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 109:
  {
   HEAP32[$14 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$14 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 77:
  {
   HEAP32[$15 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$15 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 4 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[$16 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$16 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 112:
  {
   HEAP32[$17 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$17 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 114:
  {
   HEAP32[$18 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$19 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$26 >> 2] = HEAP32[$18 >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$19 >> 2];
   $83 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy$26, $$byval_copy$30, $__iob, $__err, $__tm, 11056, 11100) | 0;
   HEAP32[$__b >> 2] = $83;
   label = 26;
   break;
  }
 case 82:
  {
   HEAP32[$20 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$21 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$26 >> 2] = HEAP32[$20 >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$21 >> 2];
   $86 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy$26, $$byval_copy$30, $__iob, $__err, $__tm, 11100, 11120) | 0;
   HEAP32[$__b >> 2] = $86;
   label = 26;
   break;
  }
 case 83:
  {
   HEAP32[$22 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$22 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 84:
  {
   HEAP32[$23 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$24 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$26 >> 2] = HEAP32[$23 >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$24 >> 2];
   $90 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy$26, $$byval_copy$30, $__iob, $__err, $__tm, 11120, 11152) | 0;
   HEAP32[$__b >> 2] = $90;
   label = 26;
   break;
  }
 case 119:
  {
   HEAP32[$25 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$25 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 120:
  {
   $95 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$26 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$27 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$26 >> 2] = HEAP32[$26 >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$27 >> 2];
   $$sroa$07$0 = FUNCTION_TABLE_iiiiiii[$95 & 127]($this, $$byval_copy$26, $$byval_copy$30, $__iob, $__err, $__tm) | 0;
   break;
  }
 case 88:
  {
   $99 = $this + 8 | 0;
   $103 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$99 >> 2] | 0) + 24 >> 2] & 127]($99) | 0;
   HEAP32[$28 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$29 >> 2] = HEAP32[$__e >> 2];
   $106 = HEAP8[$103 >> 0] | 0;
   $108 = ($106 & 1) == 0;
   $111 = $103 + 4 | 0;
   $112 = $108 ? $111 : HEAP32[$103 + 8 >> 2] | 0;
   $117 = $112 + (($108 ? ($106 & 255) >>> 1 : HEAP32[$111 >> 2] | 0) << 2) | 0;
   HEAP32[$$byval_copy$26 >> 2] = HEAP32[$28 >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$29 >> 2];
   $118 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy$26, $$byval_copy$30, $__iob, $__err, $__tm, $112, $117) | 0;
   HEAP32[$__b >> 2] = $118;
   label = 26;
   break;
  }
 case 121:
  {
   HEAP32[$30 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$30 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 89:
  {
   HEAP32[$31 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$31 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 37:
  {
   HEAP32[$32 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$32 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 default:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   label = 26;
  }
 } while (0);
 if ((label | 0) == 26) $$sroa$07$0 = HEAP32[$__b >> 2] | 0;
 STACKTOP = sp;
 return $$sroa$07$0 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $$byval_copy$26 = 0, $$byval_copy$30 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $113 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $65 = 0, $68 = 0, $7 = 0, $8 = 0, $84 = 0, $87 = 0, $9 = 0, $91 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $$byval_copy$30 = sp + 132 | 0;
 $$byval_copy$26 = sp + 116 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 124 | 0;
 $3 = sp + 120 | 0;
 $4 = sp + 112 | 0;
 $5 = sp + 108 | 0;
 $6 = sp + 104 | 0;
 $7 = sp + 100 | 0;
 $8 = sp + 96 | 0;
 $9 = sp + 92 | 0;
 $10 = sp + 88 | 0;
 $11 = sp + 84 | 0;
 $12 = sp + 80 | 0;
 $13 = sp + 76 | 0;
 $14 = sp + 72 | 0;
 $15 = sp + 68 | 0;
 $16 = sp + 64 | 0;
 $17 = sp + 60 | 0;
 $18 = sp + 56 | 0;
 $19 = sp + 52 | 0;
 $20 = sp + 48 | 0;
 $21 = sp + 44 | 0;
 $22 = sp + 40 | 0;
 $23 = sp + 36 | 0;
 $24 = sp + 32 | 0;
 $25 = sp + 28 | 0;
 $26 = sp + 24 | 0;
 $27 = sp + 20 | 0;
 $28 = sp + 16 | 0;
 $29 = sp + 12 | 0;
 $30 = sp + 8 | 0;
 $31 = sp + 4 | 0;
 $32 = sp;
 HEAP32[$__err >> 2] = 0;
 $33 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$1 >> 2] = $33;
 $34 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 10392) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($33) | 0;
 do switch ($__fmt << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[$2 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$2 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[$3 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$3 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 99:
  {
   $40 = $this + 8 | 0;
   $44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 12 >> 2] & 127]($40) | 0;
   HEAP32[$4 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$5 >> 2] = HEAP32[$__e >> 2];
   $47 = HEAP8[$44 >> 0] | 0;
   $49 = ($47 & 1) == 0;
   $53 = $49 ? $44 + 1 | 0 : HEAP32[$44 + 8 >> 2] | 0;
   $59 = $53 + ($49 ? ($47 & 255) >>> 1 : HEAP32[$44 + 4 >> 2] | 0) | 0;
   HEAP32[$$byval_copy$26 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$5 >> 2];
   $60 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy$26, $$byval_copy$30, $__iob, $__err, $__tm, $53, $59) | 0;
   HEAP32[$__b >> 2] = $60;
   label = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[$6 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$6 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 12 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 68:
  {
   HEAP32[$7 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$8 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$26 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$8 >> 2];
   $65 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy$26, $$byval_copy$30, $__iob, $__err, $__tm, 24241, 24249) | 0;
   HEAP32[$__b >> 2] = $65;
   label = 26;
   break;
  }
 case 70:
  {
   HEAP32[$9 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$10 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$26 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$10 >> 2];
   $68 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy$26, $$byval_copy$30, $__iob, $__err, $__tm, 24249, 24257) | 0;
   HEAP32[$__b >> 2] = $68;
   label = 26;
   break;
  }
 case 72:
  {
   HEAP32[$11 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$11 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 73:
  {
   HEAP32[$12 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$12 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 106:
  {
   HEAP32[$13 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$13 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 28 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 109:
  {
   HEAP32[$14 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$14 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 77:
  {
   HEAP32[$15 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$15 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 4 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[$16 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$16 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 112:
  {
   HEAP32[$17 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$17 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 114:
  {
   HEAP32[$18 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$19 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$26 >> 2] = HEAP32[$18 >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$19 >> 2];
   $84 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy$26, $$byval_copy$30, $__iob, $__err, $__tm, 24257, 24268) | 0;
   HEAP32[$__b >> 2] = $84;
   label = 26;
   break;
  }
 case 82:
  {
   HEAP32[$20 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$21 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$26 >> 2] = HEAP32[$20 >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$21 >> 2];
   $87 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy$26, $$byval_copy$30, $__iob, $__err, $__tm, 24268, 24273) | 0;
   HEAP32[$__b >> 2] = $87;
   label = 26;
   break;
  }
 case 83:
  {
   HEAP32[$22 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$22 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 84:
  {
   HEAP32[$23 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$24 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$26 >> 2] = HEAP32[$23 >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$24 >> 2];
   $91 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy$26, $$byval_copy$30, $__iob, $__err, $__tm, 24273, 24281) | 0;
   HEAP32[$__b >> 2] = $91;
   label = 26;
   break;
  }
 case 119:
  {
   HEAP32[$25 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$25 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 120:
  {
   $96 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$26 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$27 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$26 >> 2] = HEAP32[$26 >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$27 >> 2];
   $$sroa$07$0 = FUNCTION_TABLE_iiiiiii[$96 & 127]($this, $$byval_copy$26, $$byval_copy$30, $__iob, $__err, $__tm) | 0;
   break;
  }
 case 88:
  {
   $100 = $this + 8 | 0;
   $104 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$100 >> 2] | 0) + 24 >> 2] & 127]($100) | 0;
   HEAP32[$28 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$29 >> 2] = HEAP32[$__e >> 2];
   $107 = HEAP8[$104 >> 0] | 0;
   $109 = ($107 & 1) == 0;
   $113 = $109 ? $104 + 1 | 0 : HEAP32[$104 + 8 >> 2] | 0;
   $119 = $113 + ($109 ? ($107 & 255) >>> 1 : HEAP32[$104 + 4 >> 2] | 0) | 0;
   HEAP32[$$byval_copy$26 >> 2] = HEAP32[$28 >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$29 >> 2];
   $120 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy$26, $$byval_copy$30, $__iob, $__err, $__tm, $113, $119) | 0;
   HEAP32[$__b >> 2] = $120;
   label = 26;
   break;
  }
 case 121:
  {
   HEAP32[$30 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$30 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 89:
  {
   HEAP32[$31 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$31 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 case 37:
  {
   HEAP32[$32 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy$30 >> 2] = HEAP32[$32 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $$byval_copy$30, $__err, $34);
   label = 26;
   break;
  }
 default:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   label = 26;
  }
 } while (0);
 if ((label | 0) == 26) $$sroa$07$0 = HEAP32[$__b >> 2] | 0;
 STACKTOP = sp;
 return $$sroa$07$0 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$12 = 0, $$0$i$i$1$i$i$27 = 0, $$0$i$i$18 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$21 = 0, $$0$i$i$i$i$6 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy$1 = 0, $$lcssa114 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa118$lcssa = 0, $$lcssa118$lcssa121 = 0, $$lcssa119 = 0, $$lcssa120 = 0, $$lcssa123 = 0, $$lcssa125 = 0, $$lcssa128 = 0, $$lcssa129 = 0, $$ph = 0, $$pre = 0, $$pre$i$3$i$i$14 = 0, $$pre$i$3$i$i$1445 = 0, $$pre$i$3$i$i$1446 = 0, $$pre$i$i$i$23 = 0, $$pre$i$i$i$8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $114 = 0, $12 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $135 = 0, $142 = 0, $152 = 0, $162 = 0, $165 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $2 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $4 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $75 = 0, $8 = 0, $85 = 0, $88 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy$1 = sp + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 $3 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $3;
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 10384) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($3) | 0;
 HEAP32[$__err >> 2] = 0;
 $$0$ph = $__fmtb;
 $$pre = 0;
 L1 : while (1) {
  $5 = ($$0$ph | 0) != ($__fmte | 0);
  $6 = $$pre;
  while (1) {
   $8 = HEAP32[$__b >> 2] | 0;
   if (!($5 & ($6 | 0) == 0)) {
    $$pre$i$i$i$23 = $8;
    break L1;
   }
   $10 = $8;
   if (!$8) {
    $122 = 0;
    $178 = $10;
    $179 = 1;
   } else {
    $12 = HEAP32[$8 + 12 >> 2] | 0;
    if (($12 | 0) == (HEAP32[$8 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] & 127]($8) | 0; else $$0$i$i$i$i = HEAP32[$12 >> 2] | 0;
    if (($$0$i$i$i$i | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $122 = 0;
     $178 = 0;
     $179 = 1;
    } else {
     $122 = $8;
     $178 = $10;
     $179 = 0;
    }
   }
   $22 = HEAP32[$__e >> 2] | 0;
   $24 = $22;
   do if (!$22) {
    $$ph = $24;
    label = 16;
   } else {
    $26 = HEAP32[$22 + 12 >> 2] | 0;
    if (($26 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 127]($22) | 0; else $$0$i$i$1$i$i = HEAP32[$26 >> 2] | 0;
    if (($$0$i$i$1$i$i | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     $$ph = 0;
     label = 16;
     break;
    } else if ($179) {
     $180 = $22;
     $181 = $24;
     break;
    } else {
     $$lcssa117 = $122;
     label = 18;
     break L1;
    }
   } while (0);
   if ((label | 0) == 16) {
    label = 0;
    if ($179) {
     $$lcssa117 = $122;
     label = 18;
     break L1;
    } else {
     $180 = 0;
     $181 = $$ph;
    }
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 127]($4, HEAP32[$$0$ph >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
    $$lcssa114 = $178;
    $$lcssa118 = $122;
    $$lcssa125 = $181;
    label = 20;
    break;
   }
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 127]($4, 8192, HEAP32[$$0$ph >> 2] | 0) | 0) {
    $$lcssa119 = $122;
    $$lcssa123 = $180;
    label = 28;
    break;
   }
   $121 = $122 + 12 | 0;
   $123 = HEAP32[$121 >> 2] | 0;
   $124 = $122 + 16 | 0;
   if (($123 | 0) == (HEAP32[$124 >> 2] | 0)) $$0$i$i$18 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$122 >> 2] | 0) + 36 >> 2] & 127]($122) | 0; else $$0$i$i$18 = HEAP32[$123 >> 2] | 0;
   $135 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] & 63]($4, $$0$i$i$18) | 0;
   if (($135 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] & 63]($4, HEAP32[$$0$ph >> 2] | 0) | 0)) {
    $$lcssa120 = $122;
    $$lcssa128 = $121;
    $$lcssa129 = $124;
    label = 57;
    break;
   }
   HEAP32[$__err >> 2] = 4;
   $6 = 4;
  }
  L33 : do if ((label | 0) == 20) {
   label = 0;
   $42 = $$0$ph + 4 | 0;
   if (($42 | 0) == ($__fmte | 0)) {
    $$lcssa118$lcssa = $$lcssa118;
    label = 21;
    break L1;
   }
   $48 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 127]($4, HEAP32[$42 >> 2] | 0, 0) | 0;
   switch ($48 << 24 >> 24) {
   case 48:
   case 69:
    {
     $49 = $$0$ph + 8 | 0;
     if (($49 | 0) == ($__fmte | 0)) {
      $$lcssa118$lcssa121 = $$lcssa118;
      label = 26;
      break L1;
     }
     $61 = $42;
     $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 127]($4, HEAP32[$49 >> 2] | 0, 0) | 0;
     $__opt$0 = $48;
     break;
    }
   default:
    {
     $61 = $$0$ph;
     $__cmd$0 = $48;
     $__opt$0 = 0;
    }
   }
   $58 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[$1 >> 2] = $$lcssa114;
   HEAP32[$2 >> 2] = $$lcssa125;
   HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy$1 >> 2] = HEAP32[$2 >> 2];
   $59 = FUNCTION_TABLE_iiiiiiiii[$58 & 63]($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__tm, $__cmd$0, $__opt$0) | 0;
   HEAP32[$__b >> 2] = $59;
   $$0$ph$be = $61 + 8 | 0;
  } else if ((label | 0) == 28) {
   label = 0;
   $$0$pn = $$0$ph;
   while (1) {
    $$3 = $$0$pn + 4 | 0;
    if (($$3 | 0) == ($__fmte | 0)) {
     $$3$lcssa = $__fmte;
     break;
    }
    if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 127]($4, 8192, HEAP32[$$3 >> 2] | 0) | 0) $$0$pn = $$3; else {
     $$3$lcssa = $$3;
     break;
    }
   }
   $$pre$i$3$i$i$14 = $$lcssa123;
   $$pre$i$i$i$8 = $$lcssa119;
   $85 = $$lcssa123;
   while (1) {
    if (!$$pre$i$i$i$8) {
     $100 = 0;
     $98 = 1;
    } else {
     $75 = HEAP32[$$pre$i$i$i$8 + 12 >> 2] | 0;
     if (($75 | 0) == (HEAP32[$$pre$i$i$i$8 + 16 >> 2] | 0)) $$0$i$i$i$i$6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$8 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$8) | 0; else $$0$i$i$i$i$6 = HEAP32[$75 >> 2] | 0;
     if (($$0$i$i$i$i$6 | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $100 = 0;
      $98 = 1;
     } else {
      $100 = $$pre$i$i$i$8;
      $98 = 0;
     }
    }
    do if (!$85) {
     $$pre$i$3$i$i$1446 = $$pre$i$3$i$i$14;
     label = 44;
    } else {
     $88 = HEAP32[$85 + 12 >> 2] | 0;
     if (($88 | 0) == (HEAP32[$85 + 16 >> 2] | 0)) $$0$i$i$1$i$i$12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$85 >> 2] | 0) + 36 >> 2] & 127]($85) | 0; else $$0$i$i$1$i$i$12 = HEAP32[$88 >> 2] | 0;
     if (($$0$i$i$1$i$i$12 | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      $$pre$i$3$i$i$1446 = 0;
      label = 44;
      break;
     } else if ($98 ^ ($$pre$i$3$i$i$14 | 0) == 0) {
      $$pre$i$3$i$i$1445 = $$pre$i$3$i$i$14;
      $182 = $$pre$i$3$i$i$14;
      break;
     } else {
      $$0$ph$be = $$3$lcssa;
      break L33;
     }
    } while (0);
    if ((label | 0) == 44) {
     label = 0;
     if ($98) {
      $$0$ph$be = $$3$lcssa;
      break L33;
     } else {
      $$pre$i$3$i$i$1445 = $$pre$i$3$i$i$1446;
      $182 = 0;
     }
    }
    $99 = $100 + 12 | 0;
    $101 = HEAP32[$99 >> 2] | 0;
    $102 = $100 + 16 | 0;
    if (($101 | 0) == (HEAP32[$102 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$100 >> 2] | 0) + 36 >> 2] & 127]($100) | 0; else $$0$i$i = HEAP32[$101 >> 2] | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 127]($4, 8192, $$0$i$i) | 0)) {
     $$0$ph$be = $$3$lcssa;
     break L33;
    }
    $114 = HEAP32[$99 >> 2] | 0;
    if (($114 | 0) == (HEAP32[$102 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$100 >> 2] | 0) + 40 >> 2] & 127]($100) | 0;
     $$pre$i$3$i$i$14 = $$pre$i$3$i$i$1445;
     $$pre$i$i$i$8 = $100;
     $85 = $182;
     continue;
    } else {
     HEAP32[$99 >> 2] = $114 + 4;
     $$pre$i$3$i$i$14 = $$pre$i$3$i$i$1445;
     $$pre$i$i$i$8 = $100;
     $85 = $182;
     continue;
    }
   }
  } else if ((label | 0) == 57) {
   label = 0;
   $142 = HEAP32[$$lcssa128 >> 2] | 0;
   if (($142 | 0) == (HEAP32[$$lcssa129 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa120 >> 2] | 0) + 40 >> 2] & 127]($$lcssa120) | 0; else HEAP32[$$lcssa128 >> 2] = $142 + 4;
   $$0$ph$be = $$0$ph + 4 | 0;
  } while (0);
  $$0$ph = $$0$ph$be;
  $$pre = HEAP32[$__err >> 2] | 0;
 }
 if ((label | 0) == 18) {
  HEAP32[$__err >> 2] = 4;
  $$pre$i$i$i$23 = $$lcssa117;
 } else if ((label | 0) == 21) {
  HEAP32[$__err >> 2] = 4;
  $$pre$i$i$i$23 = $$lcssa118$lcssa;
 } else if ((label | 0) == 26) {
  HEAP32[$__err >> 2] = 4;
  $$pre$i$i$i$23 = $$lcssa118$lcssa121;
 }
 if (!$$pre$i$i$i$23) {
  $177 = 0;
  $183 = 1;
 } else {
  $152 = HEAP32[$$pre$i$i$i$23 + 12 >> 2] | 0;
  if (($152 | 0) == (HEAP32[$$pre$i$i$i$23 + 16 >> 2] | 0)) $$0$i$i$i$i$21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$23 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$23) | 0; else $$0$i$i$i$i$21 = HEAP32[$152 >> 2] | 0;
  if (($$0$i$i$i$i$21 | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $177 = 0;
   $183 = 1;
  } else {
   $177 = $$pre$i$i$i$23;
   $183 = 0;
  }
 }
 $162 = HEAP32[$__e >> 2] | 0;
 do if (!$162) label = 75; else {
  $165 = HEAP32[$162 + 12 >> 2] | 0;
  if (($165 | 0) == (HEAP32[$162 + 16 >> 2] | 0)) $$0$i$i$1$i$i$27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$162 >> 2] | 0) + 36 >> 2] & 127]($162) | 0; else $$0$i$i$1$i$i$27 = HEAP32[$165 >> 2] | 0;
  if (($$0$i$i$1$i$i$27 | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 75;
   break;
  } else if ($183) break; else {
   label = 77;
   break;
  }
 } while (0);
 if ((label | 0) == 75) if ($183) label = 77;
 if ((label | 0) == 77) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 STACKTOP = sp;
 return $177 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$0$i$i = 0, $$0$i$i$27 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy$1 = 0, $$lcssa112 = 0, $$lcssa115 = 0, $$lcssa116 = 0, $$lcssa116$lcssa = 0, $$lcssa116$lcssa119 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa121 = 0, $$lcssa123 = 0, $$lcssa126 = 0, $$lcssa127 = 0, $$lcssa128 = 0, $$pre = 0, $$pre$i$2$i$i$22 = 0, $$pre$i$2$i$i$2240 = 0, $$pre$i$2$i$i$2241 = 0, $$pre$i$i$i$18 = 0, $$pre$i$i$i$9 = 0, $0 = 0, $1 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $121 = 0, $128 = 0, $129 = 0, $130 = 0, $143 = 0, $150 = 0, $169 = 0, $170 = 0, $171 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $3 = 0, $4 = 0, $43 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $65 = 0, $7 = 0, $71 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $__cmd$0 = 0, $__opt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy$1 = sp + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 $3 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $3;
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 10392) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($3) | 0;
 HEAP32[$__err >> 2] = 0;
 $5 = $4 + 8 | 0;
 $$0$ph = $__fmtb;
 $$pre = 0;
 L1 : while (1) {
  $6 = ($$0$ph | 0) != ($__fmte | 0);
  $7 = $$pre;
  while (1) {
   $9 = HEAP32[$__b >> 2] | 0;
   if (!($6 & ($7 | 0) == 0)) {
    $$pre$i$i$i$9 = $9;
    break L1;
   }
   $11 = $9;
   if (!$9) {
    $185 = $11;
    $22 = 0;
   } else if ((HEAP32[$9 + 12 >> 2] | 0) == (HEAP32[$9 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $185 = 0;
    $22 = 0;
   } else {
    $185 = $11;
    $22 = $9;
   } else {
    $185 = $11;
    $22 = $9;
   }
   $23 = ($22 | 0) == 0;
   $24 = HEAP32[$__e >> 2] | 0;
   $26 = $24;
   do if (!$24) {
    $186 = $26;
    label = 13;
   } else {
    if ((HEAP32[$24 + 12 >> 2] | 0) == (HEAP32[$24 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 127]($24) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     $186 = 0;
     label = 13;
     break;
    }
    if ($23) {
     $187 = $24;
     $188 = $26;
    } else {
     $$lcssa115 = $22;
     label = 14;
     break L1;
    }
   } while (0);
   if ((label | 0) == 13) {
    label = 0;
    if ($23) {
     $$lcssa115 = $22;
     label = 14;
     break L1;
    } else {
     $187 = 0;
     $188 = $186;
    }
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4, HEAP8[$$0$ph >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
    $$lcssa112 = $185;
    $$lcssa116 = $22;
    $$lcssa123 = $188;
    label = 16;
    break;
   }
   $63 = HEAP8[$$0$ph >> 0] | 0;
   if ($63 << 24 >> 24 > -1) {
    $65 = HEAP32[$5 >> 2] | 0;
    if (HEAP16[$65 + ($63 << 24 >> 24 << 1) >> 1] & 8192) {
     $$lcssa117 = $22;
     $$lcssa121 = $187;
     $$lcssa126 = $65;
     label = 25;
     break;
    }
   }
   $128 = $22 + 12 | 0;
   $129 = HEAP32[$128 >> 2] | 0;
   $130 = $22 + 16 | 0;
   if (($129 | 0) == (HEAP32[$130 >> 2] | 0)) $$0$i$i$27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 127]($22) | 0; else $$0$i$i$27 = HEAPU8[$129 >> 0] | 0;
   $143 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 63]($4, $$0$i$i$27 & 255) | 0;
   if ($143 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 63]($4, HEAP8[$$0$ph >> 0] | 0) | 0) << 24 >> 24) {
    $$lcssa118 = $22;
    $$lcssa127 = $128;
    $$lcssa128 = $130;
    label = 53;
    break;
   }
   HEAP32[$__err >> 2] = 4;
   $7 = 4;
  }
  L29 : do if ((label | 0) == 16) {
   label = 0;
   $43 = $$0$ph + 1 | 0;
   if (($43 | 0) == ($__fmte | 0)) {
    $$lcssa116$lcssa = $$lcssa116;
    label = 17;
    break L1;
   }
   $49 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4, HEAP8[$43 >> 0] | 0, 0) | 0;
   switch ($49 << 24 >> 24) {
   case 48:
   case 69:
    {
     $50 = $$0$ph + 2 | 0;
     if (($50 | 0) == ($__fmte | 0)) {
      $$lcssa116$lcssa119 = $$lcssa116;
      label = 22;
      break L1;
     }
     $62 = $43;
     $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4, HEAP8[$50 >> 0] | 0, 0) | 0;
     $__opt$0 = $49;
     break;
    }
   default:
    {
     $62 = $$0$ph;
     $__cmd$0 = $49;
     $__opt$0 = 0;
    }
   }
   $59 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[$1 >> 2] = $$lcssa112;
   HEAP32[$2 >> 2] = $$lcssa123;
   HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy$1 >> 2] = HEAP32[$2 >> 2];
   $60 = FUNCTION_TABLE_iiiiiiiii[$59 & 63]($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__tm, $__cmd$0, $__opt$0) | 0;
   HEAP32[$__b >> 2] = $60;
   $$0$ph$be = $62 + 2 | 0;
  } else if ((label | 0) == 25) {
   label = 0;
   $$0$pn = $$0$ph;
   while (1) {
    $$3 = $$0$pn + 1 | 0;
    if (($$3 | 0) == ($__fmte | 0)) {
     $$3$lcssa = $__fmte;
     break;
    }
    $71 = HEAP8[$$3 >> 0] | 0;
    if ($71 << 24 >> 24 <= -1) {
     $$3$lcssa = $$3;
     break;
    }
    if (!(HEAP16[$$lcssa126 + ($71 << 24 >> 24 << 1) >> 1] & 8192)) {
     $$3$lcssa = $$3;
     break;
    } else $$0$pn = $$3;
   }
   $$pre$i$2$i$i$22 = $$lcssa121;
   $$pre$i$i$i$18 = $$lcssa117;
   $90 = $$lcssa121;
   while (1) {
    if (!$$pre$i$i$i$18) $88 = 0; else if ((HEAP32[$$pre$i$i$i$18 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$18 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$18 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$18) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $88 = 0;
    } else $88 = $$pre$i$i$i$18; else $88 = $$pre$i$i$i$18;
    $89 = ($88 | 0) == 0;
    do if (!$90) {
     $$pre$i$2$i$i$2241 = $$pre$i$2$i$i$22;
     label = 39;
    } else {
     if ((HEAP32[$90 + 12 >> 2] | 0) != (HEAP32[$90 + 16 >> 2] | 0)) if ($89) {
      $$pre$i$2$i$i$2240 = $$pre$i$2$i$i$22;
      $189 = $90;
      break;
     } else {
      $$0$ph$be = $$3$lcssa;
      break L29;
     }
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$90 >> 2] | 0) + 36 >> 2] & 127]($90) | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      $$pre$i$2$i$i$2241 = 0;
      label = 39;
      break;
     } else if ($89 ^ ($$pre$i$2$i$i$22 | 0) == 0) {
      $$pre$i$2$i$i$2240 = $$pre$i$2$i$i$22;
      $189 = $$pre$i$2$i$i$22;
      break;
     } else {
      $$0$ph$be = $$3$lcssa;
      break L29;
     }
    } while (0);
    if ((label | 0) == 39) {
     label = 0;
     if ($89) {
      $$0$ph$be = $$3$lcssa;
      break L29;
     } else {
      $$pre$i$2$i$i$2240 = $$pre$i$2$i$i$2241;
      $189 = 0;
     }
    }
    $103 = $88 + 12 | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    $105 = $88 + 16 | 0;
    if (($104 | 0) == (HEAP32[$105 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$88 >> 2] | 0) + 36 >> 2] & 127]($88) | 0; else $$0$i$i = HEAPU8[$104 >> 0] | 0;
    if (($$0$i$i & 255) << 24 >> 24 <= -1) {
     $$0$ph$be = $$3$lcssa;
     break L29;
    }
    if (!(HEAP16[(HEAP32[$5 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
     $$0$ph$be = $$3$lcssa;
     break L29;
    }
    $121 = HEAP32[$103 >> 2] | 0;
    if (($121 | 0) == (HEAP32[$105 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$88 >> 2] | 0) + 40 >> 2] & 127]($88) | 0;
     $$pre$i$2$i$i$22 = $$pre$i$2$i$i$2240;
     $$pre$i$i$i$18 = $88;
     $90 = $189;
     continue;
    } else {
     HEAP32[$103 >> 2] = $121 + 1;
     $$pre$i$2$i$i$22 = $$pre$i$2$i$i$2240;
     $$pre$i$i$i$18 = $88;
     $90 = $189;
     continue;
    }
   }
  } else if ((label | 0) == 53) {
   label = 0;
   $150 = HEAP32[$$lcssa127 >> 2] | 0;
   if (($150 | 0) == (HEAP32[$$lcssa128 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa118 >> 2] | 0) + 40 >> 2] & 127]($$lcssa118) | 0; else HEAP32[$$lcssa127 >> 2] = $150 + 1;
   $$0$ph$be = $$0$ph + 1 | 0;
  } while (0);
  $$0$ph = $$0$ph$be;
  $$pre = HEAP32[$__err >> 2] | 0;
 }
 if ((label | 0) == 14) {
  HEAP32[$__err >> 2] = 4;
  $$pre$i$i$i$9 = $$lcssa115;
 } else if ((label | 0) == 17) {
  HEAP32[$__err >> 2] = 4;
  $$pre$i$i$i$9 = $$lcssa116$lcssa;
 } else if ((label | 0) == 22) {
  HEAP32[$__err >> 2] = 4;
  $$pre$i$i$i$9 = $$lcssa116$lcssa119;
 }
 if (!$$pre$i$i$i$9) $169 = 0; else if ((HEAP32[$$pre$i$i$i$9 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$9 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$9 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$9) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $169 = 0;
 } else $169 = $$pre$i$i$i$9; else $169 = $$pre$i$i$i$9;
 $170 = ($169 | 0) == 0;
 $171 = HEAP32[$__e >> 2] | 0;
 do if (!$171) label = 68; else {
  if ((HEAP32[$171 + 12 >> 2] | 0) == (HEAP32[$171 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$171 >> 2] | 0) + 36 >> 2] & 127]($171) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 68;
   break;
  }
  if (!$170) label = 69;
 } while (0);
 if ((label | 0) == 68) if ($170) label = 69;
 if ((label | 0) == 69) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 STACKTOP = sp;
 return $169 | 0;
}

function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$pre$phi32Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $115 = 0, $119 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $3 = 0, $31 = 0, $4 = 0, $47 = 0, $5 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $80 = 0, $81 = 0, $84 = 0, $9 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$13 = 0, $__i$0$i$i$i$17 = 0, $__i$0$i$i$i$21 = 0, $__i$0$i$i$i$25 = 0, $__i$0$i$i$i$29 = 0, $__i$0$i$i$i$5 = 0, $__i$0$i$i$i$9 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 108 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 92 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 68 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 52 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 12 | 0;
 $11 = sp;
 if ($__intl) {
  $12 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 1e4) | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$13 + 44 >> 2] & 127]($0, $12);
   $16 = HEAP32[$0 >> 2] | 0;
   HEAP8[$__pat >> 0] = $16;
   HEAP8[$__pat + 1 >> 0] = $16 >> 8;
   HEAP8[$__pat + 2 >> 0] = $16 >> 16;
   HEAP8[$__pat + 3 >> 0] = $16 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 127]($1, $12);
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0);
   HEAP32[$__sn >> 2] = HEAP32[$1 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$1 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
   $$pre$phiZ2D = $12;
  } else {
   FUNCTION_TABLE_vii[HEAP32[$13 + 40 >> 2] & 127]($2, $12);
   $31 = HEAP32[$2 >> 2] | 0;
   HEAP8[$__pat >> 0] = $31;
   HEAP8[$__pat + 1 >> 0] = $31 >> 8;
   HEAP8[$__pat + 2 >> 0] = $31 >> 16;
   HEAP8[$__pat + 3 >> 0] = $31 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 127]($3, $12);
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0);
   HEAP32[$__sn >> 2] = HEAP32[$3 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   $__i$0$i$i$i$5 = 0;
   while (1) {
    if (($__i$0$i$i$i$5 | 0) == 3) break;
    HEAP32[$3 + ($__i$0$i$i$i$5 << 2) >> 2] = 0;
    $__i$0$i$i$i$5 = $__i$0$i$i$i$5 + 1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   $$pre$phiZ2D = $12;
  }
  $47 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 127]($12) | 0;
  HEAP8[$__dp >> 0] = $47;
  $51 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 127]($12) | 0;
  HEAP8[$__ts >> 0] = $51;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 20 >> 2] & 127]($4, $12);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp >> 2] = HEAP32[$4 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  $__i$0$i$i$i$9 = 0;
  while (1) {
   if (($__i$0$i$i$i$9 | 0) == 3) break;
   HEAP32[$4 + ($__i$0$i$i$i$9 << 2) >> 2] = 0;
   $__i$0$i$i$i$9 = $__i$0$i$i$i$9 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 24 >> 2] & 127]($5, $12);
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0);
  HEAP32[$__sym >> 2] = HEAP32[$5 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  $__i$0$i$i$i$13 = 0;
  while (1) {
   if (($__i$0$i$i$i$13 | 0) == 3) break;
   HEAP32[$5 + ($__i$0$i$i$i$13 << 2) >> 2] = 0;
   $__i$0$i$i$i$13 = $__i$0$i$i$i$13 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 127]($12) | 0;
 } else {
  $80 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9936) | 0;
  $81 = HEAP32[$80 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$81 + 44 >> 2] & 127]($6, $80);
   $84 = HEAP32[$6 >> 2] | 0;
   HEAP8[$__pat >> 0] = $84;
   HEAP8[$__pat + 1 >> 0] = $84 >> 8;
   HEAP8[$__pat + 2 >> 0] = $84 >> 16;
   HEAP8[$__pat + 3 >> 0] = $84 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$80 >> 2] | 0) + 32 >> 2] & 127]($7, $80);
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0);
   HEAP32[$__sn >> 2] = HEAP32[$7 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   $__i$0$i$i$i$17 = 0;
   while (1) {
    if (($__i$0$i$i$i$17 | 0) == 3) break;
    HEAP32[$7 + ($__i$0$i$i$i$17 << 2) >> 2] = 0;
    $__i$0$i$i$i$17 = $__i$0$i$i$i$17 + 1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
   $$pre$phi32Z2D = $80;
  } else {
   FUNCTION_TABLE_vii[HEAP32[$81 + 40 >> 2] & 127]($8, $80);
   $99 = HEAP32[$8 >> 2] | 0;
   HEAP8[$__pat >> 0] = $99;
   HEAP8[$__pat + 1 >> 0] = $99 >> 8;
   HEAP8[$__pat + 2 >> 0] = $99 >> 16;
   HEAP8[$__pat + 3 >> 0] = $99 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$80 >> 2] | 0) + 28 >> 2] & 127]($9, $80);
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0);
   HEAP32[$__sn >> 2] = HEAP32[$9 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$9 + 8 >> 2];
   $__i$0$i$i$i$21 = 0;
   while (1) {
    if (($__i$0$i$i$i$21 | 0) == 3) break;
    HEAP32[$9 + ($__i$0$i$i$i$21 << 2) >> 2] = 0;
    $__i$0$i$i$i$21 = $__i$0$i$i$i$21 + 1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
   $$pre$phi32Z2D = $80;
  }
  $115 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 12 >> 2] & 127]($80) | 0;
  HEAP8[$__dp >> 0] = $115;
  $119 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 16 >> 2] & 127]($80) | 0;
  HEAP8[$__ts >> 0] = $119;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi32Z2D >> 2] | 0) + 20 >> 2] & 127]($10, $80);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp >> 2] = HEAP32[$10 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$10 + 8 >> 2];
  $__i$0$i$i$i$25 = 0;
  while (1) {
   if (($__i$0$i$i$i$25 | 0) == 3) break;
   HEAP32[$10 + ($__i$0$i$i$i$25 << 2) >> 2] = 0;
   $__i$0$i$i$i$25 = $__i$0$i$i$i$25 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi32Z2D >> 2] | 0) + 24 >> 2] & 127]($11, $80);
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0);
  HEAP32[$__sym >> 2] = HEAP32[$11 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $__i$0$i$i$i$29 = 0;
  while (1) {
   if (($__i$0$i$i$i$29 | 0) == 3) break;
   HEAP32[$11 + ($__i$0$i$i$i$29 << 2) >> 2] = 0;
   $__i$0$i$i$i$29 = $__i$0$i$i$i$29 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 127]($80) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $110 = 0, $114 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $3 = 0, $30 = 0, $4 = 0, $45 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $9 = 0, $95 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$11 = 0, $__i$0$i$i$i$15 = 0, $__i$0$i$i$i$19 = 0, $__i$0$i$i$i$23 = 0, $__i$0$i$i$i$27 = 0, $__i$0$i$i$i$5 = 0, $__i$0$i$i$i$8 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 108 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 92 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 68 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 52 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 12 | 0;
 $11 = sp;
 if ($__intl) {
  $12 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10128) | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$13 + 44 >> 2] & 127]($0, $12);
   $16 = HEAP32[$0 >> 2] | 0;
   HEAP8[$__pat >> 0] = $16;
   HEAP8[$__pat + 1 >> 0] = $16 >> 8;
   HEAP8[$__pat + 2 >> 0] = $16 >> 16;
   HEAP8[$__pat + 3 >> 0] = $16 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 127]($1, $12);
   if (!(HEAP8[$__sn >> 0] & 1)) HEAP8[$__sn >> 0] = 0; else HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
   HEAP32[$__sn + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0);
   HEAP32[$__sn >> 2] = HEAP32[$1 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$1 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  } else {
   FUNCTION_TABLE_vii[HEAP32[$13 + 40 >> 2] & 127]($2, $12);
   $30 = HEAP32[$2 >> 2] | 0;
   HEAP8[$__pat >> 0] = $30;
   HEAP8[$__pat + 1 >> 0] = $30 >> 8;
   HEAP8[$__pat + 2 >> 0] = $30 >> 16;
   HEAP8[$__pat + 3 >> 0] = $30 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 127]($3, $12);
   if (!(HEAP8[$__sn >> 0] & 1)) HEAP8[$__sn >> 0] = 0; else HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
   HEAP32[$__sn + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0);
   HEAP32[$__sn >> 2] = HEAP32[$3 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   $__i$0$i$i$i$5 = 0;
   while (1) {
    if (($__i$0$i$i$i$5 | 0) == 3) break;
    HEAP32[$3 + ($__i$0$i$i$i$5 << 2) >> 2] = 0;
    $__i$0$i$i$i$5 = $__i$0$i$i$i$5 + 1 | 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
  }
  $45 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 127]($12) | 0;
  HEAP32[$__dp >> 2] = $45;
  $49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 127]($12) | 0;
  HEAP32[$__ts >> 2] = $49;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] & 127]($4, $12);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp >> 2] = HEAP32[$4 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  $__i$0$i$i$i$8 = 0;
  while (1) {
   if (($__i$0$i$i$i$8 | 0) == 3) break;
   HEAP32[$4 + ($__i$0$i$i$i$8 << 2) >> 2] = 0;
   $__i$0$i$i$i$8 = $__i$0$i$i$i$8 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 127]($5, $12);
  if (!(HEAP8[$__sym >> 0] & 1)) HEAP8[$__sym >> 0] = 0; else HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
  HEAP32[$__sym + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0);
  HEAP32[$__sym >> 2] = HEAP32[$5 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  $__i$0$i$i$i$11 = 0;
  while (1) {
   if (($__i$0$i$i$i$11 | 0) == 3) break;
   HEAP32[$5 + ($__i$0$i$i$i$11 << 2) >> 2] = 0;
   $__i$0$i$i$i$11 = $__i$0$i$i$i$11 + 1 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($5);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 127]($12) | 0;
 } else {
  $77 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10064) | 0;
  $78 = HEAP32[$77 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$78 + 44 >> 2] & 127]($6, $77);
   $81 = HEAP32[$6 >> 2] | 0;
   HEAP8[$__pat >> 0] = $81;
   HEAP8[$__pat + 1 >> 0] = $81 >> 8;
   HEAP8[$__pat + 2 >> 0] = $81 >> 16;
   HEAP8[$__pat + 3 >> 0] = $81 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$77 >> 2] | 0) + 32 >> 2] & 127]($7, $77);
   if (!(HEAP8[$__sn >> 0] & 1)) HEAP8[$__sn >> 0] = 0; else HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
   HEAP32[$__sn + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0);
   HEAP32[$__sn >> 2] = HEAP32[$7 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   $__i$0$i$i$i$15 = 0;
   while (1) {
    if (($__i$0$i$i$i$15 | 0) == 3) break;
    HEAP32[$7 + ($__i$0$i$i$i$15 << 2) >> 2] = 0;
    $__i$0$i$i$i$15 = $__i$0$i$i$i$15 + 1 | 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
  } else {
   FUNCTION_TABLE_vii[HEAP32[$78 + 40 >> 2] & 127]($8, $77);
   $95 = HEAP32[$8 >> 2] | 0;
   HEAP8[$__pat >> 0] = $95;
   HEAP8[$__pat + 1 >> 0] = $95 >> 8;
   HEAP8[$__pat + 2 >> 0] = $95 >> 16;
   HEAP8[$__pat + 3 >> 0] = $95 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$77 >> 2] | 0) + 28 >> 2] & 127]($9, $77);
   if (!(HEAP8[$__sn >> 0] & 1)) HEAP8[$__sn >> 0] = 0; else HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
   HEAP32[$__sn + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0);
   HEAP32[$__sn >> 2] = HEAP32[$9 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$9 + 8 >> 2];
   $__i$0$i$i$i$19 = 0;
   while (1) {
    if (($__i$0$i$i$i$19 | 0) == 3) break;
    HEAP32[$9 + ($__i$0$i$i$i$19 << 2) >> 2] = 0;
    $__i$0$i$i$i$19 = $__i$0$i$i$i$19 + 1 | 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
  }
  $110 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$77 >> 2] | 0) + 12 >> 2] & 127]($77) | 0;
  HEAP32[$__dp >> 2] = $110;
  $114 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$77 >> 2] | 0) + 16 >> 2] & 127]($77) | 0;
  HEAP32[$__ts >> 2] = $114;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$77 >> 2] | 0) + 20 >> 2] & 127]($10, $77);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp >> 2] = HEAP32[$10 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$10 + 8 >> 2];
  $__i$0$i$i$i$23 = 0;
  while (1) {
   if (($__i$0$i$i$i$23 | 0) == 3) break;
   HEAP32[$10 + ($__i$0$i$i$i$23 << 2) >> 2] = 0;
   $__i$0$i$i$i$23 = $__i$0$i$i$i$23 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$77 >> 2] | 0) + 24 >> 2] & 127]($11, $77);
  if (!(HEAP8[$__sym >> 0] & 1)) HEAP8[$__sym >> 0] = 0; else HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
  HEAP32[$__sym + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0);
  HEAP32[$__sym >> 2] = HEAP32[$11 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $__i$0$i$i$i$27 = 0;
  while (1) {
   if (($__i$0$i$i$i$27 | 0) == 3) break;
   HEAP32[$11 + ($__i$0$i$i$i$27 << 2) >> 2] = 0;
   $__i$0$i$i$i$27 = $__i$0$i$i$i$27 + 1 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$77 >> 2] | 0) + 36 >> 2] & 127]($77) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$11 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$5 = 0, $$026 = 0, $$lcssa = 0, $$pre$i$3$i$i$13 = 0, $$pre$i$3$i$i$13$lcssa = 0, $101 = 0, $102 = 0, $108 = 0, $115 = 0, $122 = 0, $123 = 0, $124 = 0, $137 = 0, $144 = 0, $15 = 0, $158 = 0, $159 = 0, $21 = 0, $24 = 0, $3 = 0, $34 = 0, $37 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $54 = 0, $66 = 0, $77 = 0, $8 = 0, $90 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky1$0 = 0, $__ky2$0 = 0, $__n_does_match$0 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__statbuf = 0, $__status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__statbuf = sp;
 $3 = ($__ke - $__kb | 0) / 12 | 0;
 if ($3 >>> 0 > 100) {
  $5 = _malloc($3) | 0;
  if (!$5) __ZSt17__throw_bad_allocv(); else {
   $158 = $5;
   $__status$0 = $5;
  }
 } else {
  $158 = 0;
  $__status$0 = $__statbuf;
 }
 $__ky$0 = $__kb;
 $__n_does_match$0 = 0;
 $__n_might_match$0 = $3;
 $__st$0 = $__status$0;
 while (1) {
  if (($__ky$0 | 0) == ($__ke | 0)) {
   $__n_does_match$0$lcssa = $__n_does_match$0;
   $__n_might_match$0$lcssa = $__n_might_match$0;
   break;
  }
  $8 = HEAP8[$__ky$0 >> 0] | 0;
  if (!($8 & 1)) $15 = ($8 & 255) >>> 1; else $15 = HEAP32[$__ky$0 + 4 >> 2] | 0;
  if (!$15) {
   HEAP8[$__st$0 >> 0] = 2;
   $__n_does_match$1 = $__n_does_match$0 + 1 | 0;
   $__n_might_match$1 = $__n_might_match$0 + -1 | 0;
  } else {
   HEAP8[$__st$0 >> 0] = 1;
   $__n_does_match$1 = $__n_does_match$0;
   $__n_might_match$1 = $__n_might_match$0;
  }
  $__ky$0 = $__ky$0 + 12 | 0;
  $__n_does_match$0 = $__n_does_match$1;
  $__n_might_match$0 = $__n_might_match$1;
  $__st$0 = $__st$0 + 1 | 0;
 }
 $__indx$0 = 0;
 $__n_does_match$2 = $__n_does_match$0$lcssa;
 $__n_might_match$2 = $__n_might_match$0$lcssa;
 L17 : while (1) {
  $21 = HEAP32[$__b >> 2] | 0;
  do if (!$21) $48 = 1; else {
   $24 = HEAP32[$21 + 12 >> 2] | 0;
   if (($24 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $$0$i$i$i$i = HEAP32[$24 >> 2] | 0;
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $48 = 1;
    break;
   } else {
    $48 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $34 = HEAP32[$__e >> 2] | 0;
  if (!$34) {
   $$pre$i$3$i$i$13 = 0;
   $47 = 1;
  } else {
   $37 = HEAP32[$34 + 12 >> 2] | 0;
   if (($37 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; else $$0$i$i$1$i$i = HEAP32[$37 >> 2] | 0;
   if (($$0$i$i$1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    $$pre$i$3$i$i$13 = 0;
    $47 = 1;
   } else {
    $$pre$i$3$i$i$13 = $34;
    $47 = 0;
   }
  }
  $51 = HEAP32[$__b >> 2] | 0;
  if (!(($__n_might_match$2 | 0) != 0 & ($48 ^ $47))) {
   $$lcssa = $51;
   $$pre$i$3$i$i$13$lcssa = $$pre$i$3$i$i$13;
   break;
  }
  $77 = HEAP32[$51 + 12 >> 2] | 0;
  if (($77 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] & 127]($51) | 0; else $$0$i$i = HEAP32[$77 >> 2] | 0;
  if ($__case_sensitive) $__c$0 = $$0$i$i; else $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 63]($__ct, $$0$i$i) | 0;
  $90 = $__indx$0 + 1 | 0;
  $__consume$0$off0 = 0;
  $__ky1$0 = $__kb;
  $__n_does_match$3 = $__n_does_match$2;
  $__n_might_match$3 = $__n_might_match$2;
  $__st$1 = $__status$0;
  while (1) {
   if (($__ky1$0 | 0) == ($__ke | 0)) break;
   do if ((HEAP8[$__st$1 >> 0] | 0) == 1) {
    if (!(HEAP8[$__ky1$0 >> 0] & 1)) $101 = $__ky1$0 + 4 | 0; else $101 = HEAP32[$__ky1$0 + 8 >> 2] | 0;
    $102 = HEAP32[$101 + ($__indx$0 << 2) >> 2] | 0;
    if ($__case_sensitive) $__kc$0 = $102; else $__kc$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 63]($__ct, $102) | 0;
    if (($__c$0 | 0) != ($__kc$0 | 0)) {
     HEAP8[$__st$1 >> 0] = 0;
     $__consume$2$off0 = $__consume$0$off0;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
     break;
    }
    $108 = HEAP8[$__ky1$0 >> 0] | 0;
    if (!($108 & 1)) $115 = ($108 & 255) >>> 1; else $115 = HEAP32[$__ky1$0 + 4 >> 2] | 0;
    if (($115 | 0) == ($90 | 0)) {
     HEAP8[$__st$1 >> 0] = 2;
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3 + 1 | 0;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
    } else {
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3;
    }
   } else {
    $__consume$2$off0 = $__consume$0$off0;
    $__n_does_match$5 = $__n_does_match$3;
    $__n_might_match$5 = $__n_might_match$3;
   } while (0);
   $__consume$0$off0 = $__consume$2$off0;
   $__ky1$0 = $__ky1$0 + 12 | 0;
   $__n_does_match$3 = $__n_does_match$5;
   $__n_might_match$3 = $__n_might_match$5;
   $__st$1 = $__st$1 + 1 | 0;
  }
  if (!$__consume$0$off0) {
   $__indx$0 = $90;
   $__n_does_match$2 = $__n_does_match$3;
   $__n_might_match$2 = $__n_might_match$3;
   continue;
  }
  $122 = HEAP32[$__b >> 2] | 0;
  $123 = $122 + 12 | 0;
  $124 = HEAP32[$123 >> 2] | 0;
  if (($124 | 0) == (HEAP32[$122 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$122 >> 2] | 0) + 40 >> 2] & 127]($122) | 0; else HEAP32[$123 >> 2] = $124 + 4;
  if (($__n_does_match$3 + $__n_might_match$3 | 0) >>> 0 > 1) {
   $__ky2$0 = $__kb;
   $__n_does_match$6 = $__n_does_match$3;
   $__st$2 = $__status$0;
  } else {
   $__indx$0 = $90;
   $__n_does_match$2 = $__n_does_match$3;
   $__n_might_match$2 = $__n_might_match$3;
   continue;
  }
  while (1) {
   if (($__ky2$0 | 0) == ($__ke | 0)) {
    $__indx$0 = $90;
    $__n_does_match$2 = $__n_does_match$6;
    $__n_might_match$2 = $__n_might_match$3;
    continue L17;
   }
   if ((HEAP8[$__st$2 >> 0] | 0) == 2) {
    $137 = HEAP8[$__ky2$0 >> 0] | 0;
    if (!($137 & 1)) $144 = ($137 & 255) >>> 1; else $144 = HEAP32[$__ky2$0 + 4 >> 2] | 0;
    if (($144 | 0) == ($90 | 0)) $__n_does_match$7 = $__n_does_match$6; else {
     HEAP8[$__st$2 >> 0] = 0;
     $__n_does_match$7 = $__n_does_match$6 + -1 | 0;
    }
   } else $__n_does_match$7 = $__n_does_match$6;
   $__ky2$0 = $__ky2$0 + 12 | 0;
   $__n_does_match$6 = $__n_does_match$7;
   $__st$2 = $__st$2 + 1 | 0;
  }
 }
 do if (!$$lcssa) $159 = 1; else {
  $54 = HEAP32[$$lcssa + 12 >> 2] | 0;
  if (($54 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i$5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 127]($$lcssa) | 0; else $$0$i$i$i$i$5 = HEAP32[$54 >> 2] | 0;
  if (($$0$i$i$i$i$5 | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $159 = 1;
   break;
  } else {
   $159 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$$pre$i$3$i$i$13$lcssa) label = 41; else {
  $66 = HEAP32[$$pre$i$3$i$i$13$lcssa + 12 >> 2] | 0;
  if (($66 | 0) == (HEAP32[$$pre$i$3$i$i$13$lcssa + 16 >> 2] | 0)) $$0$i$i$1$i$i$11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$3$i$i$13$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$3$i$i$13$lcssa) | 0; else $$0$i$i$1$i$i$11 = HEAP32[$66 >> 2] | 0;
  if (($$0$i$i$1$i$i$11 | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  } else if ($159) {
   $$0 = $__kb;
   $__st$3 = $__status$0;
   break;
  } else {
   label = 77;
   break;
  }
 } while (0);
 if ((label | 0) == 41) if ($159) label = 77; else {
  $$0 = $__kb;
  $__st$3 = $__status$0;
 }
 if ((label | 0) == 77) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
  $$0 = $__kb;
  $__st$3 = $__status$0;
 }
 while (1) {
  if (($$0 | 0) == ($__ke | 0)) {
   label = 81;
   break;
  }
  if ((HEAP8[$__st$3 >> 0] | 0) == 2) {
   $$026 = $$0;
   break;
  }
  $$0 = $$0 + 12 | 0;
  $__st$3 = $__st$3 + 1 | 0;
 }
 if ((label | 0) == 81) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$026 = $__ke;
 }
 _free($158);
 STACKTOP = sp;
 return $$026 | 0;
}

function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $107 = 0, $111 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $42 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $75 = 0, $79 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$11 = 0, $__i$0$i$i$i$15 = 0, $__i$0$i$i$i$19 = 0, $__i$0$i$i$i$23 = 0, $__i$0$i$i$i$27 = 0, $__i$0$i$i$i$3 = 0, $__i$0$i$i$i$7 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 100 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 76 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 52 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if ($__intl) {
  $10 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 1e4) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 44 >> 2] & 127]($0, $10);
  $14 = HEAP32[$0 >> 2] | 0;
  HEAP8[$__pat >> 0] = $14;
  HEAP8[$__pat + 1 >> 0] = $14 >> 8;
  HEAP8[$__pat + 2 >> 0] = $14 >> 16;
  HEAP8[$__pat + 3 >> 0] = $14 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 32 >> 2] & 127]($1, $10);
  if (!(HEAP8[$__nsn >> 0] & 1)) {
   HEAP8[$__nsn + 1 >> 0] = 0;
   HEAP8[$__nsn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__nsn + 8 >> 2] >> 0] = 0;
   HEAP32[$__nsn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn, 0);
  HEAP32[$__nsn >> 2] = HEAP32[$1 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  $__i$0$i$i$i = 0;
  while (1) {
   if (($__i$0$i$i$i | 0) == 3) break;
   HEAP32[$1 + ($__i$0$i$i$i << 2) >> 2] = 0;
   $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 127]($2, $10);
  if (!(HEAP8[$__psn >> 0] & 1)) {
   HEAP8[$__psn + 1 >> 0] = 0;
   HEAP8[$__psn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__psn + 8 >> 2] >> 0] = 0;
   HEAP32[$__psn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn, 0);
  HEAP32[$__psn >> 2] = HEAP32[$2 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  $__i$0$i$i$i$3 = 0;
  while (1) {
   if (($__i$0$i$i$i$3 | 0) == 3) break;
   HEAP32[$2 + ($__i$0$i$i$i$3 << 2) >> 2] = 0;
   $__i$0$i$i$i$3 = $__i$0$i$i$i$3 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  $42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 127]($10) | 0;
  HEAP8[$__dp >> 0] = $42;
  $46 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] & 127]($10) | 0;
  HEAP8[$__ts >> 0] = $46;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 127]($3, $10);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp >> 2] = HEAP32[$3 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $__i$0$i$i$i$7 = 0;
  while (1) {
   if (($__i$0$i$i$i$7 | 0) == 3) break;
   HEAP32[$3 + ($__i$0$i$i$i$7 << 2) >> 2] = 0;
   $__i$0$i$i$i$7 = $__i$0$i$i$i$7 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 127]($4, $10);
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0);
  HEAP32[$__sym >> 2] = HEAP32[$4 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  $__i$0$i$i$i$11 = 0;
  while (1) {
   if (($__i$0$i$i$i$11 | 0) == 3) break;
   HEAP32[$4 + ($__i$0$i$i$i$11 << 2) >> 2] = 0;
   $__i$0$i$i$i$11 = $__i$0$i$i$i$11 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 127]($10) | 0;
 } else {
  $75 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9936) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$75 >> 2] | 0) + 44 >> 2] & 127]($5, $75);
  $79 = HEAP32[$5 >> 2] | 0;
  HEAP8[$__pat >> 0] = $79;
  HEAP8[$__pat + 1 >> 0] = $79 >> 8;
  HEAP8[$__pat + 2 >> 0] = $79 >> 16;
  HEAP8[$__pat + 3 >> 0] = $79 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$75 >> 2] | 0) + 32 >> 2] & 127]($6, $75);
  if (!(HEAP8[$__nsn >> 0] & 1)) {
   HEAP8[$__nsn + 1 >> 0] = 0;
   HEAP8[$__nsn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__nsn + 8 >> 2] >> 0] = 0;
   HEAP32[$__nsn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn, 0);
  HEAP32[$__nsn >> 2] = HEAP32[$6 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  $__i$0$i$i$i$15 = 0;
  while (1) {
   if (($__i$0$i$i$i$15 | 0) == 3) break;
   HEAP32[$6 + ($__i$0$i$i$i$15 << 2) >> 2] = 0;
   $__i$0$i$i$i$15 = $__i$0$i$i$i$15 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$75 >> 2] | 0) + 28 >> 2] & 127]($7, $75);
  if (!(HEAP8[$__psn >> 0] & 1)) {
   HEAP8[$__psn + 1 >> 0] = 0;
   HEAP8[$__psn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__psn + 8 >> 2] >> 0] = 0;
   HEAP32[$__psn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn, 0);
  HEAP32[$__psn >> 2] = HEAP32[$7 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
  $__i$0$i$i$i$19 = 0;
  while (1) {
   if (($__i$0$i$i$i$19 | 0) == 3) break;
   HEAP32[$7 + ($__i$0$i$i$i$19 << 2) >> 2] = 0;
   $__i$0$i$i$i$19 = $__i$0$i$i$i$19 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  $107 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$75 >> 2] | 0) + 12 >> 2] & 127]($75) | 0;
  HEAP8[$__dp >> 0] = $107;
  $111 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$75 >> 2] | 0) + 16 >> 2] & 127]($75) | 0;
  HEAP8[$__ts >> 0] = $111;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$75 >> 2] | 0) + 20 >> 2] & 127]($8, $75);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp >> 2] = HEAP32[$8 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$8 + 8 >> 2];
  $__i$0$i$i$i$23 = 0;
  while (1) {
   if (($__i$0$i$i$i$23 | 0) == 3) break;
   HEAP32[$8 + ($__i$0$i$i$i$23 << 2) >> 2] = 0;
   $__i$0$i$i$i$23 = $__i$0$i$i$i$23 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$75 >> 2] | 0) + 24 >> 2] & 127]($9, $75);
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0);
  HEAP32[$__sym >> 2] = HEAP32[$9 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$9 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$9 + 8 >> 2];
  $__i$0$i$i$i$27 = 0;
  while (1) {
   if (($__i$0$i$i$i$27 | 0) == 3) break;
   HEAP32[$9 + ($__i$0$i$i$i$27 << 2) >> 2] = 0;
   $__i$0$i$i$i$27 = $__i$0$i$i$i$27 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$75 >> 2] | 0) + 36 >> 2] & 127]($75) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $$0 = 0, $$0$i$i = 0, $$022 = 0, $$lcssa = 0, $$lcssa36 = 0, $$pre$i$2$i$i$10 = 0, $$pre$i$2$i$i$10$lcssa = 0, $101 = 0, $102 = 0, $108 = 0, $115 = 0, $122 = 0, $123 = 0, $124 = 0, $137 = 0, $144 = 0, $15 = 0, $158 = 0, $21 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $47 = 0, $5 = 0, $50 = 0, $62 = 0, $63 = 0, $75 = 0, $8 = 0, $85 = 0, $90 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky1$0 = 0, $__ky2$0 = 0, $__n_does_match$0 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__statbuf = 0, $__status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__statbuf = sp;
 $3 = ($__ke - $__kb | 0) / 12 | 0;
 if ($3 >>> 0 > 100) {
  $5 = _malloc($3) | 0;
  if (!$5) __ZSt17__throw_bad_allocv(); else {
   $158 = $5;
   $__status$0 = $5;
  }
 } else {
  $158 = 0;
  $__status$0 = $__statbuf;
 }
 $__ky$0 = $__kb;
 $__n_does_match$0 = 0;
 $__n_might_match$0 = $3;
 $__st$0 = $__status$0;
 while (1) {
  if (($__ky$0 | 0) == ($__ke | 0)) {
   $__n_does_match$0$lcssa = $__n_does_match$0;
   $__n_might_match$0$lcssa = $__n_might_match$0;
   break;
  }
  $8 = HEAP8[$__ky$0 >> 0] | 0;
  if (!($8 & 1)) $15 = ($8 & 255) >>> 1; else $15 = HEAP32[$__ky$0 + 4 >> 2] | 0;
  if (!$15) {
   HEAP8[$__st$0 >> 0] = 2;
   $__n_does_match$1 = $__n_does_match$0 + 1 | 0;
   $__n_might_match$1 = $__n_might_match$0 + -1 | 0;
  } else {
   HEAP8[$__st$0 >> 0] = 1;
   $__n_does_match$1 = $__n_does_match$0;
   $__n_might_match$1 = $__n_might_match$0;
  }
  $__ky$0 = $__ky$0 + 12 | 0;
  $__n_does_match$0 = $__n_does_match$1;
  $__n_might_match$0 = $__n_might_match$1;
  $__st$0 = $__st$0 + 1 | 0;
 }
 $__indx$0 = 0;
 $__n_does_match$2 = $__n_does_match$0$lcssa;
 $__n_might_match$2 = $__n_might_match$0$lcssa;
 L17 : while (1) {
  $21 = HEAP32[$__b >> 2] | 0;
  do if (!$21) $33 = 0; else if ((HEAP32[$21 + 12 >> 2] | 0) == (HEAP32[$21 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $33 = 0;
   break;
  } else {
   $33 = HEAP32[$__b >> 2] | 0;
   break;
  } else $33 = $21; while (0);
  $34 = ($33 | 0) == 0;
  $35 = HEAP32[$__e >> 2] | 0;
  if (!$35) $$pre$i$2$i$i$10 = 0; else if ((HEAP32[$35 + 12 >> 2] | 0) == (HEAP32[$35 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 127]($35) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   $$pre$i$2$i$i$10 = 0;
  } else $$pre$i$2$i$i$10 = $35; else $$pre$i$2$i$i$10 = $35;
  $47 = ($$pre$i$2$i$i$10 | 0) == 0;
  $50 = HEAP32[$__b >> 2] | 0;
  if (!(($__n_might_match$2 | 0) != 0 & ($34 ^ $47))) {
   $$lcssa = $47;
   $$lcssa36 = $50;
   $$pre$i$2$i$i$10$lcssa = $$pre$i$2$i$i$10;
   break;
  }
  $75 = HEAP32[$50 + 12 >> 2] | 0;
  if (($75 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] & 127]($50) | 0; else $$0$i$i = HEAPU8[$75 >> 0] | 0;
  $85 = $$0$i$i & 255;
  if ($__case_sensitive) $__c$0 = $85; else $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 63]($__ct, $85) | 0;
  $90 = $__indx$0 + 1 | 0;
  $__consume$0$off0 = 0;
  $__ky1$0 = $__kb;
  $__n_does_match$3 = $__n_does_match$2;
  $__n_might_match$3 = $__n_might_match$2;
  $__st$1 = $__status$0;
  while (1) {
   if (($__ky1$0 | 0) == ($__ke | 0)) break;
   do if ((HEAP8[$__st$1 >> 0] | 0) == 1) {
    if (!(HEAP8[$__ky1$0 >> 0] & 1)) $101 = $__ky1$0 + 1 | 0; else $101 = HEAP32[$__ky1$0 + 8 >> 2] | 0;
    $102 = HEAP8[$101 + $__indx$0 >> 0] | 0;
    if ($__case_sensitive) $__kc$0 = $102; else $__kc$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 63]($__ct, $102) | 0;
    if ($__c$0 << 24 >> 24 != $__kc$0 << 24 >> 24) {
     HEAP8[$__st$1 >> 0] = 0;
     $__consume$2$off0 = $__consume$0$off0;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
     break;
    }
    $108 = HEAP8[$__ky1$0 >> 0] | 0;
    if (!($108 & 1)) $115 = ($108 & 255) >>> 1; else $115 = HEAP32[$__ky1$0 + 4 >> 2] | 0;
    if (($115 | 0) == ($90 | 0)) {
     HEAP8[$__st$1 >> 0] = 2;
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3 + 1 | 0;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
    } else {
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3;
    }
   } else {
    $__consume$2$off0 = $__consume$0$off0;
    $__n_does_match$5 = $__n_does_match$3;
    $__n_might_match$5 = $__n_might_match$3;
   } while (0);
   $__consume$0$off0 = $__consume$2$off0;
   $__ky1$0 = $__ky1$0 + 12 | 0;
   $__n_does_match$3 = $__n_does_match$5;
   $__n_might_match$3 = $__n_might_match$5;
   $__st$1 = $__st$1 + 1 | 0;
  }
  if (!$__consume$0$off0) {
   $__indx$0 = $90;
   $__n_does_match$2 = $__n_does_match$3;
   $__n_might_match$2 = $__n_might_match$3;
   continue;
  }
  $122 = HEAP32[$__b >> 2] | 0;
  $123 = $122 + 12 | 0;
  $124 = HEAP32[$123 >> 2] | 0;
  if (($124 | 0) == (HEAP32[$122 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$122 >> 2] | 0) + 40 >> 2] & 127]($122) | 0; else HEAP32[$123 >> 2] = $124 + 1;
  if (($__n_does_match$3 + $__n_might_match$3 | 0) >>> 0 > 1) {
   $__ky2$0 = $__kb;
   $__n_does_match$6 = $__n_does_match$3;
   $__st$2 = $__status$0;
  } else {
   $__indx$0 = $90;
   $__n_does_match$2 = $__n_does_match$3;
   $__n_might_match$2 = $__n_might_match$3;
   continue;
  }
  while (1) {
   if (($__ky2$0 | 0) == ($__ke | 0)) {
    $__indx$0 = $90;
    $__n_does_match$2 = $__n_does_match$6;
    $__n_might_match$2 = $__n_might_match$3;
    continue L17;
   }
   if ((HEAP8[$__st$2 >> 0] | 0) == 2) {
    $137 = HEAP8[$__ky2$0 >> 0] | 0;
    if (!($137 & 1)) $144 = ($137 & 255) >>> 1; else $144 = HEAP32[$__ky2$0 + 4 >> 2] | 0;
    if (($144 | 0) == ($90 | 0)) $__n_does_match$7 = $__n_does_match$6; else {
     HEAP8[$__st$2 >> 0] = 0;
     $__n_does_match$7 = $__n_does_match$6 + -1 | 0;
    }
   } else $__n_does_match$7 = $__n_does_match$6;
   $__ky2$0 = $__ky2$0 + 12 | 0;
   $__n_does_match$6 = $__n_does_match$7;
   $__st$2 = $__st$2 + 1 | 0;
  }
 }
 do if (!$$lcssa36) $62 = 0; else if ((HEAP32[$$lcssa36 + 12 >> 2] | 0) == (HEAP32[$$lcssa36 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa36 >> 2] | 0) + 36 >> 2] & 127]($$lcssa36) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $62 = 0;
  break;
 } else {
  $62 = HEAP32[$__b >> 2] | 0;
  break;
 } else $62 = $$lcssa36; while (0);
 $63 = ($62 | 0) == 0;
 do if ($$lcssa) label = 34; else {
  if ((HEAP32[$$pre$i$2$i$i$10$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$2$i$i$10$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$2$i$i$10$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$2$i$i$10$lcssa) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 34;
   break;
  }
  if ($63) {
   $$0 = $__kb;
   $__st$3 = $__status$0;
  } else label = 69;
 } while (0);
 if ((label | 0) == 34) if ($63) label = 69; else {
  $$0 = $__kb;
  $__st$3 = $__status$0;
 }
 if ((label | 0) == 69) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
  $$0 = $__kb;
  $__st$3 = $__status$0;
 }
 while (1) {
  if (($$0 | 0) == ($__ke | 0)) {
   label = 73;
   break;
  }
  if ((HEAP8[$__st$3 >> 0] | 0) == 2) {
   $$022 = $$0;
   break;
  }
  $$0 = $$0 + 12 | 0;
  $__st$3 = $__st$3 + 1 | 0;
 }
 if ((label | 0) == 73) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$022 = $__ke;
 }
 _free($158);
 STACKTOP = sp;
 return $$022 | 0;
}

function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $102 = 0, $106 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $40 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $72 = 0, $76 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$13 = 0, $__i$0$i$i$i$17 = 0, $__i$0$i$i$i$21 = 0, $__i$0$i$i$i$25 = 0, $__i$0$i$i$i$3 = 0, $__i$0$i$i$i$6 = 0, $__i$0$i$i$i$9 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 100 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 76 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 52 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if ($__intl) {
  $10 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10128) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 44 >> 2] & 127]($0, $10);
  $14 = HEAP32[$0 >> 2] | 0;
  HEAP8[$__pat >> 0] = $14;
  HEAP8[$__pat + 1 >> 0] = $14 >> 8;
  HEAP8[$__pat + 2 >> 0] = $14 >> 16;
  HEAP8[$__pat + 3 >> 0] = $14 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 32 >> 2] & 127]($1, $10);
  if (!(HEAP8[$__nsn >> 0] & 1)) HEAP8[$__nsn >> 0] = 0; else HEAP32[HEAP32[$__nsn + 8 >> 2] >> 2] = 0;
  HEAP32[$__nsn + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn, 0);
  HEAP32[$__nsn >> 2] = HEAP32[$1 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  $__i$0$i$i$i = 0;
  while (1) {
   if (($__i$0$i$i$i | 0) == 3) break;
   HEAP32[$1 + ($__i$0$i$i$i << 2) >> 2] = 0;
   $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 127]($2, $10);
  if (!(HEAP8[$__psn >> 0] & 1)) HEAP8[$__psn >> 0] = 0; else HEAP32[HEAP32[$__psn + 8 >> 2] >> 2] = 0;
  HEAP32[$__psn + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn, 0);
  HEAP32[$__psn >> 2] = HEAP32[$2 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  $__i$0$i$i$i$3 = 0;
  while (1) {
   if (($__i$0$i$i$i$3 | 0) == 3) break;
   HEAP32[$2 + ($__i$0$i$i$i$3 << 2) >> 2] = 0;
   $__i$0$i$i$i$3 = $__i$0$i$i$i$3 + 1 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($2);
  $40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 127]($10) | 0;
  HEAP32[$__dp >> 2] = $40;
  $44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] & 127]($10) | 0;
  HEAP32[$__ts >> 2] = $44;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 127]($3, $10);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp >> 2] = HEAP32[$3 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $__i$0$i$i$i$6 = 0;
  while (1) {
   if (($__i$0$i$i$i$6 | 0) == 3) break;
   HEAP32[$3 + ($__i$0$i$i$i$6 << 2) >> 2] = 0;
   $__i$0$i$i$i$6 = $__i$0$i$i$i$6 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 127]($4, $10);
  if (!(HEAP8[$__sym >> 0] & 1)) HEAP8[$__sym >> 0] = 0; else HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
  HEAP32[$__sym + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0);
  HEAP32[$__sym >> 2] = HEAP32[$4 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  $__i$0$i$i$i$9 = 0;
  while (1) {
   if (($__i$0$i$i$i$9 | 0) == 3) break;
   HEAP32[$4 + ($__i$0$i$i$i$9 << 2) >> 2] = 0;
   $__i$0$i$i$i$9 = $__i$0$i$i$i$9 + 1 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 127]($10) | 0;
 } else {
  $72 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10064) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 44 >> 2] & 127]($5, $72);
  $76 = HEAP32[$5 >> 2] | 0;
  HEAP8[$__pat >> 0] = $76;
  HEAP8[$__pat + 1 >> 0] = $76 >> 8;
  HEAP8[$__pat + 2 >> 0] = $76 >> 16;
  HEAP8[$__pat + 3 >> 0] = $76 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 32 >> 2] & 127]($6, $72);
  if (!(HEAP8[$__nsn >> 0] & 1)) HEAP8[$__nsn >> 0] = 0; else HEAP32[HEAP32[$__nsn + 8 >> 2] >> 2] = 0;
  HEAP32[$__nsn + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn, 0);
  HEAP32[$__nsn >> 2] = HEAP32[$6 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  $__i$0$i$i$i$13 = 0;
  while (1) {
   if (($__i$0$i$i$i$13 | 0) == 3) break;
   HEAP32[$6 + ($__i$0$i$i$i$13 << 2) >> 2] = 0;
   $__i$0$i$i$i$13 = $__i$0$i$i$i$13 + 1 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 28 >> 2] & 127]($7, $72);
  if (!(HEAP8[$__psn >> 0] & 1)) HEAP8[$__psn >> 0] = 0; else HEAP32[HEAP32[$__psn + 8 >> 2] >> 2] = 0;
  HEAP32[$__psn + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn, 0);
  HEAP32[$__psn >> 2] = HEAP32[$7 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
  $__i$0$i$i$i$17 = 0;
  while (1) {
   if (($__i$0$i$i$i$17 | 0) == 3) break;
   HEAP32[$7 + ($__i$0$i$i$i$17 << 2) >> 2] = 0;
   $__i$0$i$i$i$17 = $__i$0$i$i$i$17 + 1 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
  $102 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 12 >> 2] & 127]($72) | 0;
  HEAP32[$__dp >> 2] = $102;
  $106 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 16 >> 2] & 127]($72) | 0;
  HEAP32[$__ts >> 2] = $106;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 20 >> 2] & 127]($8, $72);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp >> 2] = HEAP32[$8 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$8 + 8 >> 2];
  $__i$0$i$i$i$21 = 0;
  while (1) {
   if (($__i$0$i$i$i$21 | 0) == 3) break;
   HEAP32[$8 + ($__i$0$i$i$i$21 << 2) >> 2] = 0;
   $__i$0$i$i$i$21 = $__i$0$i$i$i$21 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 24 >> 2] & 127]($9, $72);
  if (!(HEAP8[$__sym >> 0] & 1)) HEAP8[$__sym >> 0] = 0; else HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
  HEAP32[$__sym + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0);
  HEAP32[$__sym >> 2] = HEAP32[$9 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$9 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$9 + 8 >> 2];
  $__i$0$i$i$i$25 = 0;
  while (1) {
   if (($__i$0$i$i$i$25 | 0) == 3) break;
   HEAP32[$9 + ($__i$0$i$i$i$25 << 2) >> 2] = 0;
   $__i$0$i$i$i$25 = $__i$0$i$i$i$25 + 1 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 36 >> 2] & 127]($72) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function _mbsrtowcs($ws, $src, $wn, $st) {
 $ws = $ws | 0;
 $src = $src | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$0 = 0, $$02$ph = 0, $$0219 = 0, $$03 = 0, $$1 = 0, $$1$lcssa = 0, $$14$lcssa = 0, $$1415 = 0, $$2 = 0, $$2$lcssa = 0, $$25 = 0, $$25$lcssa = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$434 = 0, $$47$ph = 0, $$4718 = 0, $$48 = 0, $$5 = 0, $$5$lcssa = 0, $$6 = 0, $$6$lcssa = 0, $$7 = 0, $$8 = 0, $$833 = 0, $$in = 0, $$lcssa102 = 0, $$lcssa90 = 0, $$lcssa94 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $0 = 0, $101 = 0, $107 = 0, $108 = 0, $116 = 0, $118 = 0, $121 = 0, $126 = 0, $128 = 0, $131 = 0, $14 = 0, $146 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $27 = 0, $28 = 0, $33 = 0, $40 = 0, $47 = 0, $54 = 0, $63 = 0, $7 = 0, $71 = 0, $87 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $97 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1035 = 0, $s$109 = 0, $s$116 = 0, $s$2 = 0, $s$2$lcssa = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$520 = 0, $s$6 = 0, $s$6$lcssa = 0, $s$7 = 0, $s$7$lcssa = 0, $s$8 = 0, $s$9 = 0, label = 0;
 $0 = HEAP32[$src >> 2] | 0;
 if (!$st) label = 5; else {
  $2 = HEAP32[$st >> 2] | 0;
  if (!$2) label = 5; else if (!$ws) {
   $$36 = $wn;
   $c$2 = $2;
   $s$3 = $0;
   label = 16;
  } else {
   HEAP32[$st >> 2] = 0;
   $$3 = $ws;
   $$7 = $wn;
   $c$4 = $2;
   $s$8 = $0;
   label = 37;
  }
 }
 if ((label | 0) == 5) if (!$ws) {
  $$03 = $wn;
  $s$0 = $0;
  label = 7;
 } else {
  $$02$ph = $ws;
  $$47$ph = $wn;
  $s$5$ph = $0;
  label = 6;
 }
 L7 : while (1) if ((label | 0) == 6) {
  label = 0;
  if (!$$47$ph) {
   $s$5$lcssa = $s$5$ph;
   label = 26;
   break;
  } else {
   $$0219 = $$02$ph;
   $$4718 = $$47$ph;
   $s$520 = $s$5$ph;
  }
  while (1) {
   $63 = HEAP8[$s$520 >> 0] | 0;
   do if ((($63 & 255) + -1 | 0) >>> 0 < 127) if ($$4718 >>> 0 > 4 & ($s$520 & 3 | 0) == 0) {
    $$1 = $$0219;
    $$5 = $$4718;
    $s$6 = $s$520;
    while (1) {
     $71 = HEAP32[$s$6 >> 2] | 0;
     if (($71 + -16843009 | $71) & -2139062144) {
      $$1$lcssa = $$1;
      $$5$lcssa = $$5;
      $$lcssa94 = $71;
      $s$6$lcssa = $s$6;
      label = 32;
      break;
     }
     HEAP32[$$1 >> 2] = $71 & 255;
     HEAP32[$$1 + 4 >> 2] = HEAPU8[$s$6 + 1 >> 0];
     HEAP32[$$1 + 8 >> 2] = HEAPU8[$s$6 + 2 >> 0];
     $87 = $s$6 + 4 | 0;
     $90 = $$1 + 16 | 0;
     HEAP32[$$1 + 12 >> 2] = HEAPU8[$s$6 + 3 >> 0];
     $91 = $$5 + -4 | 0;
     if ($91 >>> 0 > 4) {
      $$1 = $90;
      $$5 = $91;
      $s$6 = $87;
     } else {
      $$lcssa96 = $87;
      $$lcssa97 = $90;
      $$lcssa98 = $91;
      label = 31;
      break;
     }
    }
    if ((label | 0) == 31) {
     label = 0;
     $$2 = $$lcssa97;
     $$6 = $$lcssa98;
     $94 = HEAP8[$$lcssa96 >> 0] | 0;
     $s$7 = $$lcssa96;
     break;
    } else if ((label | 0) == 32) {
     label = 0;
     $$2 = $$1$lcssa;
     $$6 = $$5$lcssa;
     $94 = $$lcssa94 & 255;
     $s$7 = $s$6$lcssa;
     break;
    }
   } else {
    $$2 = $$0219;
    $$6 = $$4718;
    $94 = $63;
    $s$7 = $s$520;
   } else {
    $$2 = $$0219;
    $$6 = $$4718;
    $94 = $63;
    $s$7 = $s$520;
   } while (0);
   $93 = $94 & 255;
   if (($93 + -1 | 0) >>> 0 >= 127) {
    $$2$lcssa = $$2;
    $$6$lcssa = $$6;
    $$lcssa102 = $93;
    $s$7$lcssa = $s$7;
    break;
   }
   $97 = $s$7 + 1 | 0;
   HEAP32[$$2 >> 2] = $93;
   $$4718 = $$6 + -1 | 0;
   if (!$$4718) {
    $s$5$lcssa = $97;
    label = 26;
    break L7;
   } else {
    $$0219 = $$2 + 4 | 0;
    $s$520 = $97;
   }
  }
  $101 = $$lcssa102 + -194 | 0;
  if ($101 >>> 0 > 50) {
   $$434 = $$2$lcssa;
   $$833 = $$6$lcssa;
   $s$1035 = $s$7$lcssa;
   label = 48;
   break;
  }
  $$3 = $$2$lcssa;
  $$7 = $$6$lcssa;
  $c$4 = HEAP32[3420 + ($101 << 2) >> 2] | 0;
  $s$8 = $s$7$lcssa + 1 | 0;
  label = 37;
  continue;
 } else if ((label | 0) == 7) {
  label = 0;
  $7 = HEAP8[$s$0 >> 0] | 0;
  if ((($7 & 255) + -1 | 0) >>> 0 < 127) if (!($s$0 & 3)) {
   $14 = HEAP32[$s$0 >> 2] | 0;
   if (!(($14 + -16843009 | $14) & -2139062144)) {
    $$1415 = $$03;
    $s$116 = $s$0;
    while (1) {
     $19 = $s$116 + 4 | 0;
     $20 = $$1415 + -4 | 0;
     $21 = HEAP32[$19 >> 2] | 0;
     if (!(($21 + -16843009 | $21) & -2139062144)) {
      $$1415 = $20;
      $s$116 = $19;
     } else {
      $$14$lcssa = $20;
      $$in = $21;
      $s$1$lcssa = $19;
      break;
     }
    }
   } else {
    $$14$lcssa = $$03;
    $$in = $14;
    $s$1$lcssa = $s$0;
   }
   $$25 = $$14$lcssa;
   $28 = $$in & 255;
   $s$2 = $s$1$lcssa;
  } else {
   $$25 = $$03;
   $28 = $7;
   $s$2 = $s$0;
  } else {
   $$25 = $$03;
   $28 = $7;
   $s$2 = $s$0;
  }
  $27 = $28 & 255;
  if (($27 + -1 | 0) >>> 0 < 127) {
   $$03 = $$25 + -1 | 0;
   $s$0 = $s$2 + 1 | 0;
   label = 7;
   continue;
  } else {
   $$25$lcssa = $$25;
   $$lcssa90 = $27;
   $s$2$lcssa = $s$2;
  }
  $33 = $$lcssa90 + -194 | 0;
  if ($33 >>> 0 > 50) {
   $$434 = $ws;
   $$833 = $$25$lcssa;
   $s$1035 = $s$2$lcssa;
   label = 48;
   break;
  }
  $$36 = $$25$lcssa;
  $c$2 = HEAP32[3420 + ($33 << 2) >> 2] | 0;
  $s$3 = $s$2$lcssa + 1 | 0;
  label = 16;
  continue;
 } else if ((label | 0) == 16) {
  label = 0;
  $40 = (HEAPU8[$s$3 >> 0] | 0) >>> 3;
  if (($40 + -16 | $40 + ($c$2 >> 26)) >>> 0 > 7) {
   label = 17;
   break;
  }
  $47 = $s$3 + 1 | 0;
  if (!($c$2 & 33554432)) $s$4 = $47; else {
   if ((HEAP8[$47 >> 0] & -64) << 24 >> 24 != -128) {
    label = 20;
    break;
   }
   $54 = $s$3 + 2 | 0;
   if (!($c$2 & 524288)) $s$4 = $54; else {
    if ((HEAP8[$54 >> 0] & -64) << 24 >> 24 != -128) {
     label = 23;
     break;
    }
    $s$4 = $s$3 + 3 | 0;
   }
  }
  $$03 = $$36 + -1 | 0;
  $s$0 = $s$4;
  label = 7;
  continue;
 } else if ((label | 0) == 37) {
  label = 0;
  $107 = HEAPU8[$s$8 >> 0] | 0;
  $108 = $107 >>> 3;
  if (($108 + -16 | $108 + ($c$4 >> 26)) >>> 0 > 7) {
   label = 38;
   break;
  }
  $116 = $s$8 + 1 | 0;
  $118 = $107 + -128 | $c$4 << 6;
  if (($118 | 0) < 0) {
   $121 = HEAPU8[$116 >> 0] | 0;
   if (($121 & 192 | 0) != 128) {
    label = 41;
    break;
   }
   $126 = $s$8 + 2 | 0;
   $128 = $121 + -128 | $118 << 6;
   if (($128 | 0) < 0) {
    $131 = HEAPU8[$126 >> 0] | 0;
    if (($131 & 192 | 0) != 128) {
     label = 44;
     break;
    }
    $c$5 = $131 + -128 | $128 << 6;
    $s$9 = $s$8 + 3 | 0;
   } else {
    $c$5 = $128;
    $s$9 = $126;
   }
  } else {
   $c$5 = $118;
   $s$9 = $116;
  }
  HEAP32[$$3 >> 2] = $c$5;
  $$02$ph = $$3 + 4 | 0;
  $$47$ph = $$7 + -1 | 0;
  $s$5$ph = $s$9;
  label = 6;
  continue;
 }
 if ((label | 0) == 17) {
  $$4 = $ws;
  $$8 = $$36;
  $c$6 = $c$2;
  $s$10 = $s$3 + -1 | 0;
  label = 47;
 } else if ((label | 0) == 20) {
  $$4 = $ws;
  $$8 = $$36;
  $c$6 = $c$2;
  $s$10 = $s$3 + -1 | 0;
  label = 47;
 } else if ((label | 0) == 23) {
  $$4 = $ws;
  $$8 = $$36;
  $c$6 = $c$2;
  $s$10 = $s$3 + -1 | 0;
  label = 47;
 } else if ((label | 0) == 26) {
  HEAP32[$src >> 2] = $s$5$lcssa;
  $$0 = $wn;
 } else if ((label | 0) == 38) {
  $$4 = $$3;
  $$8 = $$7;
  $c$6 = $c$4;
  $s$10 = $s$8 + -1 | 0;
  label = 47;
 } else if ((label | 0) == 41) {
  $$48 = $$3;
  $s$109 = $s$8 + -1 | 0;
  label = 52;
 } else if ((label | 0) == 44) {
  $$48 = $$3;
  $s$109 = $s$8 + -1 | 0;
  label = 52;
 }
 if ((label | 0) == 47) if (!$c$6) {
  $$434 = $$4;
  $$833 = $$8;
  $s$1035 = $s$10;
  label = 48;
 } else {
  $$48 = $$4;
  $s$109 = $s$10;
  label = 52;
 }
 if ((label | 0) == 48) if (!(HEAP8[$s$1035 >> 0] | 0)) {
  if ($$434) {
   HEAP32[$$434 >> 2] = 0;
   HEAP32[$src >> 2] = 0;
  }
  $$0 = $wn - $$833 | 0;
 } else {
  $$48 = $$434;
  $s$109 = $s$1035;
  label = 52;
 }
 if ((label | 0) == 52) {
  $146 = ___errno_location() | 0;
  HEAP32[$146 >> 2] = 84;
  if (!$$48) $$0 = -1; else {
   HEAP32[$src >> 2] = $s$109;
   $$0 = -1;
  }
 }
 return $$0 | 0;
}

function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$$0 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$2 = 0, $$0$i$i$8 = 0, $$0$i$i$8$lcssa = 0, $$0$i$i$lcssa = 0, $$01$i$i = 0, $$2 = 0, $$lcssa35 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $111 = 0, $113 = 0, $114 = 0, $116 = 0, $12 = 0, $125 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $133 = 0, $135 = 0, $137 = 0, $142 = 0, $143 = 0, $145 = 0, $15 = 0, $19 = 0, $2 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $5 = 0, $51 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $62 = 0, $64 = 0, $66 = 0, $7 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $86 = 0, $88 = 0, $9 = 0, $94 = 0, $95 = 0, $97 = 0, $99 = 0, $__d$0 = 0, $__d$0$lcssa = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__f$0 = 0, $__f$1 = 0, $__gl$0 = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0;
 HEAP32[$__me >> 2] = $__mb;
 $0 = $__sn + 4 | 0;
 $1 = $__sn + 8 | 0;
 $2 = $__sn + 1 | 0;
 $3 = $__sym + 4 | 0;
 $5 = ($__flags & 512 | 0) == 0;
 $6 = $__sym + 8 | 0;
 $7 = $__sym + 1 | 0;
 $8 = $__ct + 8 | 0;
 $9 = ($__fd | 0) > 0;
 $10 = $__grp + 4 | 0;
 $11 = $__grp + 8 | 0;
 $12 = $__grp + 1 | 0;
 $$0 = $__db;
 $__p$0 = 0;
 while (1) {
  if (($__p$0 | 0) == 4) break;
  L4 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $$2 = $$0;
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $29 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 63]($__ct, 32) | 0;
    $30 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__me >> 2] = $30 + 1;
    HEAP8[$30 >> 0] = $29;
    $$2 = $$0;
    break;
   }
  case 3:
   {
    $32 = HEAP8[$__sn >> 0] | 0;
    $34 = ($32 & 1) == 0;
    if (!(($34 ? ($32 & 255) >>> 1 : HEAP32[$0 >> 2] | 0) | 0)) $$2 = $$0; else {
     $42 = HEAP8[($34 ? $2 : HEAP32[$1 >> 2] | 0) >> 0] | 0;
     $43 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $43 + 1;
     HEAP8[$43 >> 0] = $42;
     $$2 = $$0;
    }
    break;
   }
  case 2:
   {
    $45 = HEAP8[$__sym >> 0] | 0;
    $47 = ($45 & 1) == 0;
    $51 = $47 ? ($45 & 255) >>> 1 : HEAP32[$3 >> 2] | 0;
    if ($5 | ($51 | 0) == 0) $$2 = $$0; else {
     $54 = $47 ? $7 : HEAP32[$6 >> 2] | 0;
     $55 = $54 + $51 | 0;
     $$0$i$i$8 = HEAP32[$__me >> 2] | 0;
     $57 = $54;
     while (1) {
      if (($57 | 0) == ($55 | 0)) {
       $$0$i$i$8$lcssa = $$0$i$i$8;
       break;
      }
      HEAP8[$$0$i$i$8 >> 0] = HEAP8[$57 >> 0] | 0;
      $$0$i$i$8 = $$0$i$i$8 + 1 | 0;
      $57 = $57 + 1 | 0;
     }
     HEAP32[$__me >> 2] = $$0$i$i$8$lcssa;
     $$2 = $$0;
    }
    break;
   }
  case 4:
   {
    $62 = HEAP32[$__me >> 2] | 0;
    $$$0 = $__neg ? $$0 + 1 | 0 : $$0;
    $64 = HEAP32[$8 >> 2] | 0;
    $__d$0 = $$$0;
    while (1) {
     if ($__d$0 >>> 0 >= $__de >>> 0) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $66 = HEAP8[$__d$0 >> 0] | 0;
     if ($66 << 24 >> 24 <= -1) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     if (!(HEAP16[$64 + ($66 << 24 >> 24 << 1) >> 1] & 2048)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $__d$0 = $__d$0 + 1 | 0;
    }
    if ($9) {
     $__d$1 = $__d$0$lcssa;
     $__f$0 = $__fd;
     while (1) {
      $74 = ($__f$0 | 0) > 0;
      if (!($__d$1 >>> 0 > $$$0 >>> 0 & $74)) break;
      $76 = $__d$1 + -1 | 0;
      $77 = HEAP8[$76 >> 0] | 0;
      $78 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $78 + 1;
      HEAP8[$78 >> 0] = $77;
      $__d$1 = $76;
      $__f$0 = $__f$0 + -1 | 0;
     }
     if ($74) $88 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 63]($__ct, 48) | 0; else $88 = 0;
     $__f$1 = $__f$0;
     while (1) {
      $86 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $86 + 1;
      if (($__f$1 | 0) <= 0) {
       $$lcssa35 = $86;
       break;
      }
      HEAP8[$86 >> 0] = $88;
      $__f$1 = $__f$1 + -1 | 0;
     }
     HEAP8[$$lcssa35 >> 0] = $__dp;
     $__d$2 = $__d$1;
    } else $__d$2 = $__d$0$lcssa;
    L35 : do if (($__d$2 | 0) == ($$$0 | 0)) {
     $94 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 63]($__ct, 48) | 0;
     $95 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $95 + 1;
     HEAP8[$95 >> 0] = $94;
    } else {
     $97 = HEAP8[$__grp >> 0] | 0;
     $99 = ($97 & 1) == 0;
     if (!(($99 ? ($97 & 255) >>> 1 : HEAP32[$10 >> 2] | 0) | 0)) {
      $__d$3 = $__d$2;
      $__gl$0 = -1;
      $__ig$0 = 0;
      $__ng$0 = 0;
     } else {
      $__d$3 = $__d$2;
      $__gl$0 = HEAP8[($99 ? $12 : HEAP32[$11 >> 2] | 0) >> 0] | 0;
      $__ig$0 = 0;
      $__ng$0 = 0;
     }
     while (1) {
      if (($__d$3 | 0) == ($$$0 | 0)) break L35;
      if (($__ng$0 | 0) == ($__gl$0 | 0)) {
       $111 = HEAP32[$__me >> 2] | 0;
       HEAP32[$__me >> 2] = $111 + 1;
       HEAP8[$111 >> 0] = $__ts;
       $113 = $__ig$0 + 1 | 0;
       $114 = HEAP8[$__grp >> 0] | 0;
       $116 = ($114 & 1) == 0;
       if ($113 >>> 0 < ($116 ? ($114 & 255) >>> 1 : HEAP32[$10 >> 2] | 0) >>> 0) {
        $125 = HEAP8[($116 ? $12 : HEAP32[$11 >> 2] | 0) + $113 >> 0] | 0;
        $__gl$1 = $125 << 24 >> 24 == 127 ? -1 : $125 << 24 >> 24;
        $__ig$1 = $113;
        $__ng$1 = 0;
       } else {
        $__gl$1 = $__ng$0;
        $__ig$1 = $113;
        $__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$0;
       $__ig$1 = $__ig$0;
       $__ng$1 = $__ng$0;
      }
      $128 = $__d$3 + -1 | 0;
      $129 = HEAP8[$128 >> 0] | 0;
      $130 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $130 + 1;
      HEAP8[$130 >> 0] = $129;
      $__d$3 = $128;
      $__gl$0 = $__gl$1;
      $__ig$0 = $__ig$1;
      $__ng$0 = $__ng$1 + 1 | 0;
     }
    } while (0);
    $133 = HEAP32[$__me >> 2] | 0;
    if (($62 | 0) == ($133 | 0)) $$2 = $$$0; else {
     $$0$i$i$2 = $133;
     $$01$i$i = $62;
     while (1) {
      $135 = $$0$i$i$2 + -1 | 0;
      if ($$01$i$i >>> 0 >= $135 >>> 0) {
       $$2 = $$$0;
       break L4;
      }
      $137 = HEAP8[$$01$i$i >> 0] | 0;
      HEAP8[$$01$i$i >> 0] = HEAP8[$135 >> 0] | 0;
      HEAP8[$135 >> 0] = $137;
      $$0$i$i$2 = $135;
      $$01$i$i = $$01$i$i + 1 | 0;
     }
    }
    break;
   }
  default:
   $$2 = $$0;
  } while (0);
  $$0 = $$2;
  $__p$0 = $__p$0 + 1 | 0;
 }
 $13 = HEAP8[$__sn >> 0] | 0;
 $15 = ($13 & 1) == 0;
 $19 = $15 ? ($13 & 255) >>> 1 : HEAP32[$0 >> 2] | 0;
 if ($19 >>> 0 > 1) {
  $142 = $15 ? $2 : HEAP32[$1 >> 2] | 0;
  $143 = $142 + $19 | 0;
  $$0$i$i = HEAP32[$__me >> 2] | 0;
  $$pn = $142;
  while (1) {
   $145 = $$pn + 1 | 0;
   if (($145 | 0) == ($143 | 0)) {
    $$0$i$i$lcssa = $$0$i$i;
    break;
   }
   HEAP8[$$0$i$i >> 0] = HEAP8[$145 >> 0] | 0;
   $$0$i$i = $$0$i$i + 1 | 0;
   $$pn = $145;
  }
  HEAP32[$__me >> 2] = $$0$i$i$lcssa;
 }
 switch ($__flags & 176 | 0) {
 case 32:
  {
   HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[$__mi >> 2] = $__mb;
 }
 return;
}

function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$$0 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$2 = 0, $$0$i$i$6 = 0, $$01$i$i = 0, $$2 = 0, $$lcssa34 = 0, $$lcssa35 = 0, $0 = 0, $1 = 0, $10 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $111 = 0, $119 = 0, $12 = 0, $122 = 0, $123 = 0, $125 = 0, $128 = 0, $129 = 0, $131 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $142 = 0, $143 = 0, $16 = 0, $2 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $48 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $59 = 0, $6 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $__d$0 = 0, $__d$0$lcssa = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__f$0 = 0, $__f$1 = 0, $__gl$0 = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0;
 HEAP32[$__me >> 2] = $__mb;
 $0 = $__sn + 4 | 0;
 $1 = $__sn + 8 | 0;
 $2 = $__sym + 4 | 0;
 $4 = ($__flags & 512 | 0) == 0;
 $5 = $__sym + 8 | 0;
 $6 = ($__fd | 0) > 0;
 $7 = $__grp + 4 | 0;
 $8 = $__grp + 8 | 0;
 $9 = $__grp + 1 | 0;
 $$0 = $__db;
 $__p$0 = 0;
 while (1) {
  if (($__p$0 | 0) == 4) break;
  L4 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $$2 = $$0;
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $26 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 63]($__ct, 32) | 0;
    $27 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__me >> 2] = $27 + 4;
    HEAP32[$27 >> 2] = $26;
    $$2 = $$0;
    break;
   }
  case 3:
   {
    $29 = HEAP8[$__sn >> 0] | 0;
    $31 = ($29 & 1) == 0;
    if (!(($31 ? ($29 & 255) >>> 1 : HEAP32[$0 >> 2] | 0) | 0)) $$2 = $$0; else {
     $39 = HEAP32[($31 ? $0 : HEAP32[$1 >> 2] | 0) >> 2] | 0;
     $40 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $40 + 4;
     HEAP32[$40 >> 2] = $39;
     $$2 = $$0;
    }
    break;
   }
  case 2:
   {
    $42 = HEAP8[$__sym >> 0] | 0;
    $44 = ($42 & 1) == 0;
    $48 = $44 ? ($42 & 255) >>> 1 : HEAP32[$2 >> 2] | 0;
    if ($4 | ($48 | 0) == 0) $$2 = $$0; else {
     $51 = $44 ? $2 : HEAP32[$5 >> 2] | 0;
     $52 = $51 + ($48 << 2) | 0;
     $53 = HEAP32[$__me >> 2] | 0;
     $$0$i$i$6 = $53;
     $54 = $51;
     while (1) {
      if (($54 | 0) == ($52 | 0)) break;
      HEAP32[$$0$i$i$6 >> 2] = HEAP32[$54 >> 2];
      $$0$i$i$6 = $$0$i$i$6 + 4 | 0;
      $54 = $54 + 4 | 0;
     }
     HEAP32[$__me >> 2] = $53 + ($48 << 2);
     $$2 = $$0;
    }
    break;
   }
  case 4:
   {
    $59 = HEAP32[$__me >> 2] | 0;
    $$$0 = $__neg ? $$0 + 4 | 0 : $$0;
    $__d$0 = $$$0;
    while (1) {
     if ($__d$0 >>> 0 >= $__de >>> 0) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 127]($__ct, 2048, HEAP32[$__d$0 >> 2] | 0) | 0)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $__d$0 = $__d$0 + 4 | 0;
    }
    if ($6) {
     $__d$1 = $__d$0$lcssa;
     $__f$0 = $__fd;
     while (1) {
      $69 = ($__f$0 | 0) > 0;
      if (!($__d$1 >>> 0 > $$$0 >>> 0 & $69)) break;
      $71 = $__d$1 + -4 | 0;
      $72 = HEAP32[$71 >> 2] | 0;
      $73 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $73 + 4;
      HEAP32[$73 >> 2] = $72;
      $__d$1 = $71;
      $__f$0 = $__f$0 + -1 | 0;
     }
     if ($69) $83 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 63]($__ct, 48) | 0; else $83 = 0;
     $82 = HEAP32[$__me >> 2] | 0;
     $__f$1 = $__f$0;
     while (1) {
      $81 = $82 + 4 | 0;
      if (($__f$1 | 0) <= 0) {
       $$lcssa34 = $82;
       $$lcssa35 = $81;
       break;
      }
      HEAP32[$82 >> 2] = $83;
      $82 = $81;
      $__f$1 = $__f$1 + -1 | 0;
     }
     HEAP32[$__me >> 2] = $$lcssa35;
     HEAP32[$$lcssa34 >> 2] = $__dp;
     $__d$2 = $__d$1;
    } else $__d$2 = $__d$0$lcssa;
    if (($__d$2 | 0) == ($$$0 | 0)) {
     $89 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 63]($__ct, 48) | 0;
     $90 = HEAP32[$__me >> 2] | 0;
     $91 = $90 + 4 | 0;
     HEAP32[$__me >> 2] = $91;
     HEAP32[$90 >> 2] = $89;
     $128 = $91;
    } else {
     $92 = HEAP8[$__grp >> 0] | 0;
     $94 = ($92 & 1) == 0;
     $95 = HEAP32[$7 >> 2] | 0;
     if (!(($94 ? ($92 & 255) >>> 1 : $95) | 0)) {
      $__d$3 = $__d$2;
      $__gl$0 = -1;
      $__ig$0 = 0;
      $__ng$0 = 0;
     } else {
      $__d$3 = $__d$2;
      $__gl$0 = HEAP8[($94 ? $9 : HEAP32[$8 >> 2] | 0) >> 0] | 0;
      $__ig$0 = 0;
      $__ng$0 = 0;
     }
     while (1) {
      if (($__d$3 | 0) == ($$$0 | 0)) break;
      $106 = HEAP32[$__me >> 2] | 0;
      if (($__ng$0 | 0) == ($__gl$0 | 0)) {
       $107 = $106 + 4 | 0;
       HEAP32[$__me >> 2] = $107;
       HEAP32[$106 >> 2] = $__ts;
       $108 = $__ig$0 + 1 | 0;
       $109 = HEAP8[$__grp >> 0] | 0;
       $111 = ($109 & 1) == 0;
       if ($108 >>> 0 < ($111 ? ($109 & 255) >>> 1 : $95) >>> 0) {
        $119 = HEAP8[($111 ? $9 : HEAP32[$8 >> 2] | 0) + $108 >> 0] | 0;
        $125 = $107;
        $__gl$1 = $119 << 24 >> 24 == 127 ? -1 : $119 << 24 >> 24;
        $__ig$1 = $108;
        $__ng$1 = 0;
       } else {
        $125 = $107;
        $__gl$1 = $__ng$0;
        $__ig$1 = $108;
        $__ng$1 = 0;
       }
      } else {
       $125 = $106;
       $__gl$1 = $__gl$0;
       $__ig$1 = $__ig$0;
       $__ng$1 = $__ng$0;
      }
      $122 = $__d$3 + -4 | 0;
      $123 = HEAP32[$122 >> 2] | 0;
      HEAP32[$__me >> 2] = $125 + 4;
      HEAP32[$125 >> 2] = $123;
      $__d$3 = $122;
      $__gl$0 = $__gl$1;
      $__ig$0 = $__ig$1;
      $__ng$0 = $__ng$1 + 1 | 0;
     }
     $128 = HEAP32[$__me >> 2] | 0;
    }
    if (($59 | 0) == ($128 | 0)) $$2 = $$$0; else {
     $$0$i$i$2 = $128;
     $$01$i$i = $59;
     while (1) {
      $129 = $$0$i$i$2 + -4 | 0;
      if ($$01$i$i >>> 0 >= $129 >>> 0) {
       $$2 = $$$0;
       break L4;
      }
      $131 = HEAP32[$$01$i$i >> 2] | 0;
      HEAP32[$$01$i$i >> 2] = HEAP32[$129 >> 2];
      HEAP32[$129 >> 2] = $131;
      $$0$i$i$2 = $129;
      $$01$i$i = $$01$i$i + 4 | 0;
     }
    }
    break;
   }
  default:
   $$2 = $$0;
  } while (0);
  $$0 = $$2;
  $__p$0 = $__p$0 + 1 | 0;
 }
 $10 = HEAP8[$__sn >> 0] | 0;
 $12 = ($10 & 1) == 0;
 $16 = $12 ? ($10 & 255) >>> 1 : HEAP32[$0 >> 2] | 0;
 if ($16 >>> 0 > 1) {
  $136 = $12 ? $0 : HEAP32[$1 >> 2] | 0;
  $137 = $136 + 4 | 0;
  $138 = $136 + ($16 << 2) | 0;
  $139 = HEAP32[$__me >> 2] | 0;
  $142 = $138 - $137 | 0;
  $$0$i$i = $139;
  $143 = $137;
  while (1) {
   if (($143 | 0) == ($138 | 0)) break;
   HEAP32[$$0$i$i >> 2] = HEAP32[$143 >> 2];
   $$0$i$i = $$0$i$i + 4 | 0;
   $143 = $143 + 4 | 0;
  }
  HEAP32[$__me >> 2] = $139 + ($142 >>> 2 << 2);
 }
 switch ($__flags & 176 | 0) {
 case 32:
  {
   HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[$__mi >> 2] = $__mb;
 }
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$8 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$2 = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$4 = 0, $$pre$i$i$i$lcssa = 0, $$pre22 = 0, $100 = 0, $101 = 0, $103 = 0.0, $104 = 0, $107 = 0, $11 = 0, $119 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $85 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $__atoms = sp + 208 | 0;
 $__decimal_point = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 337 | 0;
 $__exp = sp + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $7 = 10; else $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0);
 $11 = $__buf + 8 | 0;
 $13 = $__buf + 1 | 0;
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $14;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $15 = $__buf + 4 | 0;
 $16 = HEAP32[$__decimal_point >> 2] | 0;
 $17 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i$4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $14;
 L8 : while (1) {
  if (!$$pre$i$i$i$4) {
   $$pre$i$i$i = 0;
   $132 = 1;
  } else {
   $20 = HEAP32[$$pre$i$i$i$4 + 12 >> 2] | 0;
   if (($20 | 0) == (HEAP32[$$pre$i$i$i$4 + 16 >> 2] | 0)) $$0$i$i$i$i$2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$4 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$4) | 0; else $$0$i$i$i$i$2 = HEAP32[$20 >> 2] | 0;
   if (($$0$i$i$i$i$2 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $132 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i$4;
    $132 = 0;
   }
  }
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 19; else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$1$i$i$8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$1$i$i$8 = HEAP32[$33 >> 2] | 0;
   if (($$0$i$i$1$i$i$8 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($132) {
    $133 = $30;
    break;
   } else {
    $$pre$i$3$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($132) {
    $$pre$i$3$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $44 = HEAP8[$__buf >> 0] | 0;
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$15 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $59 = 10; else $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $64 + $50;
   $__a$1 = $64;
  } else $__a$1 = $__a$0;
  $66 = $$pre$i$i$i + 12 | 0;
  $67 = HEAP32[$66 >> 2] | 0;
  $68 = $$pre$i$i$i + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$3$i$i = $133;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$4 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4;
   $$pre$i$i$i$4 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 $$pre22 = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) $104 = $$pre22; else if (($$pre22 - $__g | 0) < 160) {
  $100 = HEAP32[$__dc >> 2] | 0;
  $101 = $$pre22 + 4 | 0;
  HEAP32[$__g_end >> 2] = $101;
  HEAP32[$$pre22 >> 2] = $100;
  $104 = $101;
 } else $104 = $$pre22;
 $103 = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF32[$__v >> 2] = $103;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $104, $__err);
 if (!$$pre$i$i$i$lcssa) $134 = 1; else {
  $107 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($107 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$107 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 1;
  } else $134 = 0;
 }
 do if (!$$pre$i$3$i$i) label = 47; else {
  $119 = HEAP32[$$pre$i$3$i$i + 12 >> 2] | 0;
  if (($119 | 0) == (HEAP32[$$pre$i$3$i$i + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$3$i$i) | 0; else $$0$i$i$1$i$i = HEAP32[$119 >> 2] | 0;
  if (($$0$i$i$1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 47;
   break;
  } else if ($134) break; else {
   label = 49;
   break;
  }
 } while (0);
 if ((label | 0) == 47) if ($134) label = 49;
 if ((label | 0) == 49) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $131 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $131 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$8 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$2 = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$4 = 0, $$pre$i$i$i$lcssa = 0, $$pre22 = 0, $100 = 0, $101 = 0, $103 = 0.0, $104 = 0, $107 = 0, $11 = 0, $119 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $85 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $__atoms = sp + 208 | 0;
 $__decimal_point = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 337 | 0;
 $__exp = sp + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $7 = 10; else $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0);
 $11 = $__buf + 8 | 0;
 $13 = $__buf + 1 | 0;
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $14;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $15 = $__buf + 4 | 0;
 $16 = HEAP32[$__decimal_point >> 2] | 0;
 $17 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i$4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $14;
 L8 : while (1) {
  if (!$$pre$i$i$i$4) {
   $$pre$i$i$i = 0;
   $132 = 1;
  } else {
   $20 = HEAP32[$$pre$i$i$i$4 + 12 >> 2] | 0;
   if (($20 | 0) == (HEAP32[$$pre$i$i$i$4 + 16 >> 2] | 0)) $$0$i$i$i$i$2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$4 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$4) | 0; else $$0$i$i$i$i$2 = HEAP32[$20 >> 2] | 0;
   if (($$0$i$i$i$i$2 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $132 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i$4;
    $132 = 0;
   }
  }
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 19; else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$1$i$i$8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$1$i$i$8 = HEAP32[$33 >> 2] | 0;
   if (($$0$i$i$1$i$i$8 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($132) {
    $133 = $30;
    break;
   } else {
    $$pre$i$3$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($132) {
    $$pre$i$3$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $44 = HEAP8[$__buf >> 0] | 0;
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$15 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $59 = 10; else $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $64 + $50;
   $__a$1 = $64;
  } else $__a$1 = $__a$0;
  $66 = $$pre$i$i$i + 12 | 0;
  $67 = HEAP32[$66 >> 2] | 0;
  $68 = $$pre$i$i$i + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$3$i$i = $133;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$4 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4;
   $$pre$i$i$i$4 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 $$pre22 = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) $104 = $$pre22; else if (($$pre22 - $__g | 0) < 160) {
  $100 = HEAP32[$__dc >> 2] | 0;
  $101 = $$pre22 + 4 | 0;
  HEAP32[$__g_end >> 2] = $101;
  HEAP32[$$pre22 >> 2] = $100;
  $104 = $101;
 } else $104 = $$pre22;
 $103 = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF64[$__v >> 3] = $103;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $104, $__err);
 if (!$$pre$i$i$i$lcssa) $134 = 1; else {
  $107 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($107 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$107 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 1;
  } else $134 = 0;
 }
 do if (!$$pre$i$3$i$i) label = 47; else {
  $119 = HEAP32[$$pre$i$3$i$i + 12 >> 2] | 0;
  if (($119 | 0) == (HEAP32[$$pre$i$3$i$i + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$3$i$i) | 0; else $$0$i$i$1$i$i = HEAP32[$119 >> 2] | 0;
  if (($$0$i$i$1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 47;
   break;
  } else if ($134) break; else {
   label = 49;
   break;
  }
 } while (0);
 if ((label | 0) == 47) if ($134) label = 49;
 if ((label | 0) == 49) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $131 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $131 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$8 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$2 = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$4 = 0, $$pre$i$i$i$lcssa = 0, $$pre22 = 0, $100 = 0, $101 = 0, $103 = 0.0, $104 = 0, $107 = 0, $11 = 0, $119 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $85 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $__atoms = sp + 208 | 0;
 $__decimal_point = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 337 | 0;
 $__exp = sp + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $7 = 10; else $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0);
 $11 = $__buf + 8 | 0;
 $13 = $__buf + 1 | 0;
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $14;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $15 = $__buf + 4 | 0;
 $16 = HEAP32[$__decimal_point >> 2] | 0;
 $17 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i$4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $14;
 L8 : while (1) {
  if (!$$pre$i$i$i$4) {
   $$pre$i$i$i = 0;
   $132 = 1;
  } else {
   $20 = HEAP32[$$pre$i$i$i$4 + 12 >> 2] | 0;
   if (($20 | 0) == (HEAP32[$$pre$i$i$i$4 + 16 >> 2] | 0)) $$0$i$i$i$i$2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$4 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$4) | 0; else $$0$i$i$i$i$2 = HEAP32[$20 >> 2] | 0;
   if (($$0$i$i$i$i$2 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $132 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i$4;
    $132 = 0;
   }
  }
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 19; else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$1$i$i$8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$1$i$i$8 = HEAP32[$33 >> 2] | 0;
   if (($$0$i$i$1$i$i$8 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($132) {
    $133 = $30;
    break;
   } else {
    $$pre$i$3$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($132) {
    $$pre$i$3$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $44 = HEAP8[$__buf >> 0] | 0;
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$15 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $59 = 10; else $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $64 + $50;
   $__a$1 = $64;
  } else $__a$1 = $__a$0;
  $66 = $$pre$i$i$i + 12 | 0;
  $67 = HEAP32[$66 >> 2] | 0;
  $68 = $$pre$i$i$i + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$3$i$i = $133;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$4 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4;
   $$pre$i$i$i$4 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 $$pre22 = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) $104 = $$pre22; else if (($$pre22 - $__g | 0) < 160) {
  $100 = HEAP32[$__dc >> 2] | 0;
  $101 = $$pre22 + 4 | 0;
  HEAP32[$__g_end >> 2] = $101;
  HEAP32[$$pre22 >> 2] = $100;
  $104 = $101;
 } else $104 = $$pre22;
 $103 = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF64[$__v >> 3] = $103;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $104, $__err);
 if (!$$pre$i$i$i$lcssa) $134 = 1; else {
  $107 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($107 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$107 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 1;
  } else $134 = 0;
 }
 do if (!$$pre$i$3$i$i) label = 47; else {
  $119 = HEAP32[$$pre$i$3$i$i + 12 >> 2] | 0;
  if (($119 | 0) == (HEAP32[$$pre$i$3$i$i + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$3$i$i) | 0; else $$0$i$i$1$i$i = HEAP32[$119 >> 2] | 0;
  if (($$0$i$i$1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 47;
   break;
  } else if ($134) break; else {
   label = 49;
   break;
  }
 } while (0);
 if ((label | 0) == 47) if ($134) label = 49;
 if ((label | 0) == 49) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $131 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $131 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$7 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$1 = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$3 = 0, $$pre$i$i$i$lcssa = 0, $$pre21 = 0, $0 = 0, $101 = 0, $103 = 0, $107 = 0, $110 = 0, $12 = 0, $122 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $8 = 10; else $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0);
 $12 = $__buf + 8 | 0;
 $14 = $__buf + 1 | 0;
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $15;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $16 = $__buf + 4 | 0;
 $17 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i$3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $15;
 L8 : while (1) {
  if (!$$pre$i$i$i$3) {
   $$pre$i$i$i = 0;
   $135 = 1;
  } else {
   $20 = HEAP32[$$pre$i$i$i$3 + 12 >> 2] | 0;
   if (($20 | 0) == (HEAP32[$$pre$i$i$i$3 + 16 >> 2] | 0)) $$0$i$i$i$i$1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$3 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$3) | 0; else $$0$i$i$i$i$1 = HEAP32[$20 >> 2] | 0;
   if (($$0$i$i$i$i$1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $135 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i$3;
    $135 = 0;
   }
  }
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 19; else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$1$i$i$7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$1$i$i$7 = HEAP32[$33 >> 2] | 0;
   if (($$0$i$i$1$i$i$7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($135) {
    $136 = $30;
    break;
   } else {
    $$pre$i$3$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($135) {
    $$pre$i$3$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $136 = 0;
  }
  $44 = HEAP8[$__buf >> 0] | 0;
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$16 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $59 = 10; else $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $64 + $50;
   $__a$1 = $64;
  } else $__a$1 = $__a$0;
  $66 = $$pre$i$i$i + 12 | 0;
  $67 = HEAP32[$66 >> 2] | 0;
  $68 = $$pre$i$i$i + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$3$i$i = $136;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 $$pre21 = HEAP32[$__g_end >> 2] | 0;
 if (!((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $107 = $$pre21; else if (($$pre21 - $__g | 0) < 160) {
  $98 = HEAP32[$__dc >> 2] | 0;
  $99 = $$pre21 + 4 | 0;
  HEAP32[$__g_end >> 2] = $99;
  HEAP32[$$pre21 >> 2] = $98;
  $107 = $99;
 } else $107 = $$pre21;
 $101 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 $103 = $__v;
 HEAP32[$103 >> 2] = $101;
 HEAP32[$103 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $107, $__err);
 if (!$$pre$i$i$i$lcssa) $137 = 1; else {
  $110 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($110 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$110 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $137 = 1;
  } else $137 = 0;
 }
 do if (!$$pre$i$3$i$i) label = 47; else {
  $122 = HEAP32[$$pre$i$3$i$i + 12 >> 2] | 0;
  if (($122 | 0) == (HEAP32[$$pre$i$3$i$i + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$3$i$i) | 0; else $$0$i$i$1$i$i = HEAP32[$122 >> 2] | 0;
  if (($$0$i$i$1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 47;
   break;
  } else if ($137) break; else {
   label = 49;
   break;
  }
 } while (0);
 if ((label | 0) == 47) if ($137) label = 49;
 if ((label | 0) == 49) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $134 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $134 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$7 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$1 = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$3 = 0, $$pre$i$i$i$lcssa = 0, $$pre21 = 0, $0 = 0, $101 = 0, $103 = 0, $107 = 0, $110 = 0, $12 = 0, $122 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $8 = 10; else $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0);
 $12 = $__buf + 8 | 0;
 $14 = $__buf + 1 | 0;
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $15;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $16 = $__buf + 4 | 0;
 $17 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i$3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $15;
 L8 : while (1) {
  if (!$$pre$i$i$i$3) {
   $$pre$i$i$i = 0;
   $135 = 1;
  } else {
   $20 = HEAP32[$$pre$i$i$i$3 + 12 >> 2] | 0;
   if (($20 | 0) == (HEAP32[$$pre$i$i$i$3 + 16 >> 2] | 0)) $$0$i$i$i$i$1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$3 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$3) | 0; else $$0$i$i$i$i$1 = HEAP32[$20 >> 2] | 0;
   if (($$0$i$i$i$i$1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $135 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i$3;
    $135 = 0;
   }
  }
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 19; else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$1$i$i$7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$1$i$i$7 = HEAP32[$33 >> 2] | 0;
   if (($$0$i$i$1$i$i$7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($135) {
    $136 = $30;
    break;
   } else {
    $$pre$i$3$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($135) {
    $$pre$i$3$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $136 = 0;
  }
  $44 = HEAP8[$__buf >> 0] | 0;
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$16 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $59 = 10; else $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $64 + $50;
   $__a$1 = $64;
  } else $__a$1 = $__a$0;
  $66 = $$pre$i$i$i + 12 | 0;
  $67 = HEAP32[$66 >> 2] | 0;
  $68 = $$pre$i$i$i + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$3$i$i = $136;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 $$pre21 = HEAP32[$__g_end >> 2] | 0;
 if (!((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $107 = $$pre21; else if (($$pre21 - $__g | 0) < 160) {
  $98 = HEAP32[$__dc >> 2] | 0;
  $99 = $$pre21 + 4 | 0;
  HEAP32[$__g_end >> 2] = $99;
  HEAP32[$$pre21 >> 2] = $98;
  $107 = $99;
 } else $107 = $$pre21;
 $101 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 $103 = $__v;
 HEAP32[$103 >> 2] = $101;
 HEAP32[$103 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $107, $__err);
 if (!$$pre$i$i$i$lcssa) $137 = 1; else {
  $110 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($110 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$110 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $137 = 1;
  } else $137 = 0;
 }
 do if (!$$pre$i$3$i$i) label = 47; else {
  $122 = HEAP32[$$pre$i$3$i$i + 12 >> 2] | 0;
  if (($122 | 0) == (HEAP32[$$pre$i$3$i$i + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$3$i$i) | 0; else $$0$i$i$1$i$i = HEAP32[$122 >> 2] | 0;
  if (($$0$i$i$1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 47;
   break;
  } else if ($137) break; else {
   label = 49;
   break;
  }
 } while (0);
 if ((label | 0) == 47) if ($137) label = 49;
 if ((label | 0) == 49) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $134 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $134 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$7 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$1 = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$3 = 0, $$pre$i$i$i$lcssa = 0, $$pre21 = 0, $0 = 0, $101 = 0, $102 = 0, $105 = 0, $117 = 0, $12 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $8 = 10; else $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0);
 $12 = $__buf + 8 | 0;
 $14 = $__buf + 1 | 0;
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $15;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $16 = $__buf + 4 | 0;
 $17 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i$3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $15;
 L8 : while (1) {
  if (!$$pre$i$i$i$3) {
   $$pre$i$i$i = 0;
   $130 = 1;
  } else {
   $20 = HEAP32[$$pre$i$i$i$3 + 12 >> 2] | 0;
   if (($20 | 0) == (HEAP32[$$pre$i$i$i$3 + 16 >> 2] | 0)) $$0$i$i$i$i$1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$3 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$3) | 0; else $$0$i$i$i$i$1 = HEAP32[$20 >> 2] | 0;
   if (($$0$i$i$i$i$1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $130 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i$3;
    $130 = 0;
   }
  }
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 19; else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$1$i$i$7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$1$i$i$7 = HEAP32[$33 >> 2] | 0;
   if (($$0$i$i$1$i$i$7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($130) {
    $131 = $30;
    break;
   } else {
    $$pre$i$3$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($130) {
    $$pre$i$3$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $131 = 0;
  }
  $44 = HEAP8[$__buf >> 0] | 0;
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$16 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $59 = 10; else $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $64 + $50;
   $__a$1 = $64;
  } else $__a$1 = $__a$0;
  $66 = $$pre$i$i$i + 12 | 0;
  $67 = HEAP32[$66 >> 2] | 0;
  $68 = $$pre$i$i$i + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$3$i$i = $131;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 $$pre21 = HEAP32[$__g_end >> 2] | 0;
 if (!((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $102 = $$pre21; else if (($$pre21 - $__g | 0) < 160) {
  $98 = HEAP32[$__dc >> 2] | 0;
  $99 = $$pre21 + 4 | 0;
  HEAP32[$__g_end >> 2] = $99;
  HEAP32[$$pre21 >> 2] = $98;
  $102 = $99;
 } else $102 = $$pre21;
 $101 = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 HEAP16[$__v >> 1] = $101;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $102, $__err);
 if (!$$pre$i$i$i$lcssa) $132 = 1; else {
  $105 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($105 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$105 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $132 = 1;
  } else $132 = 0;
 }
 do if (!$$pre$i$3$i$i) label = 47; else {
  $117 = HEAP32[$$pre$i$3$i$i + 12 >> 2] | 0;
  if (($117 | 0) == (HEAP32[$$pre$i$3$i$i + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$3$i$i) | 0; else $$0$i$i$1$i$i = HEAP32[$117 >> 2] | 0;
  if (($$0$i$i$1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 47;
   break;
  } else if ($132) break; else {
   label = 49;
   break;
  }
 } while (0);
 if ((label | 0) == 47) if ($132) label = 49;
 if ((label | 0) == 49) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $129 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $129 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$7 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$1 = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$3 = 0, $$pre$i$i$i$lcssa = 0, $$pre21 = 0, $0 = 0, $101 = 0, $102 = 0, $105 = 0, $117 = 0, $12 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $8 = 10; else $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0);
 $12 = $__buf + 8 | 0;
 $14 = $__buf + 1 | 0;
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $15;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $16 = $__buf + 4 | 0;
 $17 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i$3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $15;
 L8 : while (1) {
  if (!$$pre$i$i$i$3) {
   $$pre$i$i$i = 0;
   $130 = 1;
  } else {
   $20 = HEAP32[$$pre$i$i$i$3 + 12 >> 2] | 0;
   if (($20 | 0) == (HEAP32[$$pre$i$i$i$3 + 16 >> 2] | 0)) $$0$i$i$i$i$1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$3 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$3) | 0; else $$0$i$i$i$i$1 = HEAP32[$20 >> 2] | 0;
   if (($$0$i$i$i$i$1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $130 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i$3;
    $130 = 0;
   }
  }
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 19; else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$1$i$i$7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$1$i$i$7 = HEAP32[$33 >> 2] | 0;
   if (($$0$i$i$1$i$i$7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($130) {
    $131 = $30;
    break;
   } else {
    $$pre$i$3$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($130) {
    $$pre$i$3$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $131 = 0;
  }
  $44 = HEAP8[$__buf >> 0] | 0;
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$16 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $59 = 10; else $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $64 + $50;
   $__a$1 = $64;
  } else $__a$1 = $__a$0;
  $66 = $$pre$i$i$i + 12 | 0;
  $67 = HEAP32[$66 >> 2] | 0;
  $68 = $$pre$i$i$i + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$3$i$i = $131;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 $$pre21 = HEAP32[$__g_end >> 2] | 0;
 if (!((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $102 = $$pre21; else if (($$pre21 - $__g | 0) < 160) {
  $98 = HEAP32[$__dc >> 2] | 0;
  $99 = $$pre21 + 4 | 0;
  HEAP32[$__g_end >> 2] = $99;
  HEAP32[$$pre21 >> 2] = $98;
  $102 = $99;
 } else $102 = $$pre21;
 $101 = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 HEAP32[$__v >> 2] = $101;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $102, $__err);
 if (!$$pre$i$i$i$lcssa) $132 = 1; else {
  $105 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($105 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$105 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $132 = 1;
  } else $132 = 0;
 }
 do if (!$$pre$i$3$i$i) label = 47; else {
  $117 = HEAP32[$$pre$i$3$i$i + 12 >> 2] | 0;
  if (($117 | 0) == (HEAP32[$$pre$i$3$i$i + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$3$i$i) | 0; else $$0$i$i$1$i$i = HEAP32[$117 >> 2] | 0;
  if (($$0$i$i$1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 47;
   break;
  } else if ($132) break; else {
   label = 49;
   break;
  }
 } while (0);
 if ((label | 0) == 47) if ($132) label = 49;
 if ((label | 0) == 49) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $129 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $129 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$7 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$1 = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$3 = 0, $$pre$i$i$i$lcssa = 0, $$pre21 = 0, $0 = 0, $101 = 0, $102 = 0, $105 = 0, $117 = 0, $12 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $8 = 10; else $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0);
 $12 = $__buf + 8 | 0;
 $14 = $__buf + 1 | 0;
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $15;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $16 = $__buf + 4 | 0;
 $17 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i$3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $15;
 L8 : while (1) {
  if (!$$pre$i$i$i$3) {
   $$pre$i$i$i = 0;
   $130 = 1;
  } else {
   $20 = HEAP32[$$pre$i$i$i$3 + 12 >> 2] | 0;
   if (($20 | 0) == (HEAP32[$$pre$i$i$i$3 + 16 >> 2] | 0)) $$0$i$i$i$i$1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$3 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$3) | 0; else $$0$i$i$i$i$1 = HEAP32[$20 >> 2] | 0;
   if (($$0$i$i$i$i$1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $130 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i$3;
    $130 = 0;
   }
  }
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 19; else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$1$i$i$7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$1$i$i$7 = HEAP32[$33 >> 2] | 0;
   if (($$0$i$i$1$i$i$7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($130) {
    $131 = $30;
    break;
   } else {
    $$pre$i$3$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($130) {
    $$pre$i$3$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $131 = 0;
  }
  $44 = HEAP8[$__buf >> 0] | 0;
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$16 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $59 = 10; else $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $64 + $50;
   $__a$1 = $64;
  } else $__a$1 = $__a$0;
  $66 = $$pre$i$i$i + 12 | 0;
  $67 = HEAP32[$66 >> 2] | 0;
  $68 = $$pre$i$i$i + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$3$i$i = $131;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 $$pre21 = HEAP32[$__g_end >> 2] | 0;
 if (!((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $102 = $$pre21; else if (($$pre21 - $__g | 0) < 160) {
  $98 = HEAP32[$__dc >> 2] | 0;
  $99 = $$pre21 + 4 | 0;
  HEAP32[$__g_end >> 2] = $99;
  HEAP32[$$pre21 >> 2] = $98;
  $102 = $99;
 } else $102 = $$pre21;
 $101 = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 HEAP32[$__v >> 2] = $101;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $102, $__err);
 if (!$$pre$i$i$i$lcssa) $132 = 1; else {
  $105 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($105 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$105 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $132 = 1;
  } else $132 = 0;
 }
 do if (!$$pre$i$3$i$i) label = 47; else {
  $117 = HEAP32[$$pre$i$3$i$i + 12 >> 2] | 0;
  if (($117 | 0) == (HEAP32[$$pre$i$3$i$i + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$3$i$i) | 0; else $$0$i$i$1$i$i = HEAP32[$117 >> 2] | 0;
  if (($$0$i$i$1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 47;
   break;
  } else if ($132) break; else {
   label = 49;
   break;
  }
 } while (0);
 if ((label | 0) == 47) if ($132) label = 49;
 if ((label | 0) == 49) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $129 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $129 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$7 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$1 = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$3 = 0, $$pre$i$i$i$lcssa = 0, $$pre21 = 0, $0 = 0, $101 = 0, $102 = 0, $105 = 0, $117 = 0, $12 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $8 = 10; else $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0);
 $12 = $__buf + 8 | 0;
 $14 = $__buf + 1 | 0;
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $15;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $16 = $__buf + 4 | 0;
 $17 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i$3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $15;
 L8 : while (1) {
  if (!$$pre$i$i$i$3) {
   $$pre$i$i$i = 0;
   $130 = 1;
  } else {
   $20 = HEAP32[$$pre$i$i$i$3 + 12 >> 2] | 0;
   if (($20 | 0) == (HEAP32[$$pre$i$i$i$3 + 16 >> 2] | 0)) $$0$i$i$i$i$1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$3 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$3) | 0; else $$0$i$i$i$i$1 = HEAP32[$20 >> 2] | 0;
   if (($$0$i$i$i$i$1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $130 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i$3;
    $130 = 0;
   }
  }
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 19; else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i$1$i$i$7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $$0$i$i$1$i$i$7 = HEAP32[$33 >> 2] | 0;
   if (($$0$i$i$1$i$i$7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($130) {
    $131 = $30;
    break;
   } else {
    $$pre$i$3$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($130) {
    $$pre$i$3$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $131 = 0;
  }
  $44 = HEAP8[$__buf >> 0] | 0;
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$16 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $59 = 10; else $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $64 + $50;
   $__a$1 = $64;
  } else $__a$1 = $__a$0;
  $66 = $$pre$i$i$i + 12 | 0;
  $67 = HEAP32[$66 >> 2] | 0;
  $68 = $$pre$i$i$i + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$3$i$i = $131;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 $$pre21 = HEAP32[$__g_end >> 2] | 0;
 if (!((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $102 = $$pre21; else if (($$pre21 - $__g | 0) < 160) {
  $98 = HEAP32[$__dc >> 2] | 0;
  $99 = $$pre21 + 4 | 0;
  HEAP32[$__g_end >> 2] = $99;
  HEAP32[$$pre21 >> 2] = $98;
  $102 = $99;
 } else $102 = $$pre21;
 $101 = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 HEAP32[$__v >> 2] = $101;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $102, $__err);
 if (!$$pre$i$i$i$lcssa) $132 = 1; else {
  $105 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($105 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$105 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $132 = 1;
  } else $132 = 0;
 }
 do if (!$$pre$i$3$i$i) label = 47; else {
  $117 = HEAP32[$$pre$i$3$i$i + 12 >> 2] | 0;
  if (($117 | 0) == (HEAP32[$$pre$i$3$i$i + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$3$i$i) | 0; else $$0$i$i$1$i$i = HEAP32[$117 >> 2] | 0;
  if (($$0$i$i$1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 47;
   break;
  } else if ($132) break; else {
   label = 49;
   break;
  }
 } while (0);
 if ((label | 0) == 47) if ($132) label = 49;
 if ((label | 0) == 49) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $129 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $129 | 0;
}

function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$0$i$i = 0, $$0$i$i$2 = 0, $$01$i$i = 0, $$01$i$i$1 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $103 = 0, $11 = 0, $117 = 0, $118 = 0, $123 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $135 = 0, $136 = 0, $137 = 0, $142 = 0, $146 = 0, $152 = 0, $153 = 0, $19 = 0, $24 = 0, $25 = 0, $27 = 0, $32 = 0, $33 = 0, $37 = 0, $44 = 0, $49 = 0, $5 = 0, $52 = 0, $66 = 0, $68 = 0, $70 = 0, $76 = 0, $77 = 0, $78 = 0, $83 = 0, $84 = 0, $86 = 0, $88 = 0, $97 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$2$lcssa19 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10384) | 0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10540) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 127]($__grouping, $1);
 HEAP32[$__oe >> 2] = $__ob;
 $5 = HEAP8[$__nb >> 0] | 0;
 switch ($5 << 24 >> 24) {
 case 43:
 case 45:
  {
   $10 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 63]($0, $5) | 0;
   $11 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $11 + 4;
   HEAP32[$11 >> 2] = $10;
   $__nf$0 = $__nb + 1 | 0;
   break;
  }
 default:
  $__nf$0 = $__nb;
 }
 $13 = $__ne;
 L4 : do if (($13 - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
  $19 = $__nf$0 + 1 | 0;
  switch (HEAP8[$19 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    $__ns$1 = $__nf$0;
    label = 10;
    break L4;
   }
  }
  $24 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 63]($0, 48) | 0;
  $25 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $25 + 4;
  HEAP32[$25 >> 2] = $24;
  $27 = $__nf$0 + 2 | 0;
  $32 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 63]($0, HEAP8[$19 >> 0] | 0) | 0;
  $33 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $33 + 4;
  HEAP32[$33 >> 2] = $32;
  $__ns$0 = $27;
  while (1) {
   if ($__ns$0 >>> 0 >= $__ne >>> 0) {
    $__nf$1 = $27;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $37 = HEAP8[$__ns$0 >> 0] | 0;
   if (!(_isxdigit_l($37, __ZNSt3__16__clocEv() | 0) | 0)) {
    $__nf$1 = $27;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $__ns$0 = $__ns$0 + 1 | 0;
  }
 } else {
  $__ns$1 = $__nf$0;
  label = 10;
 } else {
  $__ns$1 = $__nf$0;
  label = 10;
 } while (0);
 L12 : do if ((label | 0) == 10) while (1) {
  label = 0;
  if ($__ns$1 >>> 0 >= $__ne >>> 0) {
   $__nf$1 = $__nf$0;
   $__ns$2 = $__ns$1;
   break L12;
  }
  $44 = HEAP8[$__ns$1 >> 0] | 0;
  if (!(_isdigit_l($44, __ZNSt3__16__clocEv() | 0) | 0)) {
   $__nf$1 = $__nf$0;
   $__ns$2 = $__ns$1;
   break L12;
  }
  $__ns$1 = $__ns$1 + 1 | 0;
  label = 10;
 } while (0);
 $49 = HEAP8[$__grouping >> 0] | 0;
 $52 = $__grouping + 4 | 0;
 L18 : do if (!((($49 & 1) == 0 ? ($49 & 255) >>> 1 : HEAP32[$52 >> 2] | 0) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 63]($0, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0;
  $66 = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1 << 2) | 0;
  HEAP32[$__oe >> 2] = $66;
  $$pre$phiZ2D = $0;
  $152 = $66;
 } else {
  L21 : do if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $$0$i$i = $__ns$2;
   $$01$i$i = $__nf$1;
   while (1) {
    $68 = $$0$i$i + -1 | 0;
    if ($$01$i$i >>> 0 >= $68 >>> 0) break L21;
    $70 = HEAP8[$$01$i$i >> 0] | 0;
    HEAP8[$$01$i$i >> 0] = HEAP8[$68 >> 0] | 0;
    HEAP8[$68 >> 0] = $70;
    $$0$i$i = $68;
    $$01$i$i = $$01$i$i + 1 | 0;
   }
  } while (0);
  $76 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 127]($1) | 0;
  $77 = $__grouping + 8 | 0;
  $78 = $__grouping + 1 | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ns$2 >>> 0) break;
   $97 = HEAP8[((HEAP8[$__grouping >> 0] & 1) == 0 ? $78 : HEAP32[$77 >> 2] | 0) + $__dg$0 >> 0] | 0;
   if ($97 << 24 >> 24 > 0 & ($__dc$0 | 0) == ($97 << 24 >> 24 | 0)) {
    $101 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $101 + 4;
    HEAP32[$101 >> 2] = $76;
    $103 = HEAP8[$__grouping >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = ($__dg$0 >>> 0 < ((($103 & 1) == 0 ? ($103 & 255) >>> 1 : HEAP32[$52 >> 2] | 0) + -1 | 0) >>> 0 & 1) + $__dg$0 | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $117 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 63]($0, HEAP8[$__p$0 >> 0] | 0) | 0;
   $118 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $118 + 4;
   HEAP32[$118 >> 2] = $117;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $83 = $__ob + ($__nf$1 - $__nb << 2) | 0;
  $84 = HEAP32[$__oe >> 2] | 0;
  if (($83 | 0) == ($84 | 0)) {
   $$pre$phiZ2D = $0;
   $152 = $83;
  } else {
   $$0$i$i$2 = $84;
   $$01$i$i$1 = $83;
   while (1) {
    $86 = $$0$i$i$2 + -4 | 0;
    if ($$01$i$i$1 >>> 0 >= $86 >>> 0) {
     $$pre$phiZ2D = $0;
     $152 = $84;
     break L18;
    }
    $88 = HEAP32[$$01$i$i$1 >> 2] | 0;
    HEAP32[$$01$i$i$1 >> 2] = HEAP32[$86 >> 2];
    HEAP32[$86 >> 2] = $88;
    $$0$i$i$2 = $86;
    $$01$i$i$1 = $$01$i$i$1 + 4 | 0;
   }
  }
 } while (0);
 $153 = $152;
 $__nf$2 = $__ns$2;
 while (1) {
  if ($__nf$2 >>> 0 >= $__ne >>> 0) {
   $142 = $153;
   $__nf$3 = $__nf$2;
   break;
  }
  $123 = HEAP8[$__nf$2 >> 0] | 0;
  if ($123 << 24 >> 24 == 46) {
   $__nf$2$lcssa19 = $__nf$2;
   label = 29;
   break;
  }
  $135 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 44 >> 2] & 63]($0, $123) | 0;
  $136 = HEAP32[$__oe >> 2] | 0;
  $137 = $136 + 4 | 0;
  HEAP32[$__oe >> 2] = $137;
  HEAP32[$136 >> 2] = $135;
  $153 = $137;
  $__nf$2 = $__nf$2 + 1 | 0;
 }
 if ((label | 0) == 29) {
  $128 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] & 127]($1) | 0;
  $129 = HEAP32[$__oe >> 2] | 0;
  $130 = $129 + 4 | 0;
  HEAP32[$__oe >> 2] = $130;
  HEAP32[$129 >> 2] = $128;
  $142 = $130;
  $__nf$3 = $__nf$2$lcssa19 + 1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 63]($0, $__nf$3, $__ne, $142) | 0;
 $146 = (HEAP32[$__oe >> 2] | 0) + ($13 - $__nf$3 << 2) | 0;
 HEAP32[$__oe >> 2] = $146;
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $146 : $__ob + ($__np - $__nb << 2) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$10 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$4 = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$6 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $104 = 0, $116 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $15 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $3 = 0, $36 = 0, $39 = 0, $4 = 0, $50 = 0, $56 = 0, $65 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $84 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i$1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 $vararg_buffer = sp;
 $__atoms = sp + 208 | 0;
 $__grouping = sp + 196 | 0;
 $0 = sp + 180 | 0;
 $__buf = sp + 184 | 0;
 $__a_end = sp + 176 | 0;
 $__g = sp + 16 | 0;
 $__g_end = sp + 8 | 0;
 $__dc = sp + 4 | 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grouping + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $3 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $3;
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 10384) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 48 >> 2] & 63]($4, 22824, 22850, $__atoms) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($3) | 0;
 $__i$0$i$i$1 = 0;
 while (1) {
  if (($__i$0$i$i$1 | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i$1 << 2) >> 2] = 0;
  $__i$0$i$i$1 = $__i$0$i$i$1 + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $15 = 10; else $15 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $15, 0);
 $19 = $__buf + 8 | 0;
 $21 = $__buf + 1 | 0;
 $22 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $22;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $23 = $__buf + 4 | 0;
 $$pre$i$i$i$6 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $22;
 L12 : while (1) {
  if (!$$pre$i$i$i$6) {
   $$pre$i$i$i = 0;
   $129 = 1;
  } else {
   $26 = HEAP32[$$pre$i$i$i$6 + 12 >> 2] | 0;
   if (($26 | 0) == (HEAP32[$$pre$i$i$i$6 + 16 >> 2] | 0)) $$0$i$i$i$i$4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$6 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$6) | 0; else $$0$i$i$i$i$4 = HEAP32[$26 >> 2] | 0;
   if (($$0$i$i$i$i$4 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $129 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i$6;
    $129 = 0;
   }
  }
  $36 = HEAP32[$__e >> 2] | 0;
  do if (!$36) label = 22; else {
   $39 = HEAP32[$36 + 12 >> 2] | 0;
   if (($39 | 0) == (HEAP32[$36 + 16 >> 2] | 0)) $$0$i$i$1$i$i$10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 127]($36) | 0; else $$0$i$i$1$i$i$10 = HEAP32[$39 >> 2] | 0;
   if (($$0$i$i$1$i$i$10 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 22;
    break;
   } else if ($129) {
    $130 = $36;
    break;
   } else {
    $$pre$i$3$i$i = $36;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L12;
   }
  } while (0);
  if ((label | 0) == 22) {
   label = 0;
   if ($129) {
    $$pre$i$3$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $130 = 0;
  }
  $50 = HEAP8[$__buf >> 0] | 0;
  $56 = ($50 & 1) == 0 ? ($50 & 255) >>> 1 : HEAP32[$23 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $56 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $56 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $65 = 10; else $65 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $65, 0);
   $70 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $70 + $56;
   $__a$1 = $70;
  } else $__a$1 = $__a$0;
  $72 = $$pre$i$i$i + 12 | 0;
  $73 = HEAP32[$72 >> 2] | 0;
  $74 = $$pre$i$i$i + 16 | 0;
  if (($73 | 0) == (HEAP32[$74 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$73 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$3$i$i = $130;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $84 = HEAP32[$72 >> 2] | 0;
  if (($84 | 0) == (HEAP32[$74 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$6 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$72 >> 2] = $84 + 4;
   $$pre$i$i$i$6 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, (HEAP32[$__a_end >> 2] | 0) - $__a$2 | 0, 0);
 $98 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0;
 $99 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($98, $99, 24208, $vararg_buffer) | 0) != 1) HEAP32[$__err >> 2] = 4;
 if (!$$pre$i$i$i$lcssa) $131 = 1; else {
  $104 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($104 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$104 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $131 = 1;
  } else $131 = 0;
 }
 do if (!$$pre$i$3$i$i) label = 49; else {
  $116 = HEAP32[$$pre$i$3$i$i + 12 >> 2] | 0;
  if (($116 | 0) == (HEAP32[$$pre$i$3$i$i + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$3$i$i) | 0; else $$0$i$i$1$i$i = HEAP32[$116 >> 2] | 0;
  if (($$0$i$i$1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 49;
   break;
  } else if ($131) break; else {
   label = 51;
   break;
  }
 } while (0);
 if ((label | 0) == 49) if ($131) label = 51;
 if ((label | 0) == 51) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $128 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $128 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$3 = 0, $$pre$i$i$i$lcssa = 0, $$pre19 = 0, $101 = 0, $102 = 0, $104 = 0.0, $105 = 0, $11 = 0, $117 = 0, $118 = 0, $13 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $86 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $__atoms = sp + 200 | 0;
 $__decimal_point = sp + 199 | 0;
 $__thousands_sep = sp + 198 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 197 | 0;
 $__exp = sp + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $7 = 10; else $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0);
 $11 = $__buf + 8 | 0;
 $13 = $__buf + 1 | 0;
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $14;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $15 = $__buf + 4 | 0;
 $16 = HEAP8[$__decimal_point >> 0] | 0;
 $17 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i$3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $14;
 L8 : while (1) {
  if (!$$pre$i$i$i$3) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i$3 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$3 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$3 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$3) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i$3; else $$pre$i$i$i = $$pre$i$i$i$3;
  $29 = ($$pre$i$i$i | 0) == 0;
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 16; else {
   if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) if ($29) {
    $133 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 16;
    break;
   } else if ($29) {
    $133 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($29) {
    $$pre$i$2$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $43 = HEAP8[$__buf >> 0] | 0;
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$15 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0);
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $49;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $$pre$i$i$i + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $$pre$i$i$i + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$2$i$i = $133;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 $$pre19 = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) $105 = $$pre19; else if (($$pre19 - $__g | 0) < 160) {
  $101 = HEAP32[$__dc >> 2] | 0;
  $102 = $$pre19 + 4 | 0;
  HEAP32[$__g_end >> 2] = $102;
  HEAP32[$$pre19 >> 2] = $101;
  $105 = $102;
 } else $105 = $$pre19;
 $104 = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF32[$__v >> 2] = $104;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $105, $__err);
 if (!$$pre$i$i$i$lcssa) $117 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $117 = 0;
 } else $117 = $$pre$i$i$i$lcssa; else $117 = $$pre$i$i$i$lcssa;
 $118 = ($117 | 0) == 0;
 do if (!$$pre$i$2$i$i) label = 41; else {
  if ((HEAP32[$$pre$i$2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  }
  if (!$118) label = 42;
 } while (0);
 if ((label | 0) == 41) if ($118) label = 42;
 if ((label | 0) == 42) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $132 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $132 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$3 = 0, $$pre$i$i$i$lcssa = 0, $$pre19 = 0, $101 = 0, $102 = 0, $104 = 0.0, $105 = 0, $11 = 0, $117 = 0, $118 = 0, $13 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $86 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $__atoms = sp + 200 | 0;
 $__decimal_point = sp + 199 | 0;
 $__thousands_sep = sp + 198 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 197 | 0;
 $__exp = sp + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $7 = 10; else $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0);
 $11 = $__buf + 8 | 0;
 $13 = $__buf + 1 | 0;
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $14;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $15 = $__buf + 4 | 0;
 $16 = HEAP8[$__decimal_point >> 0] | 0;
 $17 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i$3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $14;
 L8 : while (1) {
  if (!$$pre$i$i$i$3) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i$3 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$3 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$3 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$3) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i$3; else $$pre$i$i$i = $$pre$i$i$i$3;
  $29 = ($$pre$i$i$i | 0) == 0;
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 16; else {
   if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) if ($29) {
    $133 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 16;
    break;
   } else if ($29) {
    $133 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($29) {
    $$pre$i$2$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $43 = HEAP8[$__buf >> 0] | 0;
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$15 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0);
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $49;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $$pre$i$i$i + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $$pre$i$i$i + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$2$i$i = $133;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 $$pre19 = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) $105 = $$pre19; else if (($$pre19 - $__g | 0) < 160) {
  $101 = HEAP32[$__dc >> 2] | 0;
  $102 = $$pre19 + 4 | 0;
  HEAP32[$__g_end >> 2] = $102;
  HEAP32[$$pre19 >> 2] = $101;
  $105 = $102;
 } else $105 = $$pre19;
 $104 = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF64[$__v >> 3] = $104;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $105, $__err);
 if (!$$pre$i$i$i$lcssa) $117 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $117 = 0;
 } else $117 = $$pre$i$i$i$lcssa; else $117 = $$pre$i$i$i$lcssa;
 $118 = ($117 | 0) == 0;
 do if (!$$pre$i$2$i$i) label = 41; else {
  if ((HEAP32[$$pre$i$2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  }
  if (!$118) label = 42;
 } while (0);
 if ((label | 0) == 41) if ($118) label = 42;
 if ((label | 0) == 42) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $132 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $132 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$3 = 0, $$pre$i$i$i$lcssa = 0, $$pre19 = 0, $101 = 0, $102 = 0, $104 = 0.0, $105 = 0, $11 = 0, $117 = 0, $118 = 0, $13 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $86 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $__atoms = sp + 200 | 0;
 $__decimal_point = sp + 199 | 0;
 $__thousands_sep = sp + 198 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 197 | 0;
 $__exp = sp + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $7 = 10; else $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0);
 $11 = $__buf + 8 | 0;
 $13 = $__buf + 1 | 0;
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $14;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $15 = $__buf + 4 | 0;
 $16 = HEAP8[$__decimal_point >> 0] | 0;
 $17 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i$3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $14;
 L8 : while (1) {
  if (!$$pre$i$i$i$3) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i$3 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$3 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$3 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$3) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i$3; else $$pre$i$i$i = $$pre$i$i$i$3;
  $29 = ($$pre$i$i$i | 0) == 0;
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 16; else {
   if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) if ($29) {
    $133 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 16;
    break;
   } else if ($29) {
    $133 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($29) {
    $$pre$i$2$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $43 = HEAP8[$__buf >> 0] | 0;
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$15 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0);
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $49;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $$pre$i$i$i + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $$pre$i$i$i + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$2$i$i = $133;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i$3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 $$pre19 = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) $105 = $$pre19; else if (($$pre19 - $__g | 0) < 160) {
  $101 = HEAP32[$__dc >> 2] | 0;
  $102 = $$pre19 + 4 | 0;
  HEAP32[$__g_end >> 2] = $102;
  HEAP32[$$pre19 >> 2] = $101;
  $105 = $102;
 } else $105 = $$pre19;
 $104 = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF64[$__v >> 3] = $104;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $105, $__err);
 if (!$$pre$i$i$i$lcssa) $117 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $117 = 0;
 } else $117 = $$pre$i$i$i$lcssa; else $117 = $$pre$i$i$i$lcssa;
 $118 = ($117 | 0) == 0;
 do if (!$$pre$i$2$i$i) label = 41; else {
  if ((HEAP32[$$pre$i$2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  }
  if (!$118) label = 42;
 } while (0);
 if ((label | 0) == 41) if ($118) label = 42;
 if ((label | 0) == 42) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $132 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $132 | 0;
}

function __ZN4GearC2EdR6VectorPFvdPdS2_ER7Options($this, $t0, $x0, $rightSide, $opts) {
 $this = $this | 0;
 $t0 = +$t0;
 $x0 = $x0 | 0;
 $rightSide = $rightSide | 0;
 $opts = $opts | 0;
 var $0 = 0, $1 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $117 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0.0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $30 = 0, $33 = 0, $35 = 0, $39 = 0.0, $41 = 0, $42 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0, $59 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $70 = 0, $72 = 0, $73 = 0.0, $74 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $83 = 0.0, $88 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dx = 0, $ewt = 0, $i$034 = 0, $i1$032 = 0, $sum$0$lcssa = 0.0, $sum$033 = 0.0, $ywt = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 8 | 0;
 $dx = sp + 32 | 0;
 $ewt = sp + 16 | 0;
 $ywt = sp;
 $2 = $this + 8 | 0;
 HEAPF64[$2 >> 3] = 0.0;
 HEAPF64[$this + 16 >> 3] = 1.0e-08;
 HEAPF64[$this + 24 >> 3] = 1.0e-06;
 HEAPF64[$this + 40 >> 3] = 1797693134862315708145274.0e284;
 HEAPF64[$this + 48 >> 3] = 0.0;
 HEAPF64[$this + 56 >> 3] = 1.1;
 HEAPF64[$this + 64 >> 3] = .9;
 HEAPF64[$this + 32 >> 3] = 0.0;
 HEAP32[$this + 76 >> 2] = 5;
 HEAP32[$this + 72 >> 2] = 0;
 $12 = $this + 80 | 0;
 HEAP32[$12 >> 2] = 0;
 HEAP32[$this + 144 >> 2] = 0;
 $14 = $this + 148 | 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$this >> 2] = $rightSide;
 dest = $2;
 src = $opts;
 stop = dest + 72 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $15 = $x0 + 4 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $17 = $this + 152 | 0;
 HEAP32[$17 >> 2] = $16;
 $19 = +HEAPF64[$opts + 24 >> 3];
 if ($19 > 0.0) {
  HEAPF64[$this + 176 >> 3] = $19 + $t0;
  $23 = __Znwj(8) | 0;
  __ZN6VectorC2ERKS_($23, $x0);
  HEAP32[$this + 156 >> 2] = $23;
  $25 = __Znwj(8) | 0;
  __ZN6VectorC2ERKS_($25, $x0);
  HEAP32[$this + 160 >> 2] = $25;
  $27 = __Znwj(16) | 0;
  __ZN6VectorC2ERKS_($0, $x0);
  __ZN6VectorC2ERKS_($27, $0);
  HEAPF64[$27 + 8 >> 3] = $t0;
  HEAP32[$this + 184 >> 2] = $27;
  __ZN6VectorD2Ev($0);
  $30 = __Znwj(16) | 0;
  __ZN6VectorC2ERKS_($1, $x0);
  __ZN6VectorC2ERKS_($30, $1);
  HEAPF64[$30 + 8 >> 3] = $t0;
  HEAP32[$this + 188 >> 2] = $30;
  __ZN6VectorD2Ev($1);
  $33 = HEAP32[$15 >> 2] | 0;
 } else $33 = $16;
 $35 = __Znaj($33 >>> 0 > 536870911 ? -1 : $33 << 3) | 0;
 FUNCTION_TABLE_vdii[HEAP32[$this >> 2] & 63]($t0, HEAP32[$x0 >> 2] | 0, $35);
 __ZN6VectorC2EPKdi($dx, $35, HEAP32[$15 >> 2] | 0);
 __ZdaPv($35);
 $39 = +HEAPF64[$opts >> 3];
 if ($39 != 0.0) $90 = $39; else {
  $41 = $opts + 16 | 0;
  $42 = +HEAPF64[$41 >> 3];
  __ZN6VectorC2Ei($ewt, HEAP32[$17 >> 2] | 0);
  __ZN6VectorC2Ei($ywt, HEAP32[$17 >> 2] | 0);
  if ((HEAP32[$17 >> 2] | 0) > 0) {
   $47 = $opts + 8 | 0;
   $i$034 = 0;
   $sum$033 = 0.0;
   while (1) {
    $60 = +HEAPF64[$41 >> 3];
    $61 = __ZNK6VectorixEi($x0, $i$034) | 0;
    $62 = +HEAPF64[$61 >> 3];
    $63 = +HEAPF64[$47 >> 3];
    $64 = __ZNK6VectorixEi($ewt, $i$034) | 0;
    $67 = $63 + $60 * +Math_abs(+$62);
    HEAPF64[$64 >> 3] = $67;
    $68 = __ZNK6VectorixEi($ewt, $i$034) | 0;
    $69 = +HEAPF64[$68 >> 3];
    $70 = __ZNK6VectorixEi($ywt, $i$034) | 0;
    HEAPF64[$70 >> 3] = $69 / $42;
    $72 = __ZNK6VectorixEi($dx, $i$034) | 0;
    $73 = +HEAPF64[$72 >> 3];
    $74 = __ZNK6VectorixEi($dx, $i$034) | 0;
    $76 = $73 * +HEAPF64[$74 >> 3];
    $77 = __ZNK6VectorixEi($ywt, $i$034) | 0;
    $78 = +HEAPF64[$77 >> 3];
    $79 = __ZNK6VectorixEi($ywt, $i$034) | 0;
    $83 = $sum$033 + $76 / ($78 * +HEAPF64[$79 >> 3]);
    $i$034 = $i$034 + 1 | 0;
    if (($i$034 | 0) >= (HEAP32[$17 >> 2] | 0)) {
     $sum$0$lcssa = $83;
     break;
    } else $sum$033 = $83;
   }
  } else $sum$0$lcssa = 0.0;
  $48 = __ZNK6VectorixEi($ywt, 0) | 0;
  $49 = +HEAPF64[$48 >> 3];
  $50 = __ZNK6VectorixEi($ywt, 0) | 0;
  $59 = +Math_sqrt(+($42 / (1.0 / ($49 * +HEAPF64[$50 >> 3]) + $sum$0$lcssa / +(HEAP32[$17 >> 2] | 0))));
  __ZN6VectorD2Ev($ywt);
  __ZN6VectorD2Ev($ewt);
  $90 = $59;
 }
 $88 = +HEAPF64[$opts + 32 >> 3];
 $91 = $88 < $90 ? $88 : $90;
 $92 = __Znwj(12) | 0;
 __ZN6MatrixC2Eii($92, HEAP32[$17 >> 2] | 0, 6);
 $94 = HEAP32[$17 >> 2] | 0;
 if (($94 | 0) > 0) $i1$032 = 0; else {
  $104 = $94;
  $96 = $this + 104 | 0;
  $97 = $this + 96 | 0;
  HEAP32[$96 >> 2] = 0;
  HEAP32[$96 + 4 >> 2] = 0;
  HEAP32[$96 + 8 >> 2] = 0;
  HEAP32[$96 + 12 >> 2] = 0;
  HEAPF64[$97 >> 3] = $91;
  $98 = $this + 88 | 0;
  HEAPF64[$98 >> 3] = $t0;
  $99 = $this + 120 | 0;
  HEAP32[$99 >> 2] = 2;
  $100 = $this + 124 | 0;
  HEAP32[$100 >> 2] = 5;
  $101 = $this + 128 | 0;
  HEAP32[$101 >> 2] = 0;
  HEAP32[$12 >> 2] = $92;
  $102 = $this + 136 | 0;
  HEAPF64[$102 >> 3] = 1.0;
  $103 = __Znwj(8) | 0;
  __ZN6VectorC2Ei($103, $104);
  HEAP32[$14 >> 2] = $103;
  __ZN6VectorD2Ev($dx);
  STACKTOP = sp;
  return;
 }
 do {
  $105 = __ZNK6VectorixEi($x0, $i1$032) | 0;
  $106 = +HEAPF64[$105 >> 3];
  $107 = __ZNK6Matrix9ElementAtEii($92, $i1$032, 0) | 0;
  HEAPF64[$107 >> 3] = $106;
  $108 = __ZNK6VectorixEi($dx, $i1$032) | 0;
  $109 = +HEAPF64[$108 >> 3];
  $110 = __ZNK6Matrix9ElementAtEii($92, $i1$032, 1) | 0;
  HEAPF64[$110 >> 3] = $91 * $109;
  $112 = __ZNK6Matrix9ElementAtEii($92, $i1$032, 2) | 0;
  HEAPF64[$112 >> 3] = 0.0;
  $113 = __ZNK6Matrix9ElementAtEii($92, $i1$032, 3) | 0;
  HEAPF64[$113 >> 3] = 0.0;
  $114 = __ZNK6Matrix9ElementAtEii($92, $i1$032, 4) | 0;
  HEAPF64[$114 >> 3] = 0.0;
  $115 = __ZNK6Matrix9ElementAtEii($92, $i1$032, 5) | 0;
  HEAPF64[$115 >> 3] = 0.0;
  $i1$032 = $i1$032 + 1 | 0;
  $117 = HEAP32[$17 >> 2] | 0;
 } while (($i1$032 | 0) < ($117 | 0));
 $104 = $117;
 $96 = $this + 104 | 0;
 $97 = $this + 96 | 0;
 HEAP32[$96 >> 2] = 0;
 HEAP32[$96 + 4 >> 2] = 0;
 HEAP32[$96 + 8 >> 2] = 0;
 HEAP32[$96 + 12 >> 2] = 0;
 HEAPF64[$97 >> 3] = $91;
 $98 = $this + 88 | 0;
 HEAPF64[$98 >> 3] = $t0;
 $99 = $this + 120 | 0;
 HEAP32[$99 >> 2] = 2;
 $100 = $this + 124 | 0;
 HEAP32[$100 >> 2] = 5;
 $101 = $this + 128 | 0;
 HEAP32[$101 >> 2] = 0;
 HEAP32[$12 >> 2] = $92;
 $102 = $this + 136 | 0;
 HEAPF64[$102 >> 3] = 1.0;
 $103 = __Znwj(8) | 0;
 __ZN6VectorC2Ei($103, $104);
 HEAP32[$14 >> 2] = $103;
 __ZN6VectorD2Ev($dx);
 STACKTOP = sp;
 return;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$23 = 0, $$0$i$i$1$i$i$8 = 0, $$0$i$i$14 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$17 = 0, $$0$i$i$i$i$2 = 0, $$0$in = 0, $$2 = 0, $$lcssa = 0, $$pre$i$3$i$i$10 = 0, $$pre$i$3$i$i$25 = 0, $$pre$i$3$i$i$25$lcssa = 0, $0 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $124 = 0, $13 = 0, $136 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $16 = 0, $28 = 0, $3 = 0, $30 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $60 = 0, $63 = 0, $73 = 0, $76 = 0, $86 = 0, $87 = 0, $90 = 0, $92 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $148 = 1; else {
  $3 = HEAP32[$0 + 12 >> 2] | 0;
  if (($3 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0; else $$0$i$i$i$i = HEAP32[$3 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $148 = 1;
   break;
  } else {
   $148 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $13 = HEAP32[$__e >> 2] | 0;
 do if (!$13) label = 14; else {
  $16 = HEAP32[$13 + 12 >> 2] | 0;
  if (($16 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 127]($13) | 0; else $$0$i$i$1$i$i = HEAP32[$16 >> 2] | 0;
  if (($$0$i$i$1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 14;
   break;
  } else if ($148) {
   $149 = $13;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($148) label = 16; else {
  $149 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  $$2 = 0;
 } else if ((label | 0) == 17) {
  $28 = HEAP32[$__b >> 2] | 0;
  $30 = HEAP32[$28 + 12 >> 2] | 0;
  if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 127]($28) | 0; else $$0$i$i = HEAP32[$30 >> 2] | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 127]($__ct, 2048, $$0$i$i) | 0)) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$2 = 0;
   break;
  }
  $49 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 127]($__ct, $$0$i$i, 0) | 0) << 24 >> 24;
  $50 = HEAP32[$__b >> 2] | 0;
  $51 = $50 + 12 | 0;
  $52 = HEAP32[$51 >> 2] | 0;
  if (($52 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 40 >> 2] & 127]($50) | 0;
   $$0$in = $__n;
   $$pre$i$3$i$i$10 = $149;
   $73 = $149;
   $__r$0$in = $49;
  } else {
   HEAP32[$51 >> 2] = $52 + 4;
   $$0$in = $__n;
   $$pre$i$3$i$i$10 = $149;
   $73 = $149;
   $__r$0$in = $49;
  }
  while (1) {
   $__r$0 = $__r$0$in + -48 | 0;
   $$0 = $$0$in + -1 | 0;
   $60 = HEAP32[$__b >> 2] | 0;
   do if (!$60) $87 = 1; else {
    $63 = HEAP32[$60 + 12 >> 2] | 0;
    if (($63 | 0) == (HEAP32[$60 + 16 >> 2] | 0)) $$0$i$i$i$i$2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 36 >> 2] & 127]($60) | 0; else $$0$i$i$i$i$2 = HEAP32[$63 >> 2] | 0;
    if (($$0$i$i$i$i$2 | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $87 = 1;
     break;
    } else {
     $87 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (!$73) {
    $$pre$i$3$i$i$25 = $$pre$i$3$i$i$10;
    $150 = 0;
    $86 = 1;
   } else {
    $76 = HEAP32[$73 + 12 >> 2] | 0;
    if (($76 | 0) == (HEAP32[$73 + 16 >> 2] | 0)) $$0$i$i$1$i$i$8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$73 >> 2] | 0) + 36 >> 2] & 127]($73) | 0; else $$0$i$i$1$i$i$8 = HEAP32[$76 >> 2] | 0;
    if (($$0$i$i$1$i$i$8 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     $$pre$i$3$i$i$25 = 0;
     $150 = 0;
     $86 = 1;
     break;
    } else {
     $$pre$i$3$i$i$25 = $$pre$i$3$i$i$10;
     $150 = $$pre$i$3$i$i$10;
     $86 = ($$pre$i$3$i$i$10 | 0) == 0;
     break;
    }
   } while (0);
   $90 = HEAP32[$__b >> 2] | 0;
   if (!(($$0$in | 0) > 1 & ($87 ^ $86))) {
    $$lcssa = $90;
    $$pre$i$3$i$i$25$lcssa = $$pre$i$3$i$i$25;
    $__r$0$lcssa = $__r$0;
    break;
   }
   $92 = HEAP32[$90 + 12 >> 2] | 0;
   if (($92 | 0) == (HEAP32[$90 + 16 >> 2] | 0)) $$0$i$i$14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$90 >> 2] | 0) + 36 >> 2] & 127]($90) | 0; else $$0$i$i$14 = HEAP32[$92 >> 2] | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 127]($__ct, 2048, $$0$i$i$14) | 0)) {
    $$2 = $__r$0;
    break L22;
   }
   $111 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 127]($__ct, $$0$i$i$14, 0) | 0) << 24 >> 24) + ($__r$0 * 10 | 0) | 0;
   $112 = HEAP32[$__b >> 2] | 0;
   $113 = $112 + 12 | 0;
   $114 = HEAP32[$113 >> 2] | 0;
   if (($114 | 0) == (HEAP32[$112 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[$112 >> 2] | 0) + 40 >> 2] & 127]($112) | 0;
    $$0$in = $$0;
    $$pre$i$3$i$i$10 = $$pre$i$3$i$i$25;
    $73 = $150;
    $__r$0$in = $111;
    continue;
   } else {
    HEAP32[$113 >> 2] = $114 + 4;
    $$0$in = $$0;
    $$pre$i$3$i$i$10 = $$pre$i$3$i$i$25;
    $73 = $150;
    $__r$0$in = $111;
    continue;
   }
  }
  do if (!$$lcssa) $151 = 1; else {
   $124 = HEAP32[$$lcssa + 12 >> 2] | 0;
   if (($124 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i$17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 127]($$lcssa) | 0; else $$0$i$i$i$i$17 = HEAP32[$124 >> 2] | 0;
   if (($$0$i$i$i$i$17 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $151 = 1;
    break;
   } else {
    $151 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!$$pre$i$3$i$i$25$lcssa) label = 60; else {
   $136 = HEAP32[$$pre$i$3$i$i$25$lcssa + 12 >> 2] | 0;
   if (($136 | 0) == (HEAP32[$$pre$i$3$i$i$25$lcssa + 16 >> 2] | 0)) $$0$i$i$1$i$i$23 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$3$i$i$25$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$3$i$i$25$lcssa) | 0; else $$0$i$i$1$i$i$23 = HEAP32[$136 >> 2] | 0;
   if (($$0$i$i$1$i$i$23 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 60;
    break;
   } else if ($151) {
    $$2 = $__r$0$lcssa;
    break L22;
   } else break;
  } while (0);
  if ((label | 0) == 60) if (!$151) {
   $$2 = $__r$0$lcssa;
   break;
  }
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
  $$2 = $__r$0$lcssa;
 } while (0);
 return $$2 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $48 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $69 = 0, $76 = 0, $77 = 0, $78 = 0, $does_dst_type_point_to_our_static_type$0$off0 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off0 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off09 = 0, $p$0 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0;
 L1 : do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
   $6 = $info + 28 | 0;
   if ((HEAP32[$6 >> 2] | 0) != 1) HEAP32[$6 >> 2] = $path_below;
  }
 } else {
  if (($this | 0) != (HEAP32[$info >> 2] | 0)) {
   $58 = HEAP32[$this + 12 >> 2] | 0;
   $59 = $this + 16 + ($58 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this + 16 | 0, $info, $current_ptr, $path_below, $use_strcmp);
   $60 = $this + 24 | 0;
   if (($58 | 0) <= 1) break;
   $63 = HEAP32[$this + 8 >> 2] | 0;
   if (!($63 & 2)) {
    $66 = $info + 36 | 0;
    if ((HEAP32[$66 >> 2] | 0) != 1) {
     if (!($63 & 1)) {
      $78 = $info + 54 | 0;
      $p2$2 = $60;
      while (1) {
       if (HEAP8[$78 >> 0] | 0) break L1;
       if ((HEAP32[$66 >> 2] | 0) == 1) break L1;
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2, $info, $current_ptr, $path_below, $use_strcmp);
       $p2$2 = $p2$2 + 8 | 0;
       if ($p2$2 >>> 0 >= $59 >>> 0) break L1;
      }
     }
     $76 = $info + 24 | 0;
     $77 = $info + 54 | 0;
     $p2$1 = $60;
     while (1) {
      if (HEAP8[$77 >> 0] | 0) break L1;
      if ((HEAP32[$66 >> 2] | 0) == 1) if ((HEAP32[$76 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1, $info, $current_ptr, $path_below, $use_strcmp);
      $p2$1 = $p2$1 + 8 | 0;
      if ($p2$1 >>> 0 >= $59 >>> 0) break L1;
     }
    }
   }
   $69 = $info + 54 | 0;
   $p2$0 = $60;
   while (1) {
    if (HEAP8[$69 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0, $info, $current_ptr, $path_below, $use_strcmp);
    $p2$0 = $p2$0 + 8 | 0;
    if ($p2$0 >>> 0 >= $59 >>> 0) break L1;
   }
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $14 = $info + 20 | 0;
   if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $20 = $info + 44 | 0;
    if ((HEAP32[$20 >> 2] | 0) == 4) break;
    $26 = $this + 16 + (HEAP32[$this + 12 >> 2] << 3) | 0;
    $27 = $info + 52 | 0;
    $28 = $info + 53 | 0;
    $29 = $info + 54 | 0;
    $30 = $this + 8 | 0;
    $31 = $info + 24 | 0;
    $does_dst_type_point_to_our_static_type$0$off0 = 0;
    $is_dst_type_derived_from_static_type$0$off0 = 0;
    $p$0 = $this + 16 | 0;
    L34 : while (1) {
     if ($p$0 >>> 0 >= $26 >>> 0) {
      $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;
      $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off0;
      label = 20;
      break;
     }
     HEAP8[$27 >> 0] = 0;
     HEAP8[$28 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
     if (HEAP8[$29 >> 0] | 0) {
      $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;
      $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off0;
      label = 20;
      break;
     }
     do if (!(HEAP8[$28 >> 0] | 0)) {
      $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;
      $is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off0;
     } else {
      if (!(HEAP8[$27 >> 0] | 0)) if (!(HEAP32[$30 >> 2] & 1)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;
       $is_dst_type_derived_from_static_type$2$off0 = 1;
       label = 20;
       break L34;
      } else {
       $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;
       $is_dst_type_derived_from_static_type$1$off0 = 1;
       break;
      }
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       $is_dst_type_derived_from_static_type$2$off09 = 1;
       break L34;
      }
      if (!(HEAP32[$30 >> 2] & 2)) {
       $is_dst_type_derived_from_static_type$2$off09 = 1;
       break L34;
      } else {
       $does_dst_type_point_to_our_static_type$1$off0 = 1;
       $is_dst_type_derived_from_static_type$1$off0 = 1;
      }
     } while (0);
     $does_dst_type_point_to_our_static_type$0$off0 = $does_dst_type_point_to_our_static_type$1$off0;
     $is_dst_type_derived_from_static_type$0$off0 = $is_dst_type_derived_from_static_type$1$off0;
     $p$0 = $p$0 + 8 | 0;
    }
    if ((label | 0) == 20) if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) $is_dst_type_derived_from_static_type$2$off09 = $is_dst_type_derived_from_static_type$2$off0; else {
     HEAP32[$14 >> 2] = $current_ptr;
     $48 = $info + 40 | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + 1;
     if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$31 >> 2] | 0) == 2) {
      HEAP8[$29 >> 0] = 1;
      $is_dst_type_derived_from_static_type$2$off09 = $is_dst_type_derived_from_static_type$2$off0;
     } else $is_dst_type_derived_from_static_type$2$off09 = $is_dst_type_derived_from_static_type$2$off0; else $is_dst_type_derived_from_static_type$2$off09 = $is_dst_type_derived_from_static_type$2$off0;
    }
    HEAP32[$20 >> 2] = $is_dst_type_derived_from_static_type$2$off09 ? 3 : 4;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$2 = 0, $$pre$i$i$i$lcssa = 0, $$pre18 = 0, $0 = 0, $100 = 0, $102 = 0, $104 = 0, $108 = 0, $12 = 0, $120 = 0, $121 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $8 = 10; else $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0);
 $12 = $__buf + 8 | 0;
 $14 = $__buf + 1 | 0;
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $15;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $16 = $__buf + 4 | 0;
 $17 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i$2 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $15;
 L8 : while (1) {
  if (!$$pre$i$i$i$2) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i$2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$2 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$2) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i$2; else $$pre$i$i$i = $$pre$i$i$i$2;
  $29 = ($$pre$i$i$i | 0) == 0;
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 16; else {
   if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) if ($29) {
    $136 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 16;
    break;
   } else if ($29) {
    $136 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($29) {
    $$pre$i$2$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $136 = 0;
  }
  $43 = HEAP8[$__buf >> 0] | 0;
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$16 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0);
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $49;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $$pre$i$i$i + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $$pre$i$i$i + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$2$i$i = $136;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i$2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 $$pre18 = HEAP32[$__g_end >> 2] | 0;
 if (!((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $108 = $$pre18; else if (($$pre18 - $__g | 0) < 160) {
  $99 = HEAP32[$__dc >> 2] | 0;
  $100 = $$pre18 + 4 | 0;
  HEAP32[$__g_end >> 2] = $100;
  HEAP32[$$pre18 >> 2] = $99;
  $108 = $100;
 } else $108 = $$pre18;
 $102 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 $104 = $__v;
 HEAP32[$104 >> 2] = $102;
 HEAP32[$104 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $108, $__err);
 if (!$$pre$i$i$i$lcssa) $120 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $120 = 0;
 } else $120 = $$pre$i$i$i$lcssa; else $120 = $$pre$i$i$i$lcssa;
 $121 = ($120 | 0) == 0;
 do if (!$$pre$i$2$i$i) label = 41; else {
  if ((HEAP32[$$pre$i$2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  }
  if (!$121) label = 42;
 } while (0);
 if ((label | 0) == 41) if ($121) label = 42;
 if ((label | 0) == 42) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $135 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $135 | 0;
}

function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$0$i$i = 0, $$0$i$i$2 = 0, $$01$i$i = 0, $$01$i$i$1 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $103 = 0, $11 = 0, $117 = 0, $118 = 0, $123 = 0, $128 = 0, $129 = 0, $13 = 0, $135 = 0, $136 = 0, $146 = 0, $19 = 0, $24 = 0, $25 = 0, $27 = 0, $32 = 0, $33 = 0, $37 = 0, $44 = 0, $49 = 0, $5 = 0, $52 = 0, $68 = 0, $70 = 0, $76 = 0, $77 = 0, $78 = 0, $83 = 0, $84 = 0, $86 = 0, $88 = 0, $97 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$2$lcssa16 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10392) | 0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10532) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 127]($__grouping, $1);
 HEAP32[$__oe >> 2] = $__ob;
 $5 = HEAP8[$__nb >> 0] | 0;
 switch ($5 << 24 >> 24) {
 case 43:
 case 45:
  {
   $10 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 63]($0, $5) | 0;
   $11 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $11 + 1;
   HEAP8[$11 >> 0] = $10;
   $__nf$0 = $__nb + 1 | 0;
   break;
  }
 default:
  $__nf$0 = $__nb;
 }
 $13 = $__ne;
 L4 : do if (($13 - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
  $19 = $__nf$0 + 1 | 0;
  switch (HEAP8[$19 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    $__ns$1 = $__nf$0;
    label = 10;
    break L4;
   }
  }
  $24 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 63]($0, 48) | 0;
  $25 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $25 + 1;
  HEAP8[$25 >> 0] = $24;
  $27 = $__nf$0 + 2 | 0;
  $32 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 63]($0, HEAP8[$19 >> 0] | 0) | 0;
  $33 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $33 + 1;
  HEAP8[$33 >> 0] = $32;
  $__ns$0 = $27;
  while (1) {
   if ($__ns$0 >>> 0 >= $__ne >>> 0) {
    $__nf$1 = $27;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $37 = HEAP8[$__ns$0 >> 0] | 0;
   if (!(_isxdigit_l($37, __ZNSt3__16__clocEv() | 0) | 0)) {
    $__nf$1 = $27;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $__ns$0 = $__ns$0 + 1 | 0;
  }
 } else {
  $__ns$1 = $__nf$0;
  label = 10;
 } else {
  $__ns$1 = $__nf$0;
  label = 10;
 } while (0);
 L12 : do if ((label | 0) == 10) while (1) {
  label = 0;
  if ($__ns$1 >>> 0 >= $__ne >>> 0) {
   $__nf$1 = $__nf$0;
   $__ns$2 = $__ns$1;
   break L12;
  }
  $44 = HEAP8[$__ns$1 >> 0] | 0;
  if (!(_isdigit_l($44, __ZNSt3__16__clocEv() | 0) | 0)) {
   $__nf$1 = $__nf$0;
   $__ns$2 = $__ns$1;
   break L12;
  }
  $__ns$1 = $__ns$1 + 1 | 0;
  label = 10;
 } while (0);
 $49 = HEAP8[$__grouping >> 0] | 0;
 $52 = $__grouping + 4 | 0;
 L18 : do if (!((($49 & 1) == 0 ? ($49 & 255) >>> 1 : HEAP32[$52 >> 2] | 0) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] & 63]($0, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0;
  HEAP32[$__oe >> 2] = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1);
  $$pre$phiZ2D = $0;
 } else {
  L21 : do if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $$0$i$i = $__ns$2;
   $$01$i$i = $__nf$1;
   while (1) {
    $68 = $$0$i$i + -1 | 0;
    if ($$01$i$i >>> 0 >= $68 >>> 0) break L21;
    $70 = HEAP8[$$01$i$i >> 0] | 0;
    HEAP8[$$01$i$i >> 0] = HEAP8[$68 >> 0] | 0;
    HEAP8[$68 >> 0] = $70;
    $$0$i$i = $68;
    $$01$i$i = $$01$i$i + 1 | 0;
   }
  } while (0);
  $76 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 127]($1) | 0;
  $77 = $__grouping + 8 | 0;
  $78 = $__grouping + 1 | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ns$2 >>> 0) break;
   $97 = HEAP8[((HEAP8[$__grouping >> 0] & 1) == 0 ? $78 : HEAP32[$77 >> 2] | 0) + $__dg$0 >> 0] | 0;
   if ($97 << 24 >> 24 > 0 & ($__dc$0 | 0) == ($97 << 24 >> 24 | 0)) {
    $101 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $101 + 1;
    HEAP8[$101 >> 0] = $76;
    $103 = HEAP8[$__grouping >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = ($__dg$0 >>> 0 < ((($103 & 1) == 0 ? ($103 & 255) >>> 1 : HEAP32[$52 >> 2] | 0) + -1 | 0) >>> 0 & 1) + $__dg$0 | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $117 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 63]($0, HEAP8[$__p$0 >> 0] | 0) | 0;
   $118 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $118 + 1;
   HEAP8[$118 >> 0] = $117;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $83 = $__ob + ($__nf$1 - $__nb) | 0;
  $84 = HEAP32[$__oe >> 2] | 0;
  if (($83 | 0) == ($84 | 0)) $$pre$phiZ2D = $0; else {
   $$0$i$i$2 = $84;
   $$01$i$i$1 = $83;
   while (1) {
    $86 = $$0$i$i$2 + -1 | 0;
    if ($$01$i$i$1 >>> 0 >= $86 >>> 0) {
     $$pre$phiZ2D = $0;
     break L18;
    }
    $88 = HEAP8[$$01$i$i$1 >> 0] | 0;
    HEAP8[$$01$i$i$1 >> 0] = HEAP8[$86 >> 0] | 0;
    HEAP8[$86 >> 0] = $88;
    $$0$i$i$2 = $86;
    $$01$i$i$1 = $$01$i$i$1 + 1 | 0;
   }
  }
 } while (0);
 $__nf$2 = $__ns$2;
 while (1) {
  if ($__nf$2 >>> 0 >= $__ne >>> 0) {
   $__nf$3 = $__nf$2;
   break;
  }
  $123 = HEAP8[$__nf$2 >> 0] | 0;
  if ($123 << 24 >> 24 == 46) {
   $__nf$2$lcssa16 = $__nf$2;
   label = 29;
   break;
  }
  $135 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 28 >> 2] & 63]($0, $123) | 0;
  $136 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $136 + 1;
  HEAP8[$136 >> 0] = $135;
  $__nf$2 = $__nf$2 + 1 | 0;
 }
 if ((label | 0) == 29) {
  $128 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] & 127]($1) | 0;
  $129 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $129 + 1;
  HEAP8[$129 >> 0] = $128;
  $__nf$3 = $__nf$2$lcssa16 + 1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] & 63]($0, $__nf$3, $__ne, HEAP32[$__oe >> 2] | 0) | 0;
 $146 = (HEAP32[$__oe >> 2] | 0) + ($13 - $__nf$3) | 0;
 HEAP32[$__oe >> 2] = $146;
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $146 : $__ob + ($__np - $__nb) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$2 = 0, $$pre$i$i$i$lcssa = 0, $$pre18 = 0, $0 = 0, $100 = 0, $102 = 0, $104 = 0, $108 = 0, $12 = 0, $120 = 0, $121 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $8 = 10; else $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0);
 $12 = $__buf + 8 | 0;
 $14 = $__buf + 1 | 0;
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $15;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $16 = $__buf + 4 | 0;
 $17 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i$2 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $15;
 L8 : while (1) {
  if (!$$pre$i$i$i$2) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i$2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$2 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$2) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i$2; else $$pre$i$i$i = $$pre$i$i$i$2;
  $29 = ($$pre$i$i$i | 0) == 0;
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 16; else {
   if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) if ($29) {
    $136 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 16;
    break;
   } else if ($29) {
    $136 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($29) {
    $$pre$i$2$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $136 = 0;
  }
  $43 = HEAP8[$__buf >> 0] | 0;
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$16 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0);
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $49;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $$pre$i$i$i + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $$pre$i$i$i + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$2$i$i = $136;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i$2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 $$pre18 = HEAP32[$__g_end >> 2] | 0;
 if (!((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $108 = $$pre18; else if (($$pre18 - $__g | 0) < 160) {
  $99 = HEAP32[$__dc >> 2] | 0;
  $100 = $$pre18 + 4 | 0;
  HEAP32[$__g_end >> 2] = $100;
  HEAP32[$$pre18 >> 2] = $99;
  $108 = $100;
 } else $108 = $$pre18;
 $102 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 $104 = $__v;
 HEAP32[$104 >> 2] = $102;
 HEAP32[$104 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $108, $__err);
 if (!$$pre$i$i$i$lcssa) $120 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $120 = 0;
 } else $120 = $$pre$i$i$i$lcssa; else $120 = $$pre$i$i$i$lcssa;
 $121 = ($120 | 0) == 0;
 do if (!$$pre$i$2$i$i) label = 41; else {
  if ((HEAP32[$$pre$i$2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  }
  if (!$121) label = 42;
 } while (0);
 if ((label | 0) == 41) if ($121) label = 42;
 if ((label | 0) == 42) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $135 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $135 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$2 = 0, $$pre$i$i$i$lcssa = 0, $$pre18 = 0, $0 = 0, $100 = 0, $102 = 0, $103 = 0, $115 = 0, $116 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $8 = 10; else $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0);
 $12 = $__buf + 8 | 0;
 $14 = $__buf + 1 | 0;
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $15;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $16 = $__buf + 4 | 0;
 $17 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i$2 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $15;
 L8 : while (1) {
  if (!$$pre$i$i$i$2) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i$2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$2 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$2) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i$2; else $$pre$i$i$i = $$pre$i$i$i$2;
  $29 = ($$pre$i$i$i | 0) == 0;
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 16; else {
   if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) if ($29) {
    $131 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 16;
    break;
   } else if ($29) {
    $131 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($29) {
    $$pre$i$2$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $131 = 0;
  }
  $43 = HEAP8[$__buf >> 0] | 0;
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$16 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0);
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $49;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $$pre$i$i$i + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $$pre$i$i$i + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$2$i$i = $131;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i$2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 $$pre18 = HEAP32[$__g_end >> 2] | 0;
 if (!((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $103 = $$pre18; else if (($$pre18 - $__g | 0) < 160) {
  $99 = HEAP32[$__dc >> 2] | 0;
  $100 = $$pre18 + 4 | 0;
  HEAP32[$__g_end >> 2] = $100;
  HEAP32[$$pre18 >> 2] = $99;
  $103 = $100;
 } else $103 = $$pre18;
 $102 = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 HEAP16[$__v >> 1] = $102;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $103, $__err);
 if (!$$pre$i$i$i$lcssa) $115 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $115 = 0;
 } else $115 = $$pre$i$i$i$lcssa; else $115 = $$pre$i$i$i$lcssa;
 $116 = ($115 | 0) == 0;
 do if (!$$pre$i$2$i$i) label = 41; else {
  if ((HEAP32[$$pre$i$2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  }
  if (!$116) label = 42;
 } while (0);
 if ((label | 0) == 41) if ($116) label = 42;
 if ((label | 0) == 42) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $130 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $130 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$2 = 0, $$pre$i$i$i$lcssa = 0, $$pre18 = 0, $0 = 0, $100 = 0, $102 = 0, $103 = 0, $115 = 0, $116 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $8 = 10; else $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0);
 $12 = $__buf + 8 | 0;
 $14 = $__buf + 1 | 0;
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $15;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $16 = $__buf + 4 | 0;
 $17 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i$2 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $15;
 L8 : while (1) {
  if (!$$pre$i$i$i$2) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i$2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$2 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$2) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i$2; else $$pre$i$i$i = $$pre$i$i$i$2;
  $29 = ($$pre$i$i$i | 0) == 0;
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 16; else {
   if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) if ($29) {
    $131 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 16;
    break;
   } else if ($29) {
    $131 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($29) {
    $$pre$i$2$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $131 = 0;
  }
  $43 = HEAP8[$__buf >> 0] | 0;
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$16 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0);
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $49;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $$pre$i$i$i + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $$pre$i$i$i + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$2$i$i = $131;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i$2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 $$pre18 = HEAP32[$__g_end >> 2] | 0;
 if (!((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $103 = $$pre18; else if (($$pre18 - $__g | 0) < 160) {
  $99 = HEAP32[$__dc >> 2] | 0;
  $100 = $$pre18 + 4 | 0;
  HEAP32[$__g_end >> 2] = $100;
  HEAP32[$$pre18 >> 2] = $99;
  $103 = $100;
 } else $103 = $$pre18;
 $102 = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 HEAP32[$__v >> 2] = $102;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $103, $__err);
 if (!$$pre$i$i$i$lcssa) $115 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $115 = 0;
 } else $115 = $$pre$i$i$i$lcssa; else $115 = $$pre$i$i$i$lcssa;
 $116 = ($115 | 0) == 0;
 do if (!$$pre$i$2$i$i) label = 41; else {
  if ((HEAP32[$$pre$i$2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  }
  if (!$116) label = 42;
 } while (0);
 if ((label | 0) == 41) if ($116) label = 42;
 if ((label | 0) == 42) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $130 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $130 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$2 = 0, $$pre$i$i$i$lcssa = 0, $$pre18 = 0, $0 = 0, $100 = 0, $102 = 0, $103 = 0, $115 = 0, $116 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $8 = 10; else $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0);
 $12 = $__buf + 8 | 0;
 $14 = $__buf + 1 | 0;
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $15;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $16 = $__buf + 4 | 0;
 $17 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i$2 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $15;
 L8 : while (1) {
  if (!$$pre$i$i$i$2) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i$2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$2 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$2) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i$2; else $$pre$i$i$i = $$pre$i$i$i$2;
  $29 = ($$pre$i$i$i | 0) == 0;
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 16; else {
   if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) if ($29) {
    $131 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 16;
    break;
   } else if ($29) {
    $131 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($29) {
    $$pre$i$2$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $131 = 0;
  }
  $43 = HEAP8[$__buf >> 0] | 0;
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$16 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0);
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $49;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $$pre$i$i$i + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $$pre$i$i$i + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$2$i$i = $131;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i$2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 $$pre18 = HEAP32[$__g_end >> 2] | 0;
 if (!((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $103 = $$pre18; else if (($$pre18 - $__g | 0) < 160) {
  $99 = HEAP32[$__dc >> 2] | 0;
  $100 = $$pre18 + 4 | 0;
  HEAP32[$__g_end >> 2] = $100;
  HEAP32[$$pre18 >> 2] = $99;
  $103 = $100;
 } else $103 = $$pre18;
 $102 = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 HEAP32[$__v >> 2] = $102;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $103, $__err);
 if (!$$pre$i$i$i$lcssa) $115 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $115 = 0;
 } else $115 = $$pre$i$i$i$lcssa; else $115 = $$pre$i$i$i$lcssa;
 $116 = ($115 | 0) == 0;
 do if (!$$pre$i$2$i$i) label = 41; else {
  if ((HEAP32[$$pre$i$2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  }
  if (!$116) label = 42;
 } while (0);
 if ((label | 0) == 41) if ($116) label = 42;
 if ((label | 0) == 42) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $130 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $130 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$2 = 0, $$pre$i$i$i$lcssa = 0, $$pre18 = 0, $0 = 0, $100 = 0, $102 = 0, $103 = 0, $115 = 0, $116 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $8 = 10; else $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0);
 $12 = $__buf + 8 | 0;
 $14 = $__buf + 1 | 0;
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $15;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $16 = $__buf + 4 | 0;
 $17 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i$2 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $15;
 L8 : while (1) {
  if (!$$pre$i$i$i$2) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i$2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$2 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$2) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i$2; else $$pre$i$i$i = $$pre$i$i$i$2;
  $29 = ($$pre$i$i$i | 0) == 0;
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 16; else {
   if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) if ($29) {
    $131 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 16;
    break;
   } else if ($29) {
    $131 = $30;
    break;
   } else {
    $$pre$i$2$i$i = $30;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($29) {
    $$pre$i$2$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $131 = 0;
  }
  $43 = HEAP8[$__buf >> 0] | 0;
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$16 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0);
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $49;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $$pre$i$i$i + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $$pre$i$i$i + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$2$i$i = $131;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i$2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 $$pre18 = HEAP32[$__g_end >> 2] | 0;
 if (!((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $103 = $$pre18; else if (($$pre18 - $__g | 0) < 160) {
  $99 = HEAP32[$__dc >> 2] | 0;
  $100 = $$pre18 + 4 | 0;
  HEAP32[$__g_end >> 2] = $100;
  HEAP32[$$pre18 >> 2] = $99;
  $103 = $100;
 } else $103 = $$pre18;
 $102 = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 HEAP32[$__v >> 2] = $102;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $103, $__err);
 if (!$$pre$i$i$i$lcssa) $115 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $115 = 0;
 } else $115 = $$pre$i$i$i$lcssa; else $115 = $$pre$i$i$i$lcssa;
 $116 = ($115 | 0) == 0;
 do if (!$$pre$i$2$i$i) label = 41; else {
  if ((HEAP32[$$pre$i$2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  }
  if (!$116) label = 42;
 } while (0);
 if ((label | 0) == 41) if ($116) label = 42;
 if ((label | 0) == 42) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $130 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $130 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$5 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $100 = 0, $114 = 0, $115 = 0, $129 = 0, $130 = 0, $15 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $35 = 0, $36 = 0, $4 = 0, $49 = 0, $55 = 0, $64 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $85 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i$1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $vararg_buffer = sp;
 $__atoms = sp + 208 | 0;
 $__grouping = sp + 196 | 0;
 $0 = sp + 180 | 0;
 $__buf = sp + 184 | 0;
 $__a_end = sp + 176 | 0;
 $__g = sp + 16 | 0;
 $__g_end = sp + 8 | 0;
 $__dc = sp + 4 | 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grouping + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $3 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $3;
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 10392) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] & 63]($4, 22824, 22850, $__atoms) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($3) | 0;
 $__i$0$i$i$1 = 0;
 while (1) {
  if (($__i$0$i$i$1 | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i$1 << 2) >> 2] = 0;
  $__i$0$i$i$1 = $__i$0$i$i$1 + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $15 = 10; else $15 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $15, 0);
 $19 = $__buf + 8 | 0;
 $21 = $__buf + 1 | 0;
 $22 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $22;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $23 = $__buf + 4 | 0;
 $$pre$i$i$i$5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $22;
 L12 : while (1) {
  if (!$$pre$i$i$i$5) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i$5 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$5 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$5 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$5) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i$5; else $$pre$i$i$i = $$pre$i$i$i$5;
  $35 = ($$pre$i$i$i | 0) == 0;
  $36 = HEAP32[$__e >> 2] | 0;
  do if (!$36) label = 19; else {
   if ((HEAP32[$36 + 12 >> 2] | 0) != (HEAP32[$36 + 16 >> 2] | 0)) if ($35) {
    $130 = $36;
    break;
   } else {
    $$pre$i$2$i$i = $36;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L12;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 127]($36) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($35) {
    $130 = $36;
    break;
   } else {
    $$pre$i$2$i$i = $36;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break L12;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($35) {
    $$pre$i$2$i$i = 0;
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $__a$2 = $__a$0;
    break;
   } else $130 = 0;
  }
  $49 = HEAP8[$__buf >> 0] | 0;
  $55 = ($49 & 1) == 0 ? ($49 & 255) >>> 1 : HEAP32[$23 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $55 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $64 = 10; else $64 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $64, 0);
   $69 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $69 + $55;
   $__a$1 = $69;
  } else $__a$1 = $__a$0;
  $71 = $$pre$i$i$i + 12 | 0;
  $72 = HEAP32[$71 >> 2] | 0;
  $73 = $$pre$i$i$i + 16 | 0;
  if (($72 | 0) == (HEAP32[$73 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$72 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$2$i$i = $130;
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $__a$2 = $__a$1;
   break;
  }
  $85 = HEAP32[$71 >> 2] | 0;
  if (($85 | 0) == (HEAP32[$73 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 127]($$pre$i$i$i) | 0;
   $$pre$i$i$i$5 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$71 >> 2] = $85 + 1;
   $$pre$i$i$i$5 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, (HEAP32[$__a_end >> 2] | 0) - $__a$2 | 0, 0);
 $99 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0;
 $100 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($99, $100, 24208, $vararg_buffer) | 0) != 1) HEAP32[$__err >> 2] = 4;
 if (!$$pre$i$i$i$lcssa) $114 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $114 = 0;
 } else $114 = $$pre$i$i$i$lcssa; else $114 = $$pre$i$i$i$lcssa;
 $115 = ($114 | 0) == 0;
 do if (!$$pre$i$2$i$i) label = 43; else {
  if ((HEAP32[$$pre$i$2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i$2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i$2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 43;
   break;
  }
  if (!$115) label = 44;
 } while (0);
 if ((label | 0) == 43) if ($115) label = 44;
 if ((label | 0) == 44) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $129 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $129 | 0;
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $101 = 0, $104 = 0, $106 = 0, $109 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $119 = 0, $121 = 0, $122 = 0, $127 = 0, $128 = 0, $137 = 0, $142 = 0, $145 = 0, $146 = 0, $152 = 0, $163 = 0, $166 = 0, $173 = 0, $2 = 0, $20 = 0, $22 = 0, $29 = 0, $3 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $47 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $58 = 0, $65 = 0, $71 = 0, $73 = 0, $74 = 0, $77 = 0, $79 = 0, $8 = 0, $81 = 0, $94 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $newp$2 = 0, $storemerge = 0, $storemerge$1 = 0;
 $0 = $p + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 & -8;
 $3 = $p + $2 | 0;
 $4 = HEAP32[1804] | 0;
 $5 = $1 & 3;
 if (!(($5 | 0) != 1 & $p >>> 0 >= $4 >>> 0 & $p >>> 0 < $3 >>> 0)) _abort();
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 if (!($8 & 1)) _abort();
 if (!$5) {
  if ($nb >>> 0 < 256) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  if ($2 >>> 0 >= ($nb + 4 | 0) >>> 0) if (($2 - $nb | 0) >>> 0 <= HEAP32[1920] << 1 >>> 0) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 if ($2 >>> 0 >= $nb >>> 0) {
  $20 = $2 - $nb | 0;
  if ($20 >>> 0 <= 15) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $22 = $p + $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$22 + 4 >> 2] = $20 | 3;
  $29 = $22 + $20 + 4 | 0;
  HEAP32[$29 >> 2] = HEAP32[$29 >> 2] | 1;
  _dispose_chunk($22, $20);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if (($3 | 0) == (HEAP32[1806] | 0)) {
  $35 = (HEAP32[1803] | 0) + $2 | 0;
  if ($35 >>> 0 <= $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  $37 = $35 - $nb | 0;
  $38 = $p + $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$38 + 4 >> 2] = $37 | 1;
  HEAP32[1806] = $38;
  HEAP32[1803] = $37;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if (($3 | 0) == (HEAP32[1805] | 0)) {
  $47 = (HEAP32[1802] | 0) + $2 | 0;
  if ($47 >>> 0 < $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  $49 = $47 - $nb | 0;
  if ($49 >>> 0 > 15) {
   $51 = $p + $nb | 0;
   $52 = $51 + $49 | 0;
   HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
   HEAP32[$51 + 4 >> 2] = $49 | 1;
   HEAP32[$52 >> 2] = $49;
   $58 = $52 + 4 | 0;
   HEAP32[$58 >> 2] = HEAP32[$58 >> 2] & -2;
   $storemerge = $51;
   $storemerge$1 = $49;
  } else {
   HEAP32[$0 >> 2] = $1 & 1 | $47 | 2;
   $65 = $p + $47 + 4 | 0;
   HEAP32[$65 >> 2] = HEAP32[$65 >> 2] | 1;
   $storemerge = 0;
   $storemerge$1 = 0;
  }
  HEAP32[1802] = $storemerge$1;
  HEAP32[1805] = $storemerge;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ($8 & 2) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $71 = ($8 & -8) + $2 | 0;
 if ($71 >>> 0 < $nb >>> 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $73 = $71 - $nb | 0;
 $74 = $8 >>> 3;
 do if ($8 >>> 0 < 256) {
  $77 = HEAP32[$3 + 8 >> 2] | 0;
  $79 = HEAP32[$3 + 12 >> 2] | 0;
  $81 = 7240 + ($74 << 1 << 2) | 0;
  if (($77 | 0) != ($81 | 0)) {
   if ($77 >>> 0 < $4 >>> 0) _abort();
   if ((HEAP32[$77 + 12 >> 2] | 0) != ($3 | 0)) _abort();
  }
  if (($79 | 0) == ($77 | 0)) {
   HEAP32[1800] = HEAP32[1800] & ~(1 << $74);
   break;
  }
  if (($79 | 0) == ($81 | 0)) $$pre$phiZ2D = $79 + 8 | 0; else {
   if ($79 >>> 0 < $4 >>> 0) _abort();
   $94 = $79 + 8 | 0;
   if ((HEAP32[$94 >> 2] | 0) == ($3 | 0)) $$pre$phiZ2D = $94; else _abort();
  }
  HEAP32[$77 + 12 >> 2] = $79;
  HEAP32[$$pre$phiZ2D >> 2] = $77;
 } else {
  $99 = HEAP32[$3 + 24 >> 2] | 0;
  $101 = HEAP32[$3 + 12 >> 2] | 0;
  do if (($101 | 0) == ($3 | 0)) {
   $112 = $3 + 16 | 0;
   $113 = $112 + 4 | 0;
   $114 = HEAP32[$113 >> 2] | 0;
   if (!$114) {
    $116 = HEAP32[$112 >> 2] | 0;
    if (!$116) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $116;
     $RP$1 = $112;
    }
   } else {
    $R$1 = $114;
    $RP$1 = $113;
   }
   while (1) {
    $118 = $R$1 + 20 | 0;
    $119 = HEAP32[$118 >> 2] | 0;
    if ($119) {
     $R$1 = $119;
     $RP$1 = $118;
     continue;
    }
    $121 = $R$1 + 16 | 0;
    $122 = HEAP32[$121 >> 2] | 0;
    if (!$122) {
     $R$1$lcssa = $R$1;
     $RP$1$lcssa = $RP$1;
     break;
    } else {
     $R$1 = $122;
     $RP$1 = $121;
    }
   }
   if ($RP$1$lcssa >>> 0 < $4 >>> 0) _abort(); else {
    HEAP32[$RP$1$lcssa >> 2] = 0;
    $R$3 = $R$1$lcssa;
    break;
   }
  } else {
   $104 = HEAP32[$3 + 8 >> 2] | 0;
   if ($104 >>> 0 < $4 >>> 0) _abort();
   $106 = $104 + 12 | 0;
   if ((HEAP32[$106 >> 2] | 0) != ($3 | 0)) _abort();
   $109 = $101 + 8 | 0;
   if ((HEAP32[$109 >> 2] | 0) == ($3 | 0)) {
    HEAP32[$106 >> 2] = $101;
    HEAP32[$109 >> 2] = $104;
    $R$3 = $101;
    break;
   } else _abort();
  } while (0);
  if ($99) {
   $127 = HEAP32[$3 + 28 >> 2] | 0;
   $128 = 7504 + ($127 << 2) | 0;
   if (($3 | 0) == (HEAP32[$128 >> 2] | 0)) {
    HEAP32[$128 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[1801] = HEAP32[1801] & ~(1 << $127);
     break;
    }
   } else {
    if ($99 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort();
    $137 = $99 + 16 | 0;
    if ((HEAP32[$137 >> 2] | 0) == ($3 | 0)) HEAP32[$137 >> 2] = $R$3; else HEAP32[$99 + 20 >> 2] = $R$3;
    if (!$R$3) break;
   }
   $142 = HEAP32[1804] | 0;
   if ($R$3 >>> 0 < $142 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $99;
   $145 = $3 + 16 | 0;
   $146 = HEAP32[$145 >> 2] | 0;
   do if ($146) if ($146 >>> 0 < $142 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $146;
    HEAP32[$146 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $152 = HEAP32[$145 + 4 >> 2] | 0;
   if ($152) if ($152 >>> 0 < (HEAP32[1804] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $152;
    HEAP32[$152 + 24 >> 2] = $R$3;
    break;
   }
  }
 } while (0);
 if ($73 >>> 0 < 16) {
  HEAP32[$0 >> 2] = $71 | $1 & 1 | 2;
  $163 = $p + $71 + 4 | 0;
  HEAP32[$163 >> 2] = HEAP32[$163 >> 2] | 1;
  $newp$2 = $p;
  return $newp$2 | 0;
 } else {
  $166 = $p + $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$166 + 4 >> 2] = $73 | 3;
  $173 = $166 + $73 + 4 | 0;
  HEAP32[$173 >> 2] = HEAP32[$173 >> 2] | 1;
  _dispose_chunk($166, $73);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 return 0;
}

function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$49 = 0, $$5 = 0, $$lcssa = 0, $$lcssa89 = 0, $$lcssa90 = 0, $$lcssa91 = 0, $$lcssa92 = 0, $$lcssa93 = 0, $$pre$phiZ2D = 0, $$pre44 = 0, $16 = 0, $17 = 0, $28 = 0, $38 = 0, $42 = 0, $44 = 0, $47 = 0, $51 = 0, $55 = 0, $57 = 0, $71 = 0, $77 = 0, $79 = 0, $81 = 0, $83 = 0, $87 = 0, $91 = 0, $93 = 0, $96 = 0, $frm_nxt$1 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$lcssa82 = 0, $frm_nxt$1$lcssa83 = 0, $frm_nxt$1$lcssa84 = 0, $frm_nxt$1$lcssa85 = 0, $frm_nxt$1$lcssa86 = 0, $frm_nxt$1$lcssa87 = 0, $frm_nxt$188 = 0, $frm_nxt$5 = 0, $nchar16_t$0 = 0, $nchar16_t$2 = 0, label = 0;
 $$pre44 = $frm_end;
 if (!($mode & 4)) {
  $frm_nxt$1 = $frm;
  $nchar16_t$0 = 0;
 } else if (($$pre44 - $frm | 0) > 2) if ((HEAP8[$frm >> 0] | 0) == -17) if ((HEAP8[$frm + 1 >> 0] | 0) == -69) {
  $frm_nxt$1 = (HEAP8[$frm + 2 >> 0] | 0) == -65 ? $frm + 3 | 0 : $frm;
  $nchar16_t$0 = 0;
 } else {
  $frm_nxt$1 = $frm;
  $nchar16_t$0 = 0;
 } else {
  $frm_nxt$1 = $frm;
  $nchar16_t$0 = 0;
 } else {
  $frm_nxt$1 = $frm;
  $nchar16_t$0 = 0;
 }
 L6 : while (1) {
  if (!($nchar16_t$0 >>> 0 < $mx >>> 0 & $frm_nxt$1 >>> 0 < $frm_end >>> 0)) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 40;
   break;
  }
  $16 = HEAP8[$frm_nxt$1 >> 0] | 0;
  $17 = $16 & 255;
  if ($17 >>> 0 > $Maxcode >>> 0) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 40;
   break;
  }
  do if ($16 << 24 >> 24 > -1) {
   $frm_nxt$5 = $frm_nxt$1 + 1 | 0;
   $nchar16_t$2 = $nchar16_t$0;
  } else {
   if (($16 & 255) < 194) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   if (($16 & 255) < 224) {
    if (($$pre44 - $frm_nxt$1 | 0) < 2) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $28 = HEAPU8[$frm_nxt$1 + 1 >> 0] | 0;
    if (($28 & 192 | 0) != 128) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    if (($28 & 63 | $17 << 6 & 1984) >>> 0 > $Maxcode >>> 0) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    } else {
     $frm_nxt$5 = $frm_nxt$1 + 2 | 0;
     $nchar16_t$2 = $nchar16_t$0;
     break;
    }
   }
   if (($16 & 255) < 240) {
    $38 = $frm_nxt$1;
    if (($$pre44 - $38 | 0) < 3) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $42 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
    $44 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
    switch ($17 | 0) {
    case 224:
     {
      if (($42 & -32) << 24 >> 24 != -96) {
       $$lcssa92 = $38;
       $frm_nxt$1$lcssa86 = $frm_nxt$1;
       label = 19;
       break L6;
      }
      break;
     }
    case 237:
     {
      if (($42 & -32) << 24 >> 24 != -128) {
       $$lcssa91 = $38;
       $frm_nxt$1$lcssa85 = $frm_nxt$1;
       label = 21;
       break L6;
      }
      break;
     }
    default:
     if (($42 & -64) << 24 >> 24 != -128) {
      $$lcssa93 = $38;
      $frm_nxt$1$lcssa87 = $frm_nxt$1;
      label = 23;
      break L6;
     }
    }
    $57 = $44 & 255;
    if (($57 & 192 | 0) != 128) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    if ((($42 & 255) << 6 & 4032 | $17 << 12 & 61440 | $57 & 63) >>> 0 > $Maxcode >>> 0) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    } else {
     $frm_nxt$5 = $frm_nxt$1 + 3 | 0;
     $nchar16_t$2 = $nchar16_t$0;
     break;
    }
   }
   if (($16 & 255) >= 245) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   $71 = $frm_nxt$1;
   if (($mx - $nchar16_t$0 | 0) >>> 0 < 2 | ($$pre44 - $71 | 0) < 4) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   $77 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
   $79 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
   $81 = HEAP8[$frm_nxt$1 + 3 >> 0] | 0;
   switch ($17 | 0) {
   case 240:
    {
     if (($77 + 112 & 255) >= 48) {
      $$lcssa89 = $71;
      $frm_nxt$1$lcssa83 = $frm_nxt$1;
      label = 30;
      break L6;
     }
     break;
    }
   case 244:
    {
     if (($77 & -16) << 24 >> 24 != -128) {
      $$lcssa = $71;
      $frm_nxt$1$lcssa82 = $frm_nxt$1;
      label = 32;
      break L6;
     }
     break;
    }
   default:
    if (($77 & -64) << 24 >> 24 != -128) {
     $$lcssa90 = $71;
     $frm_nxt$1$lcssa84 = $frm_nxt$1;
     label = 34;
     break L6;
    }
   }
   $93 = $79 & 255;
   if (($93 & 192 | 0) != 128) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   $96 = $81 & 255;
   if (($96 & 192 | 0) != 128) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   if ((($77 & 255) << 12 & 258048 | $17 << 18 & 1835008 | $93 << 6 & 4032 | $96 & 63) >>> 0 > $Maxcode >>> 0) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   $frm_nxt$5 = $frm_nxt$1 + 4 | 0;
   $nchar16_t$2 = $nchar16_t$0 + 1 | 0;
  } while (0);
  $frm_nxt$1 = $frm_nxt$5;
  $nchar16_t$0 = $nchar16_t$2 + 1 | 0;
 }
 if ((label | 0) == 19) {
  $47 = $frm;
  $$49 = 0;
  $$5 = $$lcssa92 - $47 | 0;
  $$pre$phiZ2D = $47;
  $frm_nxt$188 = $frm_nxt$1$lcssa86;
 } else if ((label | 0) == 21) {
  $51 = $frm;
  $$49 = 0;
  $$5 = $$lcssa91 - $51 | 0;
  $$pre$phiZ2D = $51;
  $frm_nxt$188 = $frm_nxt$1$lcssa85;
 } else if ((label | 0) == 23) {
  $55 = $frm;
  $$49 = 0;
  $$5 = $$lcssa93 - $55 | 0;
  $$pre$phiZ2D = $55;
  $frm_nxt$188 = $frm_nxt$1$lcssa87;
 } else if ((label | 0) == 30) {
  $83 = $frm;
  $$49 = 0;
  $$5 = $$lcssa89 - $83 | 0;
  $$pre$phiZ2D = $83;
  $frm_nxt$188 = $frm_nxt$1$lcssa83;
 } else if ((label | 0) == 32) {
  $87 = $frm;
  $$49 = 0;
  $$5 = $$lcssa - $87 | 0;
  $$pre$phiZ2D = $87;
  $frm_nxt$188 = $frm_nxt$1$lcssa82;
 } else if ((label | 0) == 34) {
  $91 = $frm;
  $$49 = 0;
  $$5 = $$lcssa90 - $91 | 0;
  $$pre$phiZ2D = $91;
  $frm_nxt$188 = $frm_nxt$1$lcssa84;
 } else if ((label | 0) == 40) {
  $$49 = 1;
  $$5 = 0;
  $$pre$phiZ2D = $frm;
  $frm_nxt$188 = $frm_nxt$1$lcssa;
 }
 return ($$49 ? $frm_nxt$188 - $$pre$phiZ2D | 0 : $$5) | 0;
}

function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$10 = 0, $$0$in = 0, $$2 = 0, $$lcssa = 0, $$pre$i$2$i$i$20 = 0, $$pre$i$2$i$i$20$lcssa = 0, $$pre$i$2$i$i$7 = 0, $0 = 0, $107 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $142 = 0, $143 = 0, $157 = 0, $28 = 0, $30 = 0, $40 = 0, $42 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $65 = 0, $77 = 0, $78 = 0, $79 = 0, $91 = 0, $95 = 0, $97 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $12 = 0; else if ((HEAP32[$0 + 12 >> 2] | 0) == (HEAP32[$0 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $12 = 0;
  break;
 } else {
  $12 = HEAP32[$__b >> 2] | 0;
  break;
 } else $12 = $0; while (0);
 $13 = ($12 | 0) == 0;
 $14 = HEAP32[$__e >> 2] | 0;
 do if (!$14) label = 11; else {
  if ((HEAP32[$14 + 12 >> 2] | 0) == (HEAP32[$14 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 127]($14) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 11;
   break;
  }
  if ($13) {
   $157 = $14;
   label = 13;
  } else label = 12;
 } while (0);
 if ((label | 0) == 11) if ($13) label = 12; else {
  $157 = 0;
  label = 13;
 }
 L16 : do if ((label | 0) == 12) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  $$2 = 0;
 } else if ((label | 0) == 13) {
  $28 = HEAP32[$__b >> 2] | 0;
  $30 = HEAP32[$28 + 12 >> 2] | 0;
  if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 127]($28) | 0; else $$0$i$i = HEAPU8[$30 >> 0] | 0;
  $40 = $$0$i$i & 255;
  if ($40 << 24 >> 24 > -1) {
   $42 = $__ct + 8 | 0;
   if (HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 2048) {
    $54 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 127]($__ct, $40, 0) | 0) << 24 >> 24;
    $55 = HEAP32[$__b >> 2] | 0;
    $56 = $55 + 12 | 0;
    $57 = HEAP32[$56 >> 2] | 0;
    if (($57 | 0) == (HEAP32[$55 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$55 >> 2] | 0) + 40 >> 2] & 127]($55) | 0;
     $$0$in = $__n;
     $$pre$i$2$i$i$7 = $157;
     $79 = $157;
     $__r$0$in = $54;
    } else {
     HEAP32[$56 >> 2] = $57 + 1;
     $$0$in = $__n;
     $$pre$i$2$i$i$7 = $157;
     $79 = $157;
     $__r$0$in = $54;
    }
    while (1) {
     $__r$0 = $__r$0$in + -48 | 0;
     $$0 = $$0$in + -1 | 0;
     $65 = HEAP32[$__b >> 2] | 0;
     do if (!$65) $77 = 0; else if ((HEAP32[$65 + 12 >> 2] | 0) == (HEAP32[$65 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$65 >> 2] | 0) + 36 >> 2] & 127]($65) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $77 = 0;
      break;
     } else {
      $77 = HEAP32[$__b >> 2] | 0;
      break;
     } else $77 = $65; while (0);
     $78 = ($77 | 0) == 0;
     if (!$79) {
      $$pre$i$2$i$i$20 = $$pre$i$2$i$i$7;
      $91 = 0;
     } else if ((HEAP32[$79 + 12 >> 2] | 0) == (HEAP32[$79 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$79 >> 2] | 0) + 36 >> 2] & 127]($79) | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      $$pre$i$2$i$i$20 = 0;
      $91 = 0;
     } else {
      $$pre$i$2$i$i$20 = $$pre$i$2$i$i$7;
      $91 = $$pre$i$2$i$i$7;
     } else {
      $$pre$i$2$i$i$20 = $$pre$i$2$i$i$7;
      $91 = $79;
     }
     $95 = HEAP32[$__b >> 2] | 0;
     if (!(($$0$in | 0) > 1 & ($78 ^ ($91 | 0) == 0))) {
      $$lcssa = $95;
      $$pre$i$2$i$i$20$lcssa = $$pre$i$2$i$i$20;
      $__r$0$lcssa = $__r$0;
      break;
     }
     $97 = HEAP32[$95 + 12 >> 2] | 0;
     if (($97 | 0) == (HEAP32[$95 + 16 >> 2] | 0)) $$0$i$i$10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$95 >> 2] | 0) + 36 >> 2] & 127]($95) | 0; else $$0$i$i$10 = HEAPU8[$97 >> 0] | 0;
     $107 = $$0$i$i$10 & 255;
     if ($107 << 24 >> 24 <= -1) {
      $$2 = $__r$0;
      break L16;
     }
     if (!(HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i$10 << 24 >> 24 << 1) >> 1] & 2048)) {
      $$2 = $__r$0;
      break L16;
     }
     $120 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 127]($__ct, $107, 0) | 0) << 24 >> 24) + ($__r$0 * 10 | 0) | 0;
     $121 = HEAP32[$__b >> 2] | 0;
     $122 = $121 + 12 | 0;
     $123 = HEAP32[$122 >> 2] | 0;
     if (($123 | 0) == (HEAP32[$121 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$121 >> 2] | 0) + 40 >> 2] & 127]($121) | 0;
      $$0$in = $$0;
      $$pre$i$2$i$i$7 = $$pre$i$2$i$i$20;
      $79 = $91;
      $__r$0$in = $120;
      continue;
     } else {
      HEAP32[$122 >> 2] = $123 + 1;
      $$0$in = $$0;
      $$pre$i$2$i$i$7 = $$pre$i$2$i$i$20;
      $79 = $91;
      $__r$0$in = $120;
      continue;
     }
    }
    do if (!$$lcssa) $142 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 127]($$lcssa) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $142 = 0;
     break;
    } else {
     $142 = HEAP32[$__b >> 2] | 0;
     break;
    } else $142 = $$lcssa; while (0);
    $143 = ($142 | 0) == 0;
    do if (!$$pre$i$2$i$i$20$lcssa) label = 50; else {
     if ((HEAP32[$$pre$i$2$i$i$20$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$2$i$i$20$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$2$i$i$20$lcssa >> 2] | 0) + 36 >> 2] & 127]($$pre$i$2$i$i$20$lcssa) | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      label = 50;
      break;
     }
     if ($143) {
      $$2 = $__r$0$lcssa;
      break L16;
     }
    } while (0);
    if ((label | 0) == 50) if (!$143) {
     $$2 = $__r$0$lcssa;
     break;
    }
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
    $$2 = $__r$0$lcssa;
    break;
   }
  }
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$2 = 0;
 } while (0);
 return $$2 | 0;
}

function _fmod($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $12 = 0, $120 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $146 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $2 = 0, $23 = 0.0, $25 = 0, $26 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $78 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $93 = 0, $94 = 0, $96 = 0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $6 = $4 & 2047;
 $7 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
 $12 = tempRet0;
 L1 : do if (($11 | 0) == 0 & ($12 | 0) == 0) label = 3; else {
  $16 = $3 & 2147483647;
  if ($16 >>> 0 > 2146435072 | ($16 | 0) == 2146435072 & $2 >>> 0 > 0 | ($6 | 0) == 2047) label = 3; else {
   $25 = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0;
   $26 = tempRet0;
   if (!($26 >>> 0 > $12 >>> 0 | ($26 | 0) == ($12 | 0) & $25 >>> 0 > $11 >>> 0)) return +(($25 | 0) == ($11 | 0) & ($26 | 0) == ($12 | 0) ? $x * 0.0 : $x);
   if (!$6) {
    $37 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0;
    $38 = tempRet0;
    if (($38 | 0) > -1 | ($38 | 0) == -1 & $37 >>> 0 > 4294967295) {
     $45 = $37;
     $46 = $38;
     $ex$026 = 0;
     while (1) {
      $44 = $ex$026 + -1 | 0;
      $45 = _bitshift64Shl($45 | 0, $46 | 0, 1) | 0;
      $46 = tempRet0;
      if (!(($46 | 0) > -1 | ($46 | 0) == -1 & $45 >>> 0 > 4294967295)) {
       $ex$0$lcssa = $44;
       break;
      } else $ex$026 = $44;
     }
    } else $ex$0$lcssa = 0;
    $55 = _bitshift64Shl($0 | 0, $1 | 0, 1 - $ex$0$lcssa | 0) | 0;
    $83 = $55;
    $84 = tempRet0;
    $ex$1 = $ex$0$lcssa;
   } else {
    $83 = $0;
    $84 = $1 & 1048575 | 1048576;
    $ex$1 = $6;
   }
   if (!$9) {
    $60 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $61 = tempRet0;
    if (($61 | 0) > -1 | ($61 | 0) == -1 & $60 >>> 0 > 4294967295) {
     $68 = $60;
     $69 = $61;
     $ey$020 = 0;
     while (1) {
      $67 = $ey$020 + -1 | 0;
      $68 = _bitshift64Shl($68 | 0, $69 | 0, 1) | 0;
      $69 = tempRet0;
      if (!(($69 | 0) > -1 | ($69 | 0) == -1 & $68 >>> 0 > 4294967295)) {
       $ey$0$lcssa = $67;
       break;
      } else $ey$020 = $67;
     }
    } else $ey$0$lcssa = 0;
    $78 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $ey$0$lcssa | 0) | 0;
    $85 = $78;
    $86 = tempRet0;
    $ey$1$ph = $ey$0$lcssa;
   } else {
    $85 = $2;
    $86 = $3 & 1048575 | 1048576;
    $ey$1$ph = $9;
   }
   $87 = _i64Subtract($83 | 0, $84 | 0, $85 | 0, $86 | 0) | 0;
   $88 = tempRet0;
   $93 = ($88 | 0) > -1 | ($88 | 0) == -1 & $87 >>> 0 > 4294967295;
   L23 : do if (($ex$1 | 0) > ($ey$1$ph | 0)) {
    $152 = $93;
    $153 = $87;
    $154 = $88;
    $94 = $83;
    $96 = $84;
    $ex$212 = $ex$1;
    while (1) {
     if ($152) if (($94 | 0) == ($85 | 0) & ($96 | 0) == ($86 | 0)) break; else {
      $100 = $153;
      $101 = $154;
     } else {
      $100 = $94;
      $101 = $96;
     }
     $102 = _bitshift64Shl($100 | 0, $101 | 0, 1) | 0;
     $103 = tempRet0;
     $104 = $ex$212 + -1 | 0;
     $106 = _i64Subtract($102 | 0, $103 | 0, $85 | 0, $86 | 0) | 0;
     $107 = tempRet0;
     $112 = ($107 | 0) > -1 | ($107 | 0) == -1 & $106 >>> 0 > 4294967295;
     if (($104 | 0) > ($ey$1$ph | 0)) {
      $152 = $112;
      $153 = $106;
      $154 = $107;
      $94 = $102;
      $96 = $103;
      $ex$212 = $104;
     } else {
      $$lcssa7 = $112;
      $113 = $102;
      $115 = $103;
      $155 = $106;
      $156 = $107;
      $ex$2$lcssa = $104;
      break L23;
     }
    }
    $$0 = $x * 0.0;
    break L1;
   } else {
    $$lcssa7 = $93;
    $113 = $83;
    $115 = $84;
    $155 = $87;
    $156 = $88;
    $ex$2$lcssa = $ex$1;
   } while (0);
   if ($$lcssa7) if (($113 | 0) == ($85 | 0) & ($115 | 0) == ($86 | 0)) {
    $$0 = $x * 0.0;
    break;
   } else {
    $118 = $156;
    $120 = $155;
   } else {
    $118 = $115;
    $120 = $113;
   }
   if ($118 >>> 0 < 1048576 | ($118 | 0) == 1048576 & $120 >>> 0 < 0) {
    $126 = $120;
    $127 = $118;
    $ex$39 = $ex$2$lcssa;
    while (1) {
     $128 = _bitshift64Shl($126 | 0, $127 | 0, 1) | 0;
     $129 = tempRet0;
     $130 = $ex$39 + -1 | 0;
     if ($129 >>> 0 < 1048576 | ($129 | 0) == 1048576 & $128 >>> 0 < 0) {
      $126 = $128;
      $127 = $129;
      $ex$39 = $130;
     } else {
      $137 = $128;
      $138 = $129;
      $ex$3$lcssa = $130;
      break;
     }
    }
   } else {
    $137 = $120;
    $138 = $118;
    $ex$3$lcssa = $ex$2$lcssa;
   }
   if (($ex$3$lcssa | 0) > 0) {
    $139 = _i64Add($137 | 0, $138 | 0, 0, -1048576) | 0;
    $140 = tempRet0;
    $141 = _bitshift64Shl($ex$3$lcssa | 0, 0, 52) | 0;
    $149 = $140 | tempRet0;
    $151 = $139 | $141;
   } else {
    $146 = _bitshift64Lshr($137 | 0, $138 | 0, 1 - $ex$3$lcssa | 0) | 0;
    $149 = tempRet0;
    $151 = $146;
   }
   HEAP32[tempDoublePtr >> 2] = $151;
   HEAP32[tempDoublePtr + 4 >> 2] = $149 | $10;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((label | 0) == 3) {
  $23 = $x * $y;
  $$0 = $23 / $23;
 }
 return +$$0;
}

function __ZN6Matrix5SolveEPPd6Vector($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $$lcssa4 = 0.0, $$lcssa55 = 0.0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $101 = 0, $110 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $22 = 0.0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0.0, $45 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0.0, $66 = 0, $68 = 0.0, $69 = 0, $77 = 0.0, $78 = 0, $82 = 0.0, $85 = 0, $86 = 0.0, $88 = 0, $90 = 0.0, $91 = 0, $96 = 0, $97 = 0.0, $98 = 0, $i$033 = 0, $i2$011 = 0, $i3$017 = 0, $i4$026 = 0, $i4$026$us = 0, $i5$08 = 0, $indvars$iv = 0, $j$029 = 0, $j6$07 = 0, $k$022$us = 0, $maxIdx$0$lcssa = 0, $maxIdx$012 = 0, $maxIdx$1 = 0, $s$0$lcssa = 0.0, $s$06 = 0.0, label = 0, $j$029$looptemp = 0;
 $1 = HEAP32[$b + 4 >> 2] | 0;
 $3 = __Znaj($1 >>> 0 > 1073741823 ? -1 : $1 << 2) | 0;
 $4 = ($1 | 0) > 0;
 if ($4) {
  $i$033 = 0;
  do {
   HEAP32[$3 + ($i$033 << 2) >> 2] = $i$033;
   $i$033 = $i$033 + 1 | 0;
  } while (($i$033 | 0) != ($1 | 0));
 }
 $6 = __Znaj($1 >>> 0 > 536870911 ? -1 : $1 << 3) | 0;
 if (!$4) {
  __ZdaPv($3);
  return $6 | 0;
 }
 _memset($6 | 0, 0, $1 << 3 | 0) | 0;
 $indvars$iv = $1;
 $j$029 = 0;
 while (1) {
  $10 = $1 - $j$029 | 0;
  if (($10 | 0) > 0) {
   $i2$011 = 0;
   $maxIdx$012 = 0;
   while (1) {
    $22 = +Math_abs(+(+HEAPF64[(HEAP32[$a + ($i2$011 << 2) >> 2] | 0) + ($j$029 << 3) >> 3]));
    $28 = $22 > +Math_abs(+(+HEAPF64[(HEAP32[$a + ($maxIdx$012 << 2) >> 2] | 0) + ($j$029 << 3) >> 3]));
    $maxIdx$1 = $28 ? $i2$011 : $maxIdx$012;
    $i2$011 = $i2$011 + 1 | 0;
    if (($i2$011 | 0) == ($indvars$iv | 0)) {
     $maxIdx$0$lcssa = $maxIdx$1;
     break;
    } else $maxIdx$012 = $maxIdx$1;
   }
  } else $maxIdx$0$lcssa = 0;
  $12 = $a + ($maxIdx$0$lcssa << 2) | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  $14 = $13 + ($j$029 << 3) | 0;
  $15 = +HEAPF64[$14 >> 3];
  if (+Math_abs(+$15) < 1.0e-12) {
   label = 10;
   break;
  }
  $j$029$looptemp = $j$029;
  $j$029 = $j$029 + 1 | 0;
  $32 = ($j$029 | 0) < ($1 | 0);
  if ($32) {
   $43 = $15;
   $i3$017 = $j$029;
   while (1) {
    $40 = $13 + ($i3$017 << 3) | 0;
    HEAPF64[$40 >> 3] = +HEAPF64[$40 >> 3] / $43;
    $i3$017 = $i3$017 + 1 | 0;
    $45 = +HEAPF64[$14 >> 3];
    if (($i3$017 | 0) == ($1 | 0)) {
     $$lcssa4 = $45;
     break;
    } else $43 = $45;
   }
  } else $$lcssa4 = $15;
  $33 = __ZNK6VectorixEi($b, $maxIdx$0$lcssa) | 0;
  HEAPF64[$33 >> 3] = +HEAPF64[$33 >> 3] / $$lcssa4;
  $36 = HEAP32[$12 >> 2] | 0;
  HEAPF64[$36 + ($j$029$looptemp << 3) >> 3] = 1.0;
  $38 = $10 + -1 | 0;
  if (($maxIdx$0$lcssa | 0) == ($38 | 0)) $$pre$phiZ2D = $a + ($38 << 2) | 0; else {
   $47 = $a + ($38 << 2) | 0;
   $48 = HEAP32[$47 >> 2] | 0;
   HEAP32[$47 >> 2] = $36;
   HEAP32[$12 >> 2] = $48;
   $49 = __ZNK6VectorixEi($b, $38) | 0;
   $50 = +HEAPF64[$49 >> 3];
   $51 = __ZNK6VectorixEi($b, $maxIdx$0$lcssa) | 0;
   $52 = +HEAPF64[$51 >> 3];
   $53 = __ZNK6VectorixEi($b, $38) | 0;
   HEAPF64[$53 >> 3] = $52;
   $54 = __ZNK6VectorixEi($b, $maxIdx$0$lcssa) | 0;
   HEAPF64[$54 >> 3] = $50;
   $55 = $3 + ($38 << 2) | 0;
   $56 = HEAP32[$55 >> 2] | 0;
   $57 = $3 + ($maxIdx$0$lcssa << 2) | 0;
   HEAP32[$55 >> 2] = HEAP32[$57 >> 2];
   HEAP32[$57 >> 2] = $56;
   $$pre$phiZ2D = $47;
  }
  $59 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  L23 : do if (($10 | 0) > 1) {
   if ($32) $i4$026$us = 0; else {
    $i4$026 = 0;
    while (1) {
     $85 = (HEAP32[$a + ($i4$026 << 2) >> 2] | 0) + ($j$029$looptemp << 3) | 0;
     $86 = +HEAPF64[$85 >> 3];
     if ($86 != 0.0) {
      $88 = __ZNK6VectorixEi($b, $38) | 0;
      $90 = $86 * +HEAPF64[$88 >> 3];
      $91 = __ZNK6VectorixEi($b, $i4$026) | 0;
      HEAPF64[$91 >> 3] = +HEAPF64[$91 >> 3] - $90;
      HEAPF64[$85 >> 3] = 0.0;
     }
     $i4$026 = $i4$026 + 1 | 0;
     if (($i4$026 | 0) >= ($38 | 0)) break L23;
    }
   }
   do {
    $62 = HEAP32[$a + ($i4$026$us << 2) >> 2] | 0;
    $63 = $62 + ($j$029$looptemp << 3) | 0;
    $64 = +HEAPF64[$63 >> 3];
    if ($64 != 0.0) {
     $77 = $64;
     $k$022$us = $j$029;
     while (1) {
      $78 = $62 + ($k$022$us << 3) | 0;
      HEAPF64[$78 >> 3] = +HEAPF64[$78 >> 3] - $77 * +HEAPF64[$59 + ($k$022$us << 3) >> 3];
      $k$022$us = $k$022$us + 1 | 0;
      $82 = +HEAPF64[$63 >> 3];
      if (($k$022$us | 0) == ($1 | 0)) {
       $$lcssa55 = $82;
       break;
      } else $77 = $82;
     }
     $66 = __ZNK6VectorixEi($b, $38) | 0;
     $68 = $$lcssa55 * +HEAPF64[$66 >> 3];
     $69 = __ZNK6VectorixEi($b, $i4$026$us) | 0;
     HEAPF64[$69 >> 3] = +HEAPF64[$69 >> 3] - $68;
     HEAPF64[$63 >> 3] = 0.0;
    }
    $i4$026$us = $i4$026$us + 1 | 0;
   } while (($i4$026$us | 0) < ($38 | 0));
  } while (0);
  if (!$32) break; else $indvars$iv = $indvars$iv + -1 | 0;
 }
 if ((label | 0) == 10) {
  $30 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$30 >> 2] = 15174;
  ___cxa_throw($30 | 0, 888, 0);
 }
 if ($4) $i5$08 = 0; else {
  __ZdaPv($3);
  return $6 | 0;
 }
 do {
  $96 = __ZNK6VectorixEi($b, $i5$08) | 0;
  $97 = +HEAPF64[$96 >> 3];
  $98 = $1 - $i5$08 | 0;
  if (($i5$08 | 0) > 0) {
   $101 = HEAP32[$a + ($i5$08 << 2) >> 2] | 0;
   $j6$07 = $98;
   $s$06 = $97;
   while (1) {
    $110 = $s$06 - +HEAPF64[$6 + ($j6$07 << 3) >> 3] * +HEAPF64[$101 + ($j6$07 << 3) >> 3];
    $j6$07 = $j6$07 + 1 | 0;
    if (($j6$07 | 0) >= ($1 | 0)) {
     $s$0$lcssa = $110;
     break;
    } else $s$06 = $110;
   }
  } else $s$0$lcssa = $97;
  HEAPF64[$6 + ($98 + -1 << 3) >> 3] = $s$0$lcssa;
  $i5$08 = $i5$08 + 1 | 0;
 } while (($i5$08 | 0) != ($1 | 0));
 __ZdaPv($3);
 return $6 | 0;
}

function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($this, $__s, $__intl, $__iob, $__fl, $__units) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $29 = 0, $3 = 0, $30 = 0, $34 = 0, $4 = 0, $42 = 0, $5 = 0, $54 = 0, $62 = 0, $73 = 0, $76 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $92 = 0, $95 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__i$0$i$i = 0, $__i$0$i$i$2 = 0, $__i$0$i$i$4 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008 | 0;
 $$byval_copy = sp + 8 | 0;
 $vararg_buffer1 = sp;
 $__buf = sp + 896 | 0;
 $__bb = sp + 888 | 0;
 $__digits = sp + 488 | 0;
 $__loc = sp + 480 | 0;
 $__pat = sp + 892 | 0;
 $__dp = sp + 476 | 0;
 $__ts = sp + 472 | 0;
 $__grp = sp + 460 | 0;
 $__sym = sp + 448 | 0;
 $__sn = sp + 436 | 0;
 $__fd = sp + 432 | 0;
 $__mbuf = sp + 32 | 0;
 $__mi = sp + 24 | 0;
 $__me = sp + 16 | 0;
 $0 = sp + 20 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[$$byval_copy >> 3] = $__units;
 $1 = _snprintf($__buf, 100, 24307, $$byval_copy) | 0;
 if ($1 >>> 0 > 99) {
  $3 = __ZNSt3__16__clocEv() | 0;
  HEAPF64[$vararg_buffer1 >> 3] = $__units;
  $4 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb, $3, 24307, $vararg_buffer1) | 0;
  $5 = HEAP32[$__bb >> 2] | 0;
  if (!$5) __ZSt17__throw_bad_allocv();
  $9 = _malloc($4 << 2) | 0;
  if (!$9) __ZSt17__throw_bad_allocv(); else {
   $92 = $9;
   $95 = $5;
   $__db$0 = $9;
   $__n$0 = $4;
  }
 } else {
  $92 = 0;
  $95 = 0;
  $__db$0 = $__digits;
  $__n$0 = $1;
 }
 $12 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $12;
 $13 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10384) | 0;
 $14 = HEAP32[$__bb >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 48 >> 2] & 63]($13, $14, $14 + $__n$0 | 0, $__db$0) | 0;
 if (!$__n$0) $29 = 0; else $29 = (HEAP8[HEAP32[$__bb >> 2] >> 0] | 0) == 45;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i$2 = 0;
 while (1) {
  if (($__i$0$i$i$2 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i$2 << 2) >> 2] = 0;
  $__i$0$i$i$2 = $__i$0$i$i$2 + 1 | 0;
 }
 $__i$0$i$i$4 = 0;
 while (1) {
  if (($__i$0$i$i$4 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i$4 << 2) >> 2] = 0;
  $__i$0$i$i$4 = $__i$0$i$i$4 + 1 | 0;
 }
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $29, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $30 = HEAP32[$__fd >> 2] | 0;
 if (($__n$0 | 0) > ($30 | 0)) {
  $34 = HEAP8[$__sn >> 0] | 0;
  $42 = HEAP8[$__sym >> 0] | 0;
  $73 = ($__n$0 - $30 << 1 | 1) + $30 + (($34 & 1) == 0 ? ($34 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($42 & 1) == 0 ? ($42 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0;
 } else {
  $54 = HEAP8[$__sn >> 0] | 0;
  $62 = HEAP8[$__sym >> 0] | 0;
  $73 = $30 + 2 + (($54 & 1) == 0 ? ($54 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($62 & 1) == 0 ? ($62 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0;
 }
 if ($73 >>> 0 > 100) {
  $76 = _malloc($73 << 2) | 0;
  if (!$76) __ZSt17__throw_bad_allocv(); else {
   $88 = $76;
   $__mb$0 = $76;
  }
 } else {
  $88 = 0;
  $__mb$0 = $__mbuf;
 }
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + ($__n$0 << 2) | 0, $13, $29, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $30);
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
 $85 = HEAP32[$__mi >> 2] | 0;
 $86 = HEAP32[$__me >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $87 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__mb$0, $85, $86, $__iob, $__fl) | 0;
 if (!$88) $91 = $12; else {
  _free($88);
  $91 = HEAP32[$__loc >> 2] | 0;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__114__shared_count16__release_sharedEv($91) | 0;
 if ($92) _free($92);
 if ($95) _free($95);
 STACKTOP = sp;
 return $87 | 0;
}

function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$37 = 0, $$lcssa = 0, $$lcssa100 = 0, $$lcssa101 = 0, $$lcssa102 = 0, $$lcssa98 = 0, $$lcssa99 = 0, $$pre57 = 0, $16 = 0, $17 = 0, $28 = 0, $38 = 0, $42 = 0, $44 = 0, $57 = 0, $71 = 0, $75 = 0, $77 = 0, $79 = 0, $91 = 0, $94 = 0, $frm_nxt$1 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$5$ph24 = 0, $nchar32_t$0 = 0, label = 0;
 $$pre57 = $frm_end;
 if (!($mode & 4)) {
  $frm_nxt$1 = $frm;
  $nchar32_t$0 = 0;
 } else if (($$pre57 - $frm | 0) > 2) if ((HEAP8[$frm >> 0] | 0) == -17) if ((HEAP8[$frm + 1 >> 0] | 0) == -69) {
  $frm_nxt$1 = (HEAP8[$frm + 2 >> 0] | 0) == -65 ? $frm + 3 | 0 : $frm;
  $nchar32_t$0 = 0;
 } else {
  $frm_nxt$1 = $frm;
  $nchar32_t$0 = 0;
 } else {
  $frm_nxt$1 = $frm;
  $nchar32_t$0 = 0;
 } else {
  $frm_nxt$1 = $frm;
  $nchar32_t$0 = 0;
 }
 L6 : while (1) {
  if (!($nchar32_t$0 >>> 0 < $mx >>> 0 & $frm_nxt$1 >>> 0 < $frm_end >>> 0)) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 40;
   break;
  }
  $16 = HEAP8[$frm_nxt$1 >> 0] | 0;
  $17 = $16 & 255;
  do if ($16 << 24 >> 24 > -1) {
   if ($17 >>> 0 > $Maxcode >>> 0) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   $frm_nxt$5$ph24 = $frm_nxt$1 + 1 | 0;
  } else {
   if (($16 & 255) < 194) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   if (($16 & 255) < 224) {
    if (($$pre57 - $frm_nxt$1 | 0) < 2) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $28 = HEAPU8[$frm_nxt$1 + 1 >> 0] | 0;
    if (($28 & 192 | 0) != 128) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    if (($28 & 63 | $17 << 6 & 1984) >>> 0 > $Maxcode >>> 0) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $frm_nxt$5$ph24 = $frm_nxt$1 + 2 | 0;
    break;
   }
   if (($16 & 255) < 240) {
    $38 = $frm_nxt$1;
    if (($$pre57 - $38 | 0) < 3) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $42 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
    $44 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
    switch ($17 | 0) {
    case 224:
     {
      if (($42 & -32) << 24 >> 24 != -96) {
       $$lcssa101 = $38;
       label = 20;
       break L6;
      }
      break;
     }
    case 237:
     {
      if (($42 & -32) << 24 >> 24 != -128) {
       $$lcssa100 = $38;
       label = 22;
       break L6;
      }
      break;
     }
    default:
     if (($42 & -64) << 24 >> 24 != -128) {
      $$lcssa102 = $38;
      label = 24;
      break L6;
     }
    }
    $57 = $44 & 255;
    if (($57 & 192 | 0) != 128) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    if ((($42 & 255) << 6 & 4032 | $17 << 12 & 61440 | $57 & 63) >>> 0 > $Maxcode >>> 0) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    } else {
     $frm_nxt$5$ph24 = $frm_nxt$1 + 3 | 0;
     break;
    }
   }
   if (($16 & 255) >= 245) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   $71 = $frm_nxt$1;
   if (($$pre57 - $71 | 0) < 4) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   $75 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
   $77 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
   $79 = HEAP8[$frm_nxt$1 + 3 >> 0] | 0;
   switch ($17 | 0) {
   case 240:
    {
     if (($75 + 112 & 255) >= 48) {
      $$lcssa98 = $71;
      label = 31;
      break L6;
     }
     break;
    }
   case 244:
    {
     if (($75 & -16) << 24 >> 24 != -128) {
      $$lcssa = $71;
      label = 33;
      break L6;
     }
     break;
    }
   default:
    if (($75 & -64) << 24 >> 24 != -128) {
     $$lcssa99 = $71;
     label = 35;
     break L6;
    }
   }
   $91 = $77 & 255;
   if (($91 & 192 | 0) != 128) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   $94 = $79 & 255;
   if (($94 & 192 | 0) != 128) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   if ((($75 & 255) << 12 & 258048 | $17 << 18 & 1835008 | $91 << 6 & 4032 | $94 & 63) >>> 0 > $Maxcode >>> 0) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   } else $frm_nxt$5$ph24 = $frm_nxt$1 + 4 | 0;
  } while (0);
  $frm_nxt$1 = $frm_nxt$5$ph24;
  $nchar32_t$0 = $nchar32_t$0 + 1 | 0;
 }
 if ((label | 0) == 20) $$37 = $$lcssa101 - $frm | 0; else if ((label | 0) == 22) $$37 = $$lcssa100 - $frm | 0; else if ((label | 0) == 24) $$37 = $$lcssa102 - $frm | 0; else if ((label | 0) == 31) $$37 = $$lcssa98 - $frm | 0; else if ((label | 0) == 33) $$37 = $$lcssa - $frm | 0; else if ((label | 0) == 35) $$37 = $$lcssa99 - $frm | 0; else if ((label | 0) == 40) $$37 = $frm_nxt$1$lcssa - $frm | 0;
 return $$37 | 0;
}

function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($this, $__s, $__intl, $__iob, $__fl, $__units) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $4 = 0, $41 = 0, $5 = 0, $53 = 0, $61 = 0, $72 = 0, $74 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $89 = 0, $90 = 0, $93 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__i$0$i$i = 0, $__i$0$i$i$4 = 0, $__i$0$i$i$7 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 $$byval_copy = sp + 8 | 0;
 $vararg_buffer1 = sp;
 $__buf = sp + 284 | 0;
 $__bb = sp + 72 | 0;
 $__digits = sp + 184 | 0;
 $__loc = sp + 68 | 0;
 $__pat = sp + 180 | 0;
 $__dp = sp + 177 | 0;
 $__ts = sp + 176 | 0;
 $__grp = sp + 56 | 0;
 $__sym = sp + 44 | 0;
 $__sn = sp + 32 | 0;
 $__fd = sp + 28 | 0;
 $__mbuf = sp + 76 | 0;
 $__mi = sp + 24 | 0;
 $__me = sp + 16 | 0;
 $0 = sp + 20 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[$$byval_copy >> 3] = $__units;
 $1 = _snprintf($__buf, 100, 24307, $$byval_copy) | 0;
 if ($1 >>> 0 > 99) {
  $3 = __ZNSt3__16__clocEv() | 0;
  HEAPF64[$vararg_buffer1 >> 3] = $__units;
  $4 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb, $3, 24307, $vararg_buffer1) | 0;
  $5 = HEAP32[$__bb >> 2] | 0;
  if (!$5) __ZSt17__throw_bad_allocv();
  $8 = _malloc($4) | 0;
  if (!$8) __ZSt17__throw_bad_allocv(); else {
   $90 = $8;
   $93 = $5;
   $__db$0 = $8;
   $__n$0 = $4;
  }
 } else {
  $90 = 0;
  $93 = 0;
  $__db$0 = $__digits;
  $__n$0 = $1;
 }
 $11 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $11;
 $12 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10392) | 0;
 $13 = HEAP32[$__bb >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 63]($12, $13, $13 + $__n$0 | 0, $__db$0) | 0;
 if (!$__n$0) $28 = 0; else $28 = (HEAP8[HEAP32[$__bb >> 2] >> 0] | 0) == 45;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i$4 = 0;
 while (1) {
  if (($__i$0$i$i$4 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i$4 << 2) >> 2] = 0;
  $__i$0$i$i$4 = $__i$0$i$i$4 + 1 | 0;
 }
 $__i$0$i$i$7 = 0;
 while (1) {
  if (($__i$0$i$i$7 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i$7 << 2) >> 2] = 0;
  $__i$0$i$i$7 = $__i$0$i$i$7 + 1 | 0;
 }
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $28, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $29 = HEAP32[$__fd >> 2] | 0;
 if (($__n$0 | 0) > ($29 | 0)) {
  $33 = HEAP8[$__sn >> 0] | 0;
  $41 = HEAP8[$__sym >> 0] | 0;
  $72 = ($__n$0 - $29 << 1 | 1) + $29 + (($33 & 1) == 0 ? ($33 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($41 & 1) == 0 ? ($41 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0;
 } else {
  $53 = HEAP8[$__sn >> 0] | 0;
  $61 = HEAP8[$__sym >> 0] | 0;
  $72 = $29 + 2 + (($53 & 1) == 0 ? ($53 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($61 & 1) == 0 ? ($61 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0;
 }
 if ($72 >>> 0 > 100) {
  $74 = _malloc($72) | 0;
  if (!$74) __ZSt17__throw_bad_allocv(); else {
   $86 = $74;
   $__mb$0 = $74;
  }
 } else {
  $86 = 0;
  $__mb$0 = $__mbuf;
 }
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + $__n$0 | 0, $12, $28, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $29);
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
 $83 = HEAP32[$__mi >> 2] | 0;
 $84 = HEAP32[$__me >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $85 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__mb$0, $83, $84, $__iob, $__fl) | 0;
 if (!$86) $89 = $11; else {
  _free($86);
  $89 = HEAP32[$__loc >> 2] | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__114__shared_count16__release_sharedEv($89) | 0;
 if ($90) _free($90);
 if ($93) _free($93);
 STACKTOP = sp;
 return $85 | 0;
}

function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$0$i$i = 0, $$0$i$i$3 = 0, $$01$i$i = 0, $$01$i$i$2 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $101 = 0, $102 = 0, $110 = 0, $18 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $35 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $60 = 0, $61 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $70 = 0, $72 = 0, $8 = 0, $81 = 0, $85 = 0, $87 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10384) | 0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10540) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 127]($__grouping, $1);
 $5 = HEAP8[$__grouping >> 0] | 0;
 $8 = $__grouping + 4 | 0;
 L1 : do if (!((($5 & 1) == 0 ? ($5 & 255) >>> 1 : HEAP32[$8 >> 2] | 0) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 63]($0, $__nb, $__ne, $__ob) | 0;
  $18 = $__nb;
  $20 = $__ob + ($__ne - $18 << 2) | 0;
  HEAP32[$__oe >> 2] = $20;
  $$pre$phiZ2D = $18;
  $110 = $20;
 } else {
  HEAP32[$__oe >> 2] = $__ob;
  $21 = HEAP8[$__nb >> 0] | 0;
  switch ($21 << 24 >> 24) {
  case 43:
  case 45:
   {
    $26 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 63]($0, $21) | 0;
    $27 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $27 + 4;
    HEAP32[$27 >> 2] = $26;
    $__nf$0 = $__nb + 1 | 0;
    break;
   }
  default:
   $__nf$0 = $__nb;
  }
  L7 : do if (($__ne - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
   $35 = $__nf$0 + 1 | 0;
   switch (HEAP8[$35 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    {
     $__nf$1 = $__nf$0;
     break L7;
    }
   }
   $40 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 63]($0, 48) | 0;
   $41 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $41 + 4;
   HEAP32[$41 >> 2] = $40;
   $48 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 63]($0, HEAP8[$35 >> 0] | 0) | 0;
   $49 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $49 + 4;
   HEAP32[$49 >> 2] = $48;
   $__nf$1 = $__nf$0 + 2 | 0;
  } else $__nf$1 = $__nf$0; else $__nf$1 = $__nf$0; while (0);
  L12 : do if (($__nf$1 | 0) != ($__ne | 0)) {
   $$0$i$i = $__ne;
   $$01$i$i = $__nf$1;
   while (1) {
    $52 = $$0$i$i + -1 | 0;
    if ($$01$i$i >>> 0 >= $52 >>> 0) break L12;
    $54 = HEAP8[$$01$i$i >> 0] | 0;
    HEAP8[$$01$i$i >> 0] = HEAP8[$52 >> 0] | 0;
    HEAP8[$52 >> 0] = $54;
    $$0$i$i = $52;
    $$01$i$i = $$01$i$i + 1 | 0;
   }
  } while (0);
  $60 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 127]($1) | 0;
  $61 = $__grouping + 8 | 0;
  $62 = $__grouping + 1 | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ne >>> 0) break;
   $81 = HEAP8[((HEAP8[$__grouping >> 0] & 1) == 0 ? $62 : HEAP32[$61 >> 2] | 0) + $__dg$0 >> 0] | 0;
   if ($81 << 24 >> 24 != 0 & ($__dc$0 | 0) == ($81 << 24 >> 24 | 0)) {
    $85 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $85 + 4;
    HEAP32[$85 >> 2] = $60;
    $87 = HEAP8[$__grouping >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = ($__dg$0 >>> 0 < ((($87 & 1) == 0 ? ($87 & 255) >>> 1 : HEAP32[$8 >> 2] | 0) + -1 | 0) >>> 0 & 1) + $__dg$0 | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $101 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 63]($0, HEAP8[$__p$0 >> 0] | 0) | 0;
   $102 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $102 + 4;
   HEAP32[$102 >> 2] = $101;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $65 = $__nb;
  $67 = $__ob + ($__nf$1 - $65 << 2) | 0;
  $68 = HEAP32[$__oe >> 2] | 0;
  if (($67 | 0) == ($68 | 0)) {
   $$pre$phiZ2D = $65;
   $110 = $67;
  } else {
   $$0$i$i$3 = $68;
   $$01$i$i$2 = $67;
   while (1) {
    $70 = $$0$i$i$3 + -4 | 0;
    if ($$01$i$i$2 >>> 0 >= $70 >>> 0) {
     $$pre$phiZ2D = $65;
     $110 = $68;
     break L1;
    }
    $72 = HEAP32[$$01$i$i$2 >> 2] | 0;
    HEAP32[$$01$i$i$2 >> 2] = HEAP32[$70 >> 2];
    HEAP32[$70 >> 2] = $72;
    $$0$i$i$3 = $70;
    $$01$i$i$2 = $$01$i$i$2 + 4 | 0;
   }
  }
 } while (0);
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $110 : $__ob + ($__np - $$pre$phiZ2D << 2) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$0$i$i = 0, $$0$i$i$3 = 0, $$01$i$i = 0, $$01$i$i$2 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $101 = 0, $102 = 0, $110 = 0, $18 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $35 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $60 = 0, $61 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $70 = 0, $72 = 0, $8 = 0, $81 = 0, $85 = 0, $87 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10392) | 0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10532) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 127]($__grouping, $1);
 $5 = HEAP8[$__grouping >> 0] | 0;
 $8 = $__grouping + 4 | 0;
 if (!((($5 & 1) == 0 ? ($5 & 255) >>> 1 : HEAP32[$8 >> 2] | 0) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] & 63]($0, $__nb, $__ne, $__ob) | 0;
  $18 = $__nb;
  $20 = $__ob + ($__ne - $18) | 0;
  HEAP32[$__oe >> 2] = $20;
  $$pre$phiZ2D = $18;
  $110 = $20;
 } else {
  HEAP32[$__oe >> 2] = $__ob;
  $21 = HEAP8[$__nb >> 0] | 0;
  switch ($21 << 24 >> 24) {
  case 43:
  case 45:
   {
    $26 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 63]($0, $21) | 0;
    $27 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $27 + 1;
    HEAP8[$27 >> 0] = $26;
    $__nf$0 = $__nb + 1 | 0;
    break;
   }
  default:
   $__nf$0 = $__nb;
  }
  L7 : do if (($__ne - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
   $35 = $__nf$0 + 1 | 0;
   switch (HEAP8[$35 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    {
     $__nf$1 = $__nf$0;
     break L7;
    }
   }
   $40 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 63]($0, 48) | 0;
   $41 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $41 + 1;
   HEAP8[$41 >> 0] = $40;
   $48 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 63]($0, HEAP8[$35 >> 0] | 0) | 0;
   $49 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $49 + 1;
   HEAP8[$49 >> 0] = $48;
   $__nf$1 = $__nf$0 + 2 | 0;
  } else $__nf$1 = $__nf$0; else $__nf$1 = $__nf$0; while (0);
  L12 : do if (($__nf$1 | 0) != ($__ne | 0)) {
   $$0$i$i = $__ne;
   $$01$i$i = $__nf$1;
   while (1) {
    $52 = $$0$i$i + -1 | 0;
    if ($$01$i$i >>> 0 >= $52 >>> 0) break L12;
    $54 = HEAP8[$$01$i$i >> 0] | 0;
    HEAP8[$$01$i$i >> 0] = HEAP8[$52 >> 0] | 0;
    HEAP8[$52 >> 0] = $54;
    $$0$i$i = $52;
    $$01$i$i = $$01$i$i + 1 | 0;
   }
  } while (0);
  $60 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 127]($1) | 0;
  $61 = $__grouping + 8 | 0;
  $62 = $__grouping + 1 | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ne >>> 0) break;
   $81 = HEAP8[((HEAP8[$__grouping >> 0] & 1) == 0 ? $62 : HEAP32[$61 >> 2] | 0) + $__dg$0 >> 0] | 0;
   if ($81 << 24 >> 24 != 0 & ($__dc$0 | 0) == ($81 << 24 >> 24 | 0)) {
    $85 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $85 + 1;
    HEAP8[$85 >> 0] = $60;
    $87 = HEAP8[$__grouping >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = ($__dg$0 >>> 0 < ((($87 & 1) == 0 ? ($87 & 255) >>> 1 : HEAP32[$8 >> 2] | 0) + -1 | 0) >>> 0 & 1) + $__dg$0 | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $101 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 63]($0, HEAP8[$__p$0 >> 0] | 0) | 0;
   $102 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $102 + 1;
   HEAP8[$102 >> 0] = $101;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $65 = $__nb;
  $67 = $__ob + ($__nf$1 - $65) | 0;
  $68 = HEAP32[$__oe >> 2] | 0;
  if (($67 | 0) == ($68 | 0)) {
   $$pre$phiZ2D = $65;
   $110 = $67;
  } else {
   $$0$i$i$3 = $68;
   $$01$i$i$2 = $67;
   while (1) {
    $70 = $$0$i$i$3 + -1 | 0;
    if ($$01$i$i$2 >>> 0 >= $70 >>> 0) break;
    $72 = HEAP8[$$01$i$i$2 >> 0] | 0;
    HEAP8[$$01$i$i$2 >> 0] = HEAP8[$70 >> 0] | 0;
    HEAP8[$70 >> 0] = $72;
    $$0$i$i$3 = $70;
    $$01$i$i$2 = $$01$i$i$2 + 1 | 0;
   }
   $$pre$phiZ2D = $65;
   $110 = HEAP32[$__oe >> 2] | 0;
  }
 }
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $110 : $__ob + ($__np - $$pre$phiZ2D) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16locale5__impC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 10368;
 $2 = $this + 8 | 0;
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($2, 28);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this + 144 | 0, 24211, 1);
 $4 = HEAP32[$2 >> 2] | 0;
 $5 = $this + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 while (1) {
  if (($6 | 0) == ($4 | 0)) break;
  $8 = $6 + -4 | 0;
  HEAP32[$5 >> 2] = $8;
  $6 = $8;
 }
 HEAP32[539] = 0;
 HEAP32[538] = 9296;
 __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this, 2152);
 HEAP32[541] = 0;
 HEAP32[540] = 9336;
 __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this, 2160);
 __ZNSt3__15ctypeIcEC2EPKtbj(2168, 0, 0, 1);
 __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this, 2168);
 HEAP32[547] = 0;
 HEAP32[546] = 10656;
 __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this, 2184);
 HEAP32[549] = 0;
 HEAP32[548] = 10724;
 __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this, 2192);
 HEAP32[551] = 0;
 HEAP32[550] = 10476;
 $9 = __ZNSt3__16__clocEv() | 0;
 HEAP32[552] = $9;
 __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this, 2200);
 HEAP32[555] = 0;
 HEAP32[554] = 10772;
 __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this, 2216);
 HEAP32[557] = 0;
 HEAP32[556] = 10820;
 __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this, 2224);
 __ZNSt3__18numpunctIcEC2Ej(2232, 1);
 __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this, 2232);
 __ZNSt3__18numpunctIwEC2Ej(2256, 1);
 __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this, 2256);
 HEAP32[573] = 0;
 HEAP32[572] = 9376;
 __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 2288);
 HEAP32[575] = 0;
 HEAP32[574] = 9448;
 __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 2296);
 HEAP32[577] = 0;
 HEAP32[576] = 9520;
 __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 2304);
 HEAP32[579] = 0;
 HEAP32[578] = 9580;
 __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 2312);
 HEAP32[581] = 0;
 HEAP32[580] = 9888;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this, 2320);
 HEAP32[583] = 0;
 HEAP32[582] = 9952;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this, 2328);
 HEAP32[585] = 0;
 HEAP32[584] = 10016;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this, 2336);
 HEAP32[587] = 0;
 HEAP32[586] = 10080;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this, 2344);
 HEAP32[589] = 0;
 HEAP32[588] = 10144;
 __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 2352);
 HEAP32[591] = 0;
 HEAP32[590] = 10180;
 __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 2360);
 HEAP32[593] = 0;
 HEAP32[592] = 10216;
 __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 2368);
 HEAP32[595] = 0;
 HEAP32[594] = 10252;
 __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 2376);
 HEAP32[597] = 0;
 HEAP32[596] = 9640;
 HEAP32[598] = 9688;
 __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 2384);
 HEAP32[601] = 0;
 HEAP32[600] = 9732;
 HEAP32[602] = 9780;
 __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 2400);
 HEAP32[605] = 0;
 HEAP32[604] = 10636;
 $10 = __ZNSt3__16__clocEv() | 0;
 HEAP32[606] = $10;
 HEAP32[604] = 9824;
 __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 2416);
 HEAP32[609] = 0;
 HEAP32[608] = 10636;
 $11 = __ZNSt3__16__clocEv() | 0;
 HEAP32[610] = $11;
 HEAP32[608] = 9856;
 __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 2432);
 HEAP32[613] = 0;
 HEAP32[612] = 10288;
 __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this, 2448);
 HEAP32[615] = 0;
 HEAP32[614] = 10328;
 __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this, 2456);
 return;
}

function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $100 = 0, $101 = 0, $104 = 0, $15 = 0, $2 = 0, $27 = 0, $28 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $39 = 0, $47 = 0, $5 = 0, $59 = 0, $6 = 0, $67 = 0, $78 = 0, $81 = 0, $87 = 0, $90 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__i$0$i$i = 0, $__i$0$i$i$1 = 0, $__i$0$i$i$3 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 $$byval_copy = sp + 468 | 0;
 $__loc = sp + 464 | 0;
 $__pat = sp + 472 | 0;
 $__dp = sp + 460 | 0;
 $__ts = sp + 456 | 0;
 $__grp = sp + 444 | 0;
 $__sym = sp + 432 | 0;
 $__sn = sp + 420 | 0;
 $__fd = sp + 416 | 0;
 $__mbuf = sp + 16 | 0;
 $__mi = sp + 8 | 0;
 $__me = sp + 4 | 0;
 $0 = sp;
 $1 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $1;
 $2 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10384) | 0;
 $3 = HEAP8[$__digits >> 0] | 0;
 $5 = ($3 & 1) == 0;
 $6 = $__digits + 4 | 0;
 if (!(($5 ? ($3 & 255) >>> 1 : HEAP32[$6 >> 2] | 0) | 0)) $27 = 0; else {
  $15 = HEAP32[($5 ? $6 : HEAP32[$__digits + 8 >> 2] | 0) >> 2] | 0;
  $27 = ($15 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 44 >> 2] & 63]($2, 45) | 0);
 }
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i$1 = 0;
 while (1) {
  if (($__i$0$i$i$1 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i$1 << 2) >> 2] = 0;
  $__i$0$i$i$1 = $__i$0$i$i$1 + 1 | 0;
 }
 $__i$0$i$i$3 = 0;
 while (1) {
  if (($__i$0$i$i$3 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i$3 << 2) >> 2] = 0;
  $__i$0$i$i$3 = $__i$0$i$i$3 + 1 | 0;
 }
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $27, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $28 = HEAP8[$__digits >> 0] | 0;
 $31 = HEAP32[$6 >> 2] | 0;
 $34 = ($28 & 1) == 0 ? ($28 & 255) >>> 1 : $31;
 $35 = HEAP32[$__fd >> 2] | 0;
 if (($34 | 0) > ($35 | 0)) {
  $39 = HEAP8[$__sn >> 0] | 0;
  $47 = HEAP8[$__sym >> 0] | 0;
  $78 = ($34 - $35 << 1 | 1) + $35 + (($39 & 1) == 0 ? ($39 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($47 & 1) == 0 ? ($47 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0;
 } else {
  $59 = HEAP8[$__sn >> 0] | 0;
  $67 = HEAP8[$__sym >> 0] | 0;
  $78 = $35 + 2 + (($59 & 1) == 0 ? ($59 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($67 & 1) == 0 ? ($67 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0;
 }
 if ($78 >>> 0 > 100) {
  $81 = _malloc($78 << 2) | 0;
  if (!$81) __ZSt17__throw_bad_allocv(); else {
   $101 = $81;
   $__mb$0 = $81;
  }
 } else {
  $101 = 0;
  $__mb$0 = $__mbuf;
 }
 $87 = ($28 & 1) == 0;
 $90 = $87 ? $6 : HEAP32[$__digits + 8 >> 2] | 0;
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $90, $90 + (($87 ? ($28 & 255) >>> 1 : $31) << 2) | 0, $2, $27, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $35);
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
 $98 = HEAP32[$__mi >> 2] | 0;
 $99 = HEAP32[$__me >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $100 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__mb$0, $98, $99, $__iob, $__fl) | 0;
 if (!$101) $104 = $1; else {
  _free($101);
  $104 = HEAP32[$__loc >> 2] | 0;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__114__shared_count16__release_sharedEv($104) | 0;
 STACKTOP = sp;
 return $100 | 0;
}

function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $100 = 0, $101 = 0, $102 = 0, $105 = 0, $16 = 0, $2 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $35 = 0, $36 = 0, $40 = 0, $48 = 0, $5 = 0, $6 = 0, $60 = 0, $68 = 0, $79 = 0, $81 = 0, $87 = 0, $91 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__i$0$i$i = 0, $__i$0$i$i$1 = 0, $__i$0$i$i$4 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $$byval_copy = sp + 56 | 0;
 $__loc = sp + 52 | 0;
 $__pat = sp + 164 | 0;
 $__dp = sp + 161 | 0;
 $__ts = sp + 160 | 0;
 $__grp = sp + 40 | 0;
 $__sym = sp + 28 | 0;
 $__sn = sp + 16 | 0;
 $__fd = sp + 12 | 0;
 $__mbuf = sp + 60 | 0;
 $__mi = sp + 8 | 0;
 $__me = sp + 4 | 0;
 $0 = sp;
 $1 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $1;
 $2 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10392) | 0;
 $3 = HEAP8[$__digits >> 0] | 0;
 $5 = ($3 & 1) == 0;
 $6 = $__digits + 4 | 0;
 if (!(($5 ? ($3 & 255) >>> 1 : HEAP32[$6 >> 2] | 0) | 0)) $28 = 0; else {
  $16 = HEAP8[($5 ? $__digits + 1 | 0 : HEAP32[$__digits + 8 >> 2] | 0) >> 0] | 0;
  $28 = $16 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 63]($2, 45) | 0) << 24 >> 24;
 }
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i$1 = 0;
 while (1) {
  if (($__i$0$i$i$1 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i$1 << 2) >> 2] = 0;
  $__i$0$i$i$1 = $__i$0$i$i$1 + 1 | 0;
 }
 $__i$0$i$i$4 = 0;
 while (1) {
  if (($__i$0$i$i$4 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i$4 << 2) >> 2] = 0;
  $__i$0$i$i$4 = $__i$0$i$i$4 + 1 | 0;
 }
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $28, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $29 = HEAP8[$__digits >> 0] | 0;
 $32 = HEAP32[$6 >> 2] | 0;
 $35 = ($29 & 1) == 0 ? ($29 & 255) >>> 1 : $32;
 $36 = HEAP32[$__fd >> 2] | 0;
 if (($35 | 0) > ($36 | 0)) {
  $40 = HEAP8[$__sn >> 0] | 0;
  $48 = HEAP8[$__sym >> 0] | 0;
  $79 = ($35 - $36 << 1 | 1) + $36 + (($40 & 1) == 0 ? ($40 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($48 & 1) == 0 ? ($48 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0;
 } else {
  $60 = HEAP8[$__sn >> 0] | 0;
  $68 = HEAP8[$__sym >> 0] | 0;
  $79 = $36 + 2 + (($60 & 1) == 0 ? ($60 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($68 & 1) == 0 ? ($68 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0;
 }
 if ($79 >>> 0 > 100) {
  $81 = _malloc($79) | 0;
  if (!$81) __ZSt17__throw_bad_allocv(); else {
   $102 = $81;
   $__mb$0 = $81;
  }
 } else {
  $102 = 0;
  $__mb$0 = $__mbuf;
 }
 $87 = ($29 & 1) == 0;
 $91 = $87 ? $__digits + 1 | 0 : HEAP32[$__digits + 8 >> 2] | 0;
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $91, $91 + ($87 ? ($29 & 255) >>> 1 : $32) | 0, $2, $28, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $36);
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
 $99 = HEAP32[$__mi >> 2] | 0;
 $100 = HEAP32[$__me >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $101 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__mb$0, $99, $100, $__iob, $__fl) | 0;
 if (!$102) $105 = $1; else {
  _free($102);
  $105 = HEAP32[$__loc >> 2] | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__114__shared_count16__release_sharedEv($105) | 0;
 STACKTOP = sp;
 return $101 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$02 = 0, $$02$lcssa75 = 0, $$05 = 0, $$05$lcssa72 = 0, $$1$ph = 0, $$13 = 0, $$13$lcssa = 0, $$13$lcssa70 = 0, $$13$lcssa71 = 0, $$2 = 0, $$24 = 0, $$lcssa = 0, $$pre = 0, $13 = 0, $14 = 0, $18 = 0, $25 = 0, $26 = 0, $33 = 0, $34 = 0, $4 = 0, $42 = 0, $46 = 0, $47 = 0, $5 = 0, $53 = 0, $58 = 0, $60 = 0, $61 = 0, $8 = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$4$ph = 0, $save_state = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $save_state = sp;
 $fend$0 = $frm;
 while (1) {
  if (($fend$0 | 0) == ($frm_end | 0)) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  if (!(HEAP8[$fend$0 >> 0] | 0)) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $fend$0 = $fend$0 + 1 | 0;
 }
 HEAP32[$to_nxt >> 2] = $to;
 HEAP32[$frm_nxt >> 2] = $frm;
 $4 = $to_end;
 $5 = $this + 8 | 0;
 $$02 = $frm;
 $$05 = $to;
 $fend$1 = $fend$0$lcssa;
 L6 : while (1) {
  if (($$05 | 0) == ($to_end | 0) | ($$02 | 0) == ($frm_end | 0)) {
   $58 = $$02;
   label = 34;
   break;
  }
  $8 = $st;
  $13 = HEAP32[$8 + 4 >> 2] | 0;
  $14 = $save_state;
  HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$14 + 4 >> 2] = $13;
  $18 = $fend$1;
  $25 = _uselocale(HEAP32[$5 >> 2] | 0) | 0;
  $26 = _mbsnrtowcs($$05, $frm_nxt, $18 - $$02 | 0, $4 - $$05 >> 2, $st) | 0;
  if ($25) _uselocale($25) | 0;
  switch ($26 | 0) {
  case -1:
   {
    $$02$lcssa75 = $$02;
    $$05$lcssa72 = $$05;
    $$lcssa = $18;
    label = 10;
    break L6;
    break;
   }
  case 0:
   {
    $$1$ph = 2;
    label = 30;
    break L6;
    break;
   }
  default:
   {}
  }
  $42 = (HEAP32[$to_nxt >> 2] | 0) + ($26 << 2) | 0;
  HEAP32[$to_nxt >> 2] = $42;
  if (($42 | 0) == ($to_end | 0)) {
   label = 31;
   break;
  }
  $$pre = HEAP32[$frm_nxt >> 2] | 0;
  if (($fend$1 | 0) == ($frm_end | 0)) {
   $60 = $42;
   $61 = $$pre;
   $fend$4$ph = $frm_end;
  } else {
   $46 = _uselocale(HEAP32[$5 >> 2] | 0) | 0;
   $47 = _mbrtowc($42, $$pre, 1, $st) | 0;
   if ($46) _uselocale($46) | 0;
   if ($47) {
    $$1$ph = 2;
    label = 30;
    break;
   }
   HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 4;
   $53 = (HEAP32[$frm_nxt >> 2] | 0) + 1 | 0;
   HEAP32[$frm_nxt >> 2] = $53;
   $fend$2 = $53;
   while (1) {
    if (($fend$2 | 0) == ($frm_end | 0)) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    if (!(HEAP8[$fend$2 >> 0] | 0)) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $fend$2 = $fend$2 + 1 | 0;
   }
   $60 = HEAP32[$to_nxt >> 2] | 0;
   $61 = $53;
   $fend$4$ph = $fend$2$lcssa;
  }
  $$02 = $61;
  $$05 = $60;
  $fend$1 = $fend$4$ph;
 }
 do if ((label | 0) == 10) {
  $$13 = $$02$lcssa75;
  $storemerge = $$05$lcssa72;
  L29 : while (1) {
   HEAP32[$to_nxt >> 2] = $storemerge;
   if (($$13 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
    $$13$lcssa = $$13;
    label = 20;
    break;
   }
   $33 = _uselocale(HEAP32[$5 >> 2] | 0) | 0;
   $34 = _mbrtowc($storemerge, $$13, $$lcssa - $$13 | 0, $save_state) | 0;
   if ($33) _uselocale($33) | 0;
   switch ($34 | 0) {
   case -1:
    {
     $$13$lcssa70 = $$13;
     label = 16;
     break L29;
     break;
    }
   case -2:
    {
     $$13$lcssa71 = $$13;
     label = 17;
     break L29;
     break;
    }
   case 0:
    {
     $$24 = $$13 + 1 | 0;
     break;
    }
   default:
    $$24 = $$13 + $34 | 0;
   }
   $$13 = $$24;
   $storemerge = (HEAP32[$to_nxt >> 2] | 0) + 4 | 0;
  }
  if ((label | 0) == 16) {
   HEAP32[$frm_nxt >> 2] = $$13$lcssa70;
   $$1$ph = 2;
   label = 30;
   break;
  } else if ((label | 0) == 17) {
   HEAP32[$frm_nxt >> 2] = $$13$lcssa71;
   $$1$ph = 1;
   label = 30;
   break;
  } else if ((label | 0) == 20) {
   HEAP32[$frm_nxt >> 2] = $$13$lcssa;
   $$1$ph = ($$13$lcssa | 0) != ($frm_end | 0) & 1;
   label = 30;
   break;
  }
 } else if ((label | 0) == 31) {
  $58 = HEAP32[$frm_nxt >> 2] | 0;
  label = 34;
 } while (0);
 if ((label | 0) == 30) $$2 = $$1$ph; else if ((label | 0) == 34) $$2 = ($58 | 0) != ($frm_end | 0) & 1;
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$8 = 0, $$lcssa = 0, $$pre$phiZ2D = 0, $102 = 0, $105 = 0, $126 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $34 = 0, $40 = 0, $49 = 0, $51 = 0, $58 = 0, $67 = 0, $77 = 0, $79 = 0, $81 = 0, $87 = 0, $90 = 0, $96 = 0, $98 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 if (!($mode & 4)) $$pre$phiZ2D = $frm_end; else {
  $2 = HEAP32[$frm_nxt >> 2] | 0;
  $3 = $frm_end;
  if (($3 - $2 | 0) > 2) if ((HEAP8[$2 >> 0] | 0) == -17) if ((HEAP8[$2 + 1 >> 0] | 0) == -69) if ((HEAP8[$2 + 2 >> 0] | 0) == -65) {
   HEAP32[$frm_nxt >> 2] = $2 + 3;
   $$pre$phiZ2D = $3;
  } else $$pre$phiZ2D = $3; else $$pre$phiZ2D = $3; else $$pre$phiZ2D = $3; else $$pre$phiZ2D = $3;
 }
 $16 = $to_end;
 L9 : while (1) {
  $17 = HEAP32[$frm_nxt >> 2] | 0;
  $18 = $17 >>> 0 < $frm_end >>> 0;
  if (!$18) {
   $$lcssa = $18;
   label = 41;
   break;
  }
  $19 = HEAP32[$to_nxt >> 2] | 0;
  if ($19 >>> 0 >= $to_end >>> 0) {
   $$lcssa = $18;
   label = 41;
   break;
  }
  $21 = HEAP8[$17 >> 0] | 0;
  $22 = $21 & 255;
  if ($22 >>> 0 > $Maxcode >>> 0) {
   $$8 = 2;
   break;
  }
  do if ($21 << 24 >> 24 > -1) {
   HEAP16[$19 >> 1] = $21 & 255;
   HEAP32[$frm_nxt >> 2] = $17 + 1;
  } else {
   if (($21 & 255) < 194) {
    $$8 = 2;
    break L9;
   }
   if (($21 & 255) < 224) {
    if (($$pre$phiZ2D - $17 | 0) < 2) {
     $$8 = 1;
     break L9;
    }
    $34 = HEAPU8[$17 + 1 >> 0] | 0;
    if (($34 & 192 | 0) != 128) {
     $$8 = 2;
     break L9;
    }
    $40 = $34 & 63 | $22 << 6 & 1984;
    if ($40 >>> 0 > $Maxcode >>> 0) {
     $$8 = 2;
     break L9;
    }
    HEAP16[$19 >> 1] = $40;
    HEAP32[$frm_nxt >> 2] = $17 + 2;
    break;
   }
   if (($21 & 255) < 240) {
    if (($$pre$phiZ2D - $17 | 0) < 3) {
     $$8 = 1;
     break L9;
    }
    $49 = HEAP8[$17 + 1 >> 0] | 0;
    $51 = HEAP8[$17 + 2 >> 0] | 0;
    switch ($22 | 0) {
    case 224:
     {
      if (($49 & -32) << 24 >> 24 != -96) {
       $$8 = 2;
       break L9;
      }
      break;
     }
    case 237:
     {
      if (($49 & -32) << 24 >> 24 != -128) {
       $$8 = 2;
       break L9;
      }
      break;
     }
    default:
     if (($49 & -64) << 24 >> 24 != -128) {
      $$8 = 2;
      break L9;
     }
    }
    $58 = $51 & 255;
    if (($58 & 192 | 0) != 128) {
     $$8 = 2;
     break L9;
    }
    $67 = ($49 & 255) << 6 & 4032 | $22 << 12 | $58 & 63;
    if (($67 & 65535) >>> 0 > $Maxcode >>> 0) {
     $$8 = 2;
     break L9;
    }
    HEAP16[$19 >> 1] = $67;
    HEAP32[$frm_nxt >> 2] = $17 + 3;
    break;
   }
   if (($21 & 255) >= 245) {
    $$8 = 2;
    break L9;
   }
   if (($$pre$phiZ2D - $17 | 0) < 4) {
    $$8 = 1;
    break L9;
   }
   $77 = HEAP8[$17 + 1 >> 0] | 0;
   $79 = HEAP8[$17 + 2 >> 0] | 0;
   $81 = HEAP8[$17 + 3 >> 0] | 0;
   switch ($22 | 0) {
   case 240:
    {
     if (($77 + 112 & 255) >= 48) {
      $$8 = 2;
      break L9;
     }
     break;
    }
   case 244:
    {
     if (($77 & -16) << 24 >> 24 != -128) {
      $$8 = 2;
      break L9;
     }
     break;
    }
   default:
    if (($77 & -64) << 24 >> 24 != -128) {
     $$8 = 2;
     break L9;
    }
   }
   $87 = $79 & 255;
   if (($87 & 192 | 0) != 128) {
    $$8 = 2;
    break L9;
   }
   $90 = $81 & 255;
   if (($90 & 192 | 0) != 128) {
    $$8 = 2;
    break L9;
   }
   if (($16 - $19 | 0) < 4) {
    $$8 = 1;
    break L9;
   }
   $96 = $22 & 7;
   $98 = $77 & 255;
   $102 = $87 << 6;
   $105 = $90 & 63;
   if (($98 << 12 & 258048 | $96 << 18 | $102 & 4032 | $105) >>> 0 > $Maxcode >>> 0) {
    $$8 = 2;
    break L9;
   }
   HEAP16[$19 >> 1] = $98 << 2 & 60 | $87 >>> 4 & 3 | (($98 >>> 4 & 3 | $96 << 2) << 6) + 16320 | 55296;
   $126 = $19 + 2 | 0;
   HEAP32[$to_nxt >> 2] = $126;
   HEAP16[$126 >> 1] = $105 | $102 & 960 | 56320;
   HEAP32[$frm_nxt >> 2] = (HEAP32[$frm_nxt >> 2] | 0) + 4;
  } while (0);
  HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 2;
 }
 if ((label | 0) == 41) $$8 = $$lcssa & 1;
 return $$8 | 0;
}

function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$i$i = 0, $$0$lcssa$i = 0, $$byval_copy = 0, $0 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $4 = 0, $46 = 0, $49 = 0, $5 = 0, $59 = 0, $62 = 0, $74 = 0, $76 = 0, $79 = 0, $8 = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__nc$2$lcssa = 0, $__neg = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 $$byval_copy = sp + 424 | 0;
 $vararg_buffer = sp;
 $__wbuf = sp + 24 | 0;
 $__wb = sp + 16 | 0;
 $__wn = sp + 12 | 0;
 $__loc = sp + 8 | 0;
 $__neg = sp + 564 | 0;
 $0 = sp + 4 | 0;
 $__nbuf = sp + 464 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 $2 = $__wb + 4 | 0;
 HEAP32[$2 >> 2] = 147;
 $4 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $4;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10384) | 0;
 HEAP8[$__neg >> 0] = 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 $8 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $$byval_copy, $__intl, $__loc, $8, $__err, $__neg, $5, $__wb, $__wn, $__wbuf + 400 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] & 63]($5, 24296, 24306, $$byval_copy) | 0;
  $13 = HEAP32[$__wn >> 2] | 0;
  $14 = HEAP32[$__wb >> 2] | 0;
  $15 = $13 - $14 | 0;
  $17 = $14;
  $18 = $13;
  if (($15 | 0) > 392) {
   $21 = _malloc(($15 >> 2) + 2 | 0) | 0;
   if (!$21) __ZSt17__throw_bad_allocv(); else {
    $31 = $21;
    $__nc$0 = $21;
   }
  } else {
   $31 = 0;
   $__nc$0 = $__nbuf;
  }
  if (!(HEAP8[$__neg >> 0] | 0)) $__nc$1 = $__nc$0; else {
   HEAP8[$__nc$0 >> 0] = 45;
   $__nc$1 = $__nc$0 + 1 | 0;
  }
  $27 = $$byval_copy + 40 | 0;
  $28 = $$byval_copy;
  $30 = $18;
  $__nc$2 = $__nc$1;
  $__w$0 = $17;
  while (1) {
   if ($__w$0 >>> 0 >= $30 >>> 0) {
    $__nc$2$lcssa = $__nc$2;
    break;
   }
   $33 = HEAP32[$__w$0 >> 2] | 0;
   $$0$i = $$byval_copy;
   while (1) {
    if (($$0$i | 0) == ($27 | 0)) {
     $$0$lcssa$i = $27;
     break;
    }
    if ((HEAP32[$$0$i >> 2] | 0) == ($33 | 0)) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $$0$i = $$0$i + 4 | 0;
   }
   HEAP8[$__nc$2 >> 0] = HEAP8[24296 + ($$0$lcssa$i - $28 >> 2) >> 0] | 0;
   $30 = HEAP32[$__wn >> 2] | 0;
   $__nc$2 = $__nc$2 + 1 | 0;
   $__w$0 = $__w$0 + 4 | 0;
  }
  HEAP8[$__nc$2$lcssa >> 0] = 0;
  HEAP32[$vararg_buffer >> 2] = $__v;
  _sscanf($__nbuf, 24292, $vararg_buffer) | 0;
  if ($31) _free($31);
 }
 $46 = HEAP32[$__b >> 2] | 0;
 do if (!$46) $79 = 1; else {
  $49 = HEAP32[$46 + 12 >> 2] | 0;
  if (($49 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 36 >> 2] & 127]($46) | 0; else $$0$i$i$i$i = HEAP32[$49 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $79 = 1;
   break;
  } else {
   $79 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $59 = HEAP32[$__e >> 2] | 0;
 do if (!$59) label = 30; else {
  $62 = HEAP32[$59 + 12 >> 2] | 0;
  if (($62 | 0) == (HEAP32[$59 + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$59 >> 2] | 0) + 36 >> 2] & 127]($59) | 0; else $$0$i$i$1$i$i = HEAP32[$62 >> 2] | 0;
  if (($$0$i$i$1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 30;
   break;
  } else if ($79) break; else {
   label = 32;
   break;
  }
 } while (0);
 if ((label | 0) == 30) if ($79) label = 32;
 if ((label | 0) == 32) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $74 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 $76 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($76) FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 255]($76);
 STACKTOP = sp;
 return $74 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$03 = 0, $$03$lcssa71 = 0, $$05 = 0, $$05$lcssa67 = 0, $$12$ph = 0, $$14 = 0, $$14$lcssa = 0, $$3$ph = 0, $$4 = 0, $13 = 0, $14 = 0, $25 = 0, $26 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $4 = 0, $41 = 0, $45 = 0, $46 = 0, $5 = 0, $54 = 0, $56 = 0, $57 = 0, $64 = 0, $66 = 0, $67 = 0, $8 = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$5$ph = 0, $n$0 = 0, $p$0 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $save_state = sp;
 $tmp = sp + 8 | 0;
 $fend$0 = $frm;
 while (1) {
  if (($fend$0 | 0) == ($frm_end | 0)) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  if (!(HEAP32[$fend$0 >> 2] | 0)) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $fend$0 = $fend$0 + 4 | 0;
 }
 HEAP32[$to_nxt >> 2] = $to;
 HEAP32[$frm_nxt >> 2] = $frm;
 $4 = $to_end;
 $5 = $this + 8 | 0;
 $$03 = $frm;
 $$05 = $to;
 $fend$1 = $fend$0$lcssa;
 L6 : while (1) {
  if (($$05 | 0) == ($to_end | 0) | ($$03 | 0) == ($frm_end | 0)) {
   $64 = $$03;
   label = 35;
   break;
  }
  $8 = $st;
  $13 = HEAP32[$8 + 4 >> 2] | 0;
  $14 = $save_state;
  HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$14 + 4 >> 2] = $13;
  $25 = _uselocale(HEAP32[$5 >> 2] | 0) | 0;
  $26 = _wcsnrtombs($$05, $frm_nxt, $fend$1 - $$03 >> 2, $4 - $$05 | 0, $st) | 0;
  if ($25) _uselocale($25) | 0;
  switch ($26 | 0) {
  case -1:
   {
    $$03$lcssa71 = $$03;
    $$05$lcssa67 = $$05;
    label = 10;
    break L6;
    break;
   }
  case 0:
   {
    $$3$ph = 1;
    label = 32;
    break L6;
    break;
   }
  default:
   {}
  }
  $41 = (HEAP32[$to_nxt >> 2] | 0) + $26 | 0;
  HEAP32[$to_nxt >> 2] = $41;
  if (($41 | 0) == ($to_end | 0)) {
   label = 33;
   break;
  }
  if (($fend$1 | 0) == ($frm_end | 0)) {
   $66 = $41;
   $67 = HEAP32[$frm_nxt >> 2] | 0;
   $fend$5$ph = $frm_end;
  } else {
   $45 = _uselocale(HEAP32[$5 >> 2] | 0) | 0;
   $46 = _wcrtomb($tmp, 0, $st) | 0;
   if ($45) _uselocale($45) | 0;
   if (($46 | 0) == -1) {
    $$12$ph = 2;
    label = 31;
    break;
   }
   if ($46 >>> 0 > ($4 - (HEAP32[$to_nxt >> 2] | 0) | 0) >>> 0) {
    $$12$ph = 1;
    label = 31;
    break;
   } else {
    $n$0 = $46;
    $p$0 = $tmp;
   }
   while (1) {
    if (!$n$0) break;
    $56 = HEAP8[$p$0 >> 0] | 0;
    $57 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $57 + 1;
    HEAP8[$57 >> 0] = $56;
    $n$0 = $n$0 + -1 | 0;
    $p$0 = $p$0 + 1 | 0;
   }
   $54 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0;
   HEAP32[$frm_nxt >> 2] = $54;
   $fend$2 = $54;
   while (1) {
    if (($fend$2 | 0) == ($frm_end | 0)) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    if (!(HEAP32[$fend$2 >> 2] | 0)) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $fend$2 = $fend$2 + 4 | 0;
   }
   $66 = HEAP32[$to_nxt >> 2] | 0;
   $67 = $54;
   $fend$5$ph = $fend$2$lcssa;
  }
  $$03 = $67;
  $$05 = $66;
  $fend$1 = $fend$5$ph;
 }
 if ((label | 0) == 10) {
  HEAP32[$to_nxt >> 2] = $$05$lcssa67;
  $$14 = $$03$lcssa71;
  $33 = $$05$lcssa67;
  while (1) {
   if (($$14 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
    $$14$lcssa = $$14;
    break;
   }
   $30 = HEAP32[$$14 >> 2] | 0;
   $32 = _uselocale(HEAP32[$5 >> 2] | 0) | 0;
   $34 = _wcrtomb($33, $30, $save_state) | 0;
   if ($32) _uselocale($32) | 0;
   if (($34 | 0) == -1) {
    $$14$lcssa = $$14;
    break;
   }
   $38 = (HEAP32[$to_nxt >> 2] | 0) + $34 | 0;
   HEAP32[$to_nxt >> 2] = $38;
   $$14 = $$14 + 4 | 0;
   $33 = $38;
  }
  HEAP32[$frm_nxt >> 2] = $$14$lcssa;
  $$3$ph = 2;
  label = 32;
 } else if ((label | 0) == 31) {
  $$3$ph = $$12$ph;
  label = 32;
 } else if ((label | 0) == 33) {
  $64 = HEAP32[$frm_nxt >> 2] | 0;
  label = 35;
 }
 if ((label | 0) == 32) $$4 = $$3$ph; else if ((label | 0) == 35) $$4 = ($64 | 0) != ($frm_end | 0) & 1;
 STACKTOP = sp;
 return $$4 | 0;
}

function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$4 = 0, $$pre11 = 0, $10 = 0, $101 = 0, $106 = 0, $109 = 0, $11 = 0, $121 = 0, $126 = 0, $129 = 0, $13 = 0, $14 = 0, $17 = 0, $24 = 0, $35 = 0, $38 = 0, $50 = 0, $55 = 0, $6 = 0, $61 = 0, $63 = 0, $69 = 0, $79 = 0, $8 = 0, $83 = 0, $92 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $$pre11 = $to_end;
 if (!($mode & 2)) label = 4; else if (($$pre11 - $to | 0) < 3) $$4 = 1; else {
  HEAP32[$to_nxt >> 2] = $to + 1;
  HEAP8[$to >> 0] = -17;
  $6 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $6 + 1;
  HEAP8[$6 >> 0] = -69;
  $8 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $8 + 1;
  HEAP8[$8 >> 0] = -65;
  label = 4;
 }
 L4 : do if ((label | 0) == 4) {
  $10 = $frm_end;
  $11 = HEAP32[$frm_nxt >> 2] | 0;
  while (1) {
   if ($11 >>> 0 >= $frm_end >>> 0) {
    $$4 = 0;
    break L4;
   }
   $13 = HEAP16[$11 >> 1] | 0;
   $14 = $13 & 65535;
   if ($14 >>> 0 > $Maxcode >>> 0) {
    $$4 = 2;
    break L4;
   }
   do if (($13 & 65535) < 128) {
    $17 = HEAP32[$to_nxt >> 2] | 0;
    if (($$pre11 - $17 | 0) < 1) {
     $$4 = 1;
     break L4;
    }
    HEAP32[$to_nxt >> 2] = $17 + 1;
    HEAP8[$17 >> 0] = $13;
   } else {
    if (($13 & 65535) < 2048) {
     $24 = HEAP32[$to_nxt >> 2] | 0;
     if (($$pre11 - $24 | 0) < 2) {
      $$4 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $24 + 1;
     HEAP8[$24 >> 0] = $14 >>> 6 | 192;
     $35 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $35 + 1;
     HEAP8[$35 >> 0] = $14 & 63 | 128;
     break;
    }
    if (($13 & 65535) < 55296) {
     $38 = HEAP32[$to_nxt >> 2] | 0;
     if (($$pre11 - $38 | 0) < 3) {
      $$4 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $38 + 1;
     HEAP8[$38 >> 0] = $14 >>> 12 | 224;
     $50 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $50 + 1;
     HEAP8[$50 >> 0] = $14 >>> 6 & 63 | 128;
     $55 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $55 + 1;
     HEAP8[$55 >> 0] = $14 & 63 | 128;
     break;
    }
    if (($13 & 65535) >= 56320) {
     if (($13 & 65535) < 57344) {
      $$4 = 2;
      break L4;
     }
     $109 = HEAP32[$to_nxt >> 2] | 0;
     if (($$pre11 - $109 | 0) < 3) {
      $$4 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $109 + 1;
     HEAP8[$109 >> 0] = $14 >>> 12 | 224;
     $121 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $121 + 1;
     HEAP8[$121 >> 0] = $14 >>> 6 & 63 | 128;
     $126 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $126 + 1;
     HEAP8[$126 >> 0] = $14 & 63 | 128;
     break;
    }
    if (($10 - $11 | 0) < 4) {
     $$4 = 1;
     break L4;
    }
    $61 = $11 + 2 | 0;
    $63 = HEAPU16[$61 >> 1] | 0;
    if (($63 & 64512 | 0) != 56320) {
     $$4 = 2;
     break L4;
    }
    if (($$pre11 - (HEAP32[$to_nxt >> 2] | 0) | 0) < 4) {
     $$4 = 1;
     break L4;
    }
    $69 = $14 & 960;
    if ((($69 << 10) + 65536 | $14 << 10 & 64512 | $63 & 1023) >>> 0 > $Maxcode >>> 0) {
     $$4 = 2;
     break L4;
    }
    HEAP32[$frm_nxt >> 2] = $61;
    $79 = ($69 >>> 6) + 1 | 0;
    $83 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $83 + 1;
    HEAP8[$83 >> 0] = $79 >>> 2 | 240;
    $92 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $92 + 1;
    HEAP8[$92 >> 0] = $14 >>> 2 & 15 | $79 << 4 & 48 | 128;
    $101 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $101 + 1;
    HEAP8[$101 >> 0] = $14 << 4 & 48 | $63 >>> 6 & 15 | 128;
    $106 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $106 + 1;
    HEAP8[$106 >> 0] = $63 & 63 | 128;
   } while (0);
   $129 = (HEAP32[$frm_nxt >> 2] | 0) + 2 | 0;
   HEAP32[$frm_nxt >> 2] = $129;
   $11 = $129;
  }
 } while (0);
 return $$4 | 0;
}

function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$byval_copy = 0, $0 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $4 = 0, $44 = 0, $5 = 0, $56 = 0, $57 = 0, $58 = 0, $72 = 0, $74 = 0, $8 = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__nc$2$lcssa = 0, $__neg = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $$byval_copy = sp + 24 | 0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140 | 0;
 $__wb = sp + 16 | 0;
 $__wn = sp + 12 | 0;
 $__loc = sp + 8 | 0;
 $__neg = sp + 136 | 0;
 $0 = sp + 4 | 0;
 $__nbuf = sp + 36 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 $2 = $__wb + 4 | 0;
 HEAP32[$2 >> 2] = 147;
 $4 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $4;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10392) | 0;
 HEAP8[$__neg >> 0] = 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 $8 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $$byval_copy, $__intl, $__loc, $8, $__err, $__neg, $5, $__wb, $__wn, $__wbuf + 100 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2] & 63]($5, 24281, 24291, $$byval_copy) | 0;
  $13 = HEAP32[$__wn >> 2] | 0;
  $14 = HEAP32[$__wb >> 2] | 0;
  $15 = $13 - $14 | 0;
  $17 = $14;
  $18 = $13;
  if (($15 | 0) > 98) {
   $20 = _malloc($15 + 2 | 0) | 0;
   if (!$20) __ZSt17__throw_bad_allocv(); else {
    $30 = $20;
    $__nc$0 = $20;
   }
  } else {
   $30 = 0;
   $__nc$0 = $__nbuf;
  }
  if (!(HEAP8[$__neg >> 0] | 0)) $__nc$1 = $__nc$0; else {
   HEAP8[$__nc$0 >> 0] = 45;
   $__nc$1 = $__nc$0 + 1 | 0;
  }
  $26 = $$byval_copy + 10 | 0;
  $27 = $$byval_copy;
  $29 = $18;
  $__nc$2 = $__nc$1;
  $__w$0 = $17;
  while (1) {
   if ($__w$0 >>> 0 >= $29 >>> 0) {
    $__nc$2$lcssa = $__nc$2;
    break;
   }
   $32 = HEAP8[$__w$0 >> 0] | 0;
   $$0$i = $$byval_copy;
   while (1) {
    if (($$0$i | 0) == ($26 | 0)) {
     $$0$lcssa$i = $26;
     break;
    }
    if ((HEAP8[$$0$i >> 0] | 0) == $32 << 24 >> 24) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $$0$i = $$0$i + 1 | 0;
   }
   HEAP8[$__nc$2 >> 0] = HEAP8[24281 + ($$0$lcssa$i - $27) >> 0] | 0;
   $29 = HEAP32[$__wn >> 2] | 0;
   $__nc$2 = $__nc$2 + 1 | 0;
   $__w$0 = $__w$0 + 1 | 0;
  }
  HEAP8[$__nc$2$lcssa >> 0] = 0;
  HEAP32[$vararg_buffer >> 2] = $__v;
  _sscanf($__nbuf, 24292, $vararg_buffer) | 0;
  if ($30) _free($30);
 }
 $44 = HEAP32[$__b >> 2] | 0;
 do if (!$44) $56 = 0; else if ((HEAP32[$44 + 12 >> 2] | 0) == (HEAP32[$44 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $56 = 0;
  break;
 } else {
  $56 = HEAP32[$__b >> 2] | 0;
  break;
 } else $56 = $44; while (0);
 $57 = ($56 | 0) == 0;
 $58 = HEAP32[$__e >> 2] | 0;
 do if (!$58) label = 27; else {
  if ((HEAP32[$58 + 12 >> 2] | 0) == (HEAP32[$58 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$58 >> 2] | 0) + 36 >> 2] & 127]($58) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 27;
   break;
  }
  if (!$57) label = 28;
 } while (0);
 if ((label | 0) == 27) if ($57) label = 28;
 if ((label | 0) == 28) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $72 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 $74 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($74) FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 255]($74);
 STACKTOP = sp;
 return $72 | 0;
}

function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$9 = 0, $$lcssa = 0, $$pre$phiZ2D = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $32 = 0, $38 = 0, $46 = 0, $48 = 0, $55 = 0, $65 = 0, $73 = 0, $75 = 0, $77 = 0, $83 = 0, $86 = 0, $99 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 if (!($mode & 4)) $$pre$phiZ2D = $frm_end; else {
  $2 = HEAP32[$frm_nxt >> 2] | 0;
  $3 = $frm_end;
  if (($3 - $2 | 0) > 2) if ((HEAP8[$2 >> 0] | 0) == -17) if ((HEAP8[$2 + 1 >> 0] | 0) == -69) if ((HEAP8[$2 + 2 >> 0] | 0) == -65) {
   HEAP32[$frm_nxt >> 2] = $2 + 3;
   $$pre$phiZ2D = $3;
  } else $$pre$phiZ2D = $3; else $$pre$phiZ2D = $3; else $$pre$phiZ2D = $3; else $$pre$phiZ2D = $3;
 }
 L9 : while (1) {
  $16 = HEAP32[$frm_nxt >> 2] | 0;
  $17 = $16 >>> 0 < $frm_end >>> 0;
  if (!$17) {
   $$lcssa = $17;
   label = 40;
   break;
  }
  $18 = HEAP32[$to_nxt >> 2] | 0;
  if ($18 >>> 0 >= $to_end >>> 0) {
   $$lcssa = $17;
   label = 40;
   break;
  }
  $20 = HEAP8[$16 >> 0] | 0;
  $21 = $20 & 255;
  do if ($20 << 24 >> 24 > -1) {
   if ($21 >>> 0 > $Maxcode >>> 0) {
    $$9 = 2;
    break L9;
   }
   HEAP32[$18 >> 2] = $21;
   HEAP32[$frm_nxt >> 2] = $16 + 1;
  } else {
   if (($20 & 255) < 194) {
    $$9 = 2;
    break L9;
   }
   if (($20 & 255) < 224) {
    if (($$pre$phiZ2D - $16 | 0) < 2) {
     $$9 = 1;
     break L9;
    }
    $32 = HEAPU8[$16 + 1 >> 0] | 0;
    if (($32 & 192 | 0) != 128) {
     $$9 = 2;
     break L9;
    }
    $38 = $32 & 63 | $21 << 6 & 1984;
    if ($38 >>> 0 > $Maxcode >>> 0) {
     $$9 = 2;
     break L9;
    }
    HEAP32[$18 >> 2] = $38;
    HEAP32[$frm_nxt >> 2] = $16 + 2;
    break;
   }
   if (($20 & 255) < 240) {
    if (($$pre$phiZ2D - $16 | 0) < 3) {
     $$9 = 1;
     break L9;
    }
    $46 = HEAP8[$16 + 1 >> 0] | 0;
    $48 = HEAP8[$16 + 2 >> 0] | 0;
    switch ($21 | 0) {
    case 224:
     {
      if (($46 & -32) << 24 >> 24 != -96) {
       $$9 = 2;
       break L9;
      }
      break;
     }
    case 237:
     {
      if (($46 & -32) << 24 >> 24 != -128) {
       $$9 = 2;
       break L9;
      }
      break;
     }
    default:
     if (($46 & -64) << 24 >> 24 != -128) {
      $$9 = 2;
      break L9;
     }
    }
    $55 = $48 & 255;
    if (($55 & 192 | 0) != 128) {
     $$9 = 2;
     break L9;
    }
    $65 = ($46 & 255) << 6 & 4032 | $21 << 12 & 61440 | $55 & 63;
    if ($65 >>> 0 > $Maxcode >>> 0) {
     $$9 = 2;
     break L9;
    }
    HEAP32[$18 >> 2] = $65;
    HEAP32[$frm_nxt >> 2] = $16 + 3;
    break;
   }
   if (($20 & 255) >= 245) {
    $$9 = 2;
    break L9;
   }
   if (($$pre$phiZ2D - $16 | 0) < 4) {
    $$9 = 1;
    break L9;
   }
   $73 = HEAP8[$16 + 1 >> 0] | 0;
   $75 = HEAP8[$16 + 2 >> 0] | 0;
   $77 = HEAP8[$16 + 3 >> 0] | 0;
   switch ($21 | 0) {
   case 240:
    {
     if (($73 + 112 & 255) >= 48) {
      $$9 = 2;
      break L9;
     }
     break;
    }
   case 244:
    {
     if (($73 & -16) << 24 >> 24 != -128) {
      $$9 = 2;
      break L9;
     }
     break;
    }
   default:
    if (($73 & -64) << 24 >> 24 != -128) {
     $$9 = 2;
     break L9;
    }
   }
   $83 = $75 & 255;
   if (($83 & 192 | 0) != 128) {
    $$9 = 2;
    break L9;
   }
   $86 = $77 & 255;
   if (($86 & 192 | 0) != 128) {
    $$9 = 2;
    break L9;
   }
   $99 = ($73 & 255) << 12 & 258048 | $21 << 18 & 1835008 | $83 << 6 & 4032 | $86 & 63;
   if ($99 >>> 0 > $Maxcode >>> 0) {
    $$9 = 2;
    break L9;
   }
   HEAP32[$18 >> 2] = $99;
   HEAP32[$frm_nxt >> 2] = $16 + 4;
  } while (0);
  HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 4;
 }
 if ((label | 0) == 40) $$9 = $$lcssa & 1;
 return $$9 | 0;
}

function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$2 = 0, $14 = 0, $19 = 0, $22 = 0, $3 = 0, $33 = 0, $38 = 0, $40 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $62 = 0, $65 = 0, $73 = 0, $82 = 0, $87 = 0, $89 = 0;
 L1 : do if ($__ct << 24 >> 24 == $__decimal_point << 24 >> 24) if (!(HEAP8[$__in_units >> 0] | 0)) $$2 = -1; else {
  HEAP8[$__in_units >> 0] = 0;
  $3 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $3 + 1;
  HEAP8[$3 >> 0] = 46;
  $5 = HEAP8[$__grouping >> 0] | 0;
  if (!((($5 & 1) == 0 ? ($5 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $$2 = 0; else {
   $14 = HEAP32[$__g_end >> 2] | 0;
   if (($14 - $__g | 0) < 160) {
    $19 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $14 + 4;
    HEAP32[$14 >> 2] = $19;
    $$2 = 0;
   } else $$2 = 0;
  }
 } else {
  if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24) {
   $22 = HEAP8[$__grouping >> 0] | 0;
   if ((($22 & 1) == 0 ? ($22 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) {
    if (!(HEAP8[$__in_units >> 0] | 0)) {
     $$2 = -1;
     break;
    }
    $33 = HEAP32[$__g_end >> 2] | 0;
    if (($33 - $__g | 0) >= 160) {
     $$2 = 0;
     break;
    }
    $38 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $33 + 4;
    HEAP32[$33 >> 2] = $38;
    HEAP32[$__dc >> 2] = 0;
    $$2 = 0;
    break;
   }
  }
  $40 = $__atoms + 32 | 0;
  $$0$i = $__atoms;
  while (1) {
   if (($$0$i | 0) == ($40 | 0)) {
    $$0$lcssa$i = $40;
    break;
   }
   if ((HEAP8[$$0$i >> 0] | 0) == $__ct << 24 >> 24) {
    $$0$lcssa$i = $$0$i;
    break;
   }
   $$0$i = $$0$i + 1 | 0;
  }
  $47 = $$0$lcssa$i - $__atoms | 0;
  if (($47 | 0) > 31) $$2 = -1; else {
   $50 = HEAP8[22824 + $47 >> 0] | 0;
   switch ($47 | 0) {
   case 24:
   case 25:
    {
     $51 = HEAP32[$__a_end >> 2] | 0;
     if (($51 | 0) != ($__a | 0)) if ((HEAPU8[$51 + -1 >> 0] & 95 | 0) != (HEAPU8[$__exp >> 0] & 127 | 0)) {
      $$2 = -1;
      break L1;
     }
     HEAP32[$__a_end >> 2] = $51 + 1;
     HEAP8[$51 >> 0] = $50;
     $$2 = 0;
     break L1;
     break;
    }
   case 23:
   case 22:
    {
     HEAP8[$__exp >> 0] = 80;
     $62 = HEAP32[$__a_end >> 2] | 0;
     HEAP32[$__a_end >> 2] = $62 + 1;
     HEAP8[$62 >> 0] = $50;
     $$2 = 0;
     break L1;
     break;
    }
   default:
    {
     $65 = $50 & 95;
     if (($65 | 0) == (HEAP8[$__exp >> 0] | 0)) {
      HEAP8[$__exp >> 0] = $65 | 128;
      if (HEAP8[$__in_units >> 0] | 0) {
       HEAP8[$__in_units >> 0] = 0;
       $73 = HEAP8[$__grouping >> 0] | 0;
       if ((($73 & 1) == 0 ? ($73 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) {
        $82 = HEAP32[$__g_end >> 2] | 0;
        if (($82 - $__g | 0) < 160) {
         $87 = HEAP32[$__dc >> 2] | 0;
         HEAP32[$__g_end >> 2] = $82 + 4;
         HEAP32[$82 >> 2] = $87;
        }
       }
      }
     }
     $89 = HEAP32[$__a_end >> 2] | 0;
     HEAP32[$__a_end >> 2] = $89 + 1;
     HEAP8[$89 >> 0] = $50;
     if (($47 | 0) > 21) {
      $$2 = 0;
      break L1;
     }
     HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
     $$2 = 0;
     break L1;
    }
   }
  }
 } while (0);
 return $$2 | 0;
}

function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$1$i$i = 0, $$0$i$i$i$i = 0, $$byval_copy = 0, $0 = 0, $10 = 0, $2 = 0, $26 = 0, $28 = 0, $29 = 0, $34 = 0, $37 = 0, $4 = 0, $49 = 0, $5 = 0, $6 = 0, $62 = 0, $63 = 0, $66 = 0, $8 = 0, $__loc = 0, $__neg = 0, $__w$0 = 0, $__w$0$lcssa = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 $$byval_copy = sp + 424 | 0;
 $__wbuf = sp + 24 | 0;
 $__wb = sp + 16 | 0;
 $__wn = sp + 8 | 0;
 $__loc = sp + 4 | 0;
 $__neg = sp + 428 | 0;
 $0 = sp;
 HEAP32[$__wb >> 2] = $__wbuf;
 $2 = $__wb + 4 | 0;
 HEAP32[$2 >> 2] = 147;
 $4 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $4;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10384) | 0;
 HEAP8[$__neg >> 0] = 0;
 $6 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $6;
 $8 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $10 = $6;
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $$byval_copy, $__intl, $__loc, $8, $__err, $__neg, $5, $__wb, $__wn, $__wbuf + 400 | 0) | 0) {
  if (!(HEAP8[$__v >> 0] & 1)) HEAP8[$__v >> 0] = 0; else HEAP32[HEAP32[$__v + 8 >> 2] >> 2] = 0;
  HEAP32[$__v + 4 >> 2] = 0;
  if (HEAP8[$__neg >> 0] | 0) __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$5 >> 2] | 0) + 44 >> 2] & 63]($5, 45) | 0);
  $26 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$5 >> 2] | 0) + 44 >> 2] & 63]($5, 48) | 0;
  $28 = HEAP32[$__wn >> 2] | 0;
  $29 = $28 + -4 | 0;
  $__w$0 = HEAP32[$__wb >> 2] | 0;
  while (1) {
   if ($__w$0 >>> 0 >= $29 >>> 0) {
    $__w$0$lcssa = $__w$0;
    break;
   }
   if ((HEAP32[$__w$0 >> 2] | 0) != ($26 | 0)) {
    $__w$0$lcssa = $__w$0;
    break;
   }
   $__w$0 = $__w$0 + 4 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v, $__w$0$lcssa, $28) | 0;
 }
 $34 = HEAP32[$__b >> 2] | 0;
 do if (!$34) $66 = 1; else {
  $37 = HEAP32[$34 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; else $$0$i$i$i$i = HEAP32[$37 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $66 = 1;
   break;
  } else {
   $66 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$6) label = 25; else {
  $49 = HEAP32[$10 + 12 >> 2] | 0;
  if (($49 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] & 127]($10) | 0; else $$0$i$i$1$i$i = HEAP32[$49 >> 2] | 0;
  if (($$0$i$i$1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 25;
   break;
  } else if ($66) break; else {
   label = 27;
   break;
  }
 } while (0);
 if ((label | 0) == 25) if ($66) label = 27;
 if ((label | 0) == 27) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $62 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($4) | 0;
 $63 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($63) FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 255]($63);
 STACKTOP = sp;
 return $62 | 0;
}

function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$2 = 0, $14 = 0, $19 = 0, $22 = 0, $3 = 0, $33 = 0, $38 = 0, $40 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $52 = 0, $64 = 0, $72 = 0, $81 = 0, $86 = 0, $88 = 0;
 L1 : do if (($__ct | 0) == ($__decimal_point | 0)) if (!(HEAP8[$__in_units >> 0] | 0)) $$2 = -1; else {
  HEAP8[$__in_units >> 0] = 0;
  $3 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $3 + 1;
  HEAP8[$3 >> 0] = 46;
  $5 = HEAP8[$__grouping >> 0] | 0;
  if (!((($5 & 1) == 0 ? ($5 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $$2 = 0; else {
   $14 = HEAP32[$__g_end >> 2] | 0;
   if (($14 - $__g | 0) < 160) {
    $19 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $14 + 4;
    HEAP32[$14 >> 2] = $19;
    $$2 = 0;
   } else $$2 = 0;
  }
 } else {
  if (($__ct | 0) == ($__thousands_sep | 0)) {
   $22 = HEAP8[$__grouping >> 0] | 0;
   if ((($22 & 1) == 0 ? ($22 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) {
    if (!(HEAP8[$__in_units >> 0] | 0)) {
     $$2 = -1;
     break;
    }
    $33 = HEAP32[$__g_end >> 2] | 0;
    if (($33 - $__g | 0) >= 160) {
     $$2 = 0;
     break;
    }
    $38 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $33 + 4;
    HEAP32[$33 >> 2] = $38;
    HEAP32[$__dc >> 2] = 0;
    $$2 = 0;
    break;
   }
  }
  $40 = $__atoms + 128 | 0;
  $$0$i = $__atoms;
  while (1) {
   if (($$0$i | 0) == ($40 | 0)) {
    $$0$lcssa$i = $40;
    break;
   }
   if ((HEAP32[$$0$i >> 2] | 0) == ($__ct | 0)) {
    $$0$lcssa$i = $$0$i;
    break;
   }
   $$0$i = $$0$i + 4 | 0;
  }
  $47 = $$0$lcssa$i - $__atoms | 0;
  $48 = $47 >> 2;
  if (($47 | 0) > 124) $$2 = -1; else {
   $51 = HEAP8[22824 + $48 >> 0] | 0;
   switch ($48 | 0) {
   case 24:
   case 25:
    {
     $52 = HEAP32[$__a_end >> 2] | 0;
     if (($52 | 0) != ($__a | 0)) if ((HEAPU8[$52 + -1 >> 0] & 95 | 0) != (HEAPU8[$__exp >> 0] & 127 | 0)) {
      $$2 = -1;
      break L1;
     }
     HEAP32[$__a_end >> 2] = $52 + 1;
     HEAP8[$52 >> 0] = $51;
     $$2 = 0;
     break L1;
     break;
    }
   case 23:
   case 22:
    {
     HEAP8[$__exp >> 0] = 80;
     break;
    }
   default:
    {
     $64 = $51 & 95;
     if (($64 | 0) == (HEAP8[$__exp >> 0] | 0)) {
      HEAP8[$__exp >> 0] = $64 | 128;
      if (HEAP8[$__in_units >> 0] | 0) {
       HEAP8[$__in_units >> 0] = 0;
       $72 = HEAP8[$__grouping >> 0] | 0;
       if ((($72 & 1) == 0 ? ($72 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) {
        $81 = HEAP32[$__g_end >> 2] | 0;
        if (($81 - $__g | 0) < 160) {
         $86 = HEAP32[$__dc >> 2] | 0;
         HEAP32[$__g_end >> 2] = $81 + 4;
         HEAP32[$81 >> 2] = $86;
        }
       }
      }
     }
    }
   }
   $88 = HEAP32[$__a_end >> 2] | 0;
   HEAP32[$__a_end >> 2] = $88 + 1;
   HEAP8[$88 >> 0] = $51;
   if (($47 | 0) > 84) $$2 = 0; else {
    HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
    $$2 = 0;
   }
  }
 } while (0);
 return $$2 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$7 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$1 = 0, $$pre = 0, $$pre$i$3$i$i$915 = 0, $0 = 0, $13 = 0, $16 = 0, $28 = 0, $3 = 0, $30 = 0, $46 = 0, $47 = 0, $48 = 0, $58 = 0, $59 = 0, $71 = 0, $83 = 0, $84 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $83 = 1; else {
  $3 = HEAP32[$0 + 12 >> 2] | 0;
  if (($3 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0; else $$0$i$i$i$i = HEAP32[$3 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $83 = 1;
   break;
  } else {
   $83 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $13 = HEAP32[$__e >> 2] | 0;
 do if (!$13) label = 14; else {
  $16 = HEAP32[$13 + 12 >> 2] | 0;
  if (($16 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 127]($13) | 0; else $$0$i$i$1$i$i = HEAP32[$16 >> 2] | 0;
  if (($$0$i$i$1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 14;
   break;
  } else if ($83) {
   $$pre$i$3$i$i$915 = $13;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($83) label = 16; else {
  $$pre$i$3$i$i$915 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; else if ((label | 0) == 17) {
  $28 = HEAP32[$__b >> 2] | 0;
  $30 = HEAP32[$28 + 12 >> 2] | 0;
  if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 127]($28) | 0; else $$0$i$i = HEAP32[$30 >> 2] | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 127]($__ct, $$0$i$i, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   break;
  }
  $46 = HEAP32[$__b >> 2] | 0;
  $47 = $46 + 12 | 0;
  $48 = HEAP32[$47 >> 2] | 0;
  if (($48 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 40 >> 2] & 127]($46) | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   if (!$$pre) $84 = 1; else {
    $58 = $$pre;
    label = 25;
   }
  } else {
   HEAP32[$47 >> 2] = $48 + 4;
   $58 = $46;
   label = 25;
  }
  do if ((label | 0) == 25) {
   $59 = HEAP32[$58 + 12 >> 2] | 0;
   if (($59 | 0) == (HEAP32[$58 + 16 >> 2] | 0)) $$0$i$i$i$i$1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$58 >> 2] | 0) + 36 >> 2] & 127]($58) | 0; else $$0$i$i$i$i$1 = HEAP32[$59 >> 2] | 0;
   if (($$0$i$i$i$i$1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $84 = 1;
    break;
   } else {
    $84 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!$$pre$i$3$i$i$915) label = 37; else {
   $71 = HEAP32[$$pre$i$3$i$i$915 + 12 >> 2] | 0;
   if (($71 | 0) == (HEAP32[$$pre$i$3$i$i$915 + 16 >> 2] | 0)) $$0$i$i$1$i$i$7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$3$i$i$915 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$3$i$i$915) | 0; else $$0$i$i$1$i$i$7 = HEAP32[$71 >> 2] | 0;
   if (($$0$i$i$1$i$i$7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 37;
    break;
   } else if ($84) break L22; else break;
  } while (0);
  if ((label | 0) == 37) if (!$84) break;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 } while (0);
 return;
}

function __ZN4Gear9SolveNextEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $15 = 0, $17 = 0.0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $31 = 0.0, $33 = 0.0, $34 = 0.0, $36 = 0.0, $38 = 0.0, $4 = 0, $41 = 0.0, $43 = 0.0, $45 = 0.0, $47 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $53 = 0.0, $55 = 0, $56 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $isIterationFailed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $isIterationFailed = sp + 8 | 0;
 $0 = sp;
 HEAP8[$isIterationFailed >> 0] = 0;
 __ZN4Gear9PredictorEv($this);
 $1 = $this + 160 | 0;
 $2 = $this + 144 | 0;
 $3 = $this + 88 | 0;
 $4 = $this + 168 | 0;
 $5 = $this + 136 | 0;
 $6 = $this + 96 | 0;
 $7 = $this + 40 | 0;
 $8 = $this + 48 | 0;
 $9 = $this + 56 | 0;
 $10 = $this + 64 | 0;
 $11 = $this + 80 | 0;
 $12 = $this + 128 | 0;
 $13 = +HEAPF64[69];
 __ZN4Gear9CorrectorERb($this, $isIterationFailed);
 $15 = (HEAP8[$isIterationFailed >> 0] | 0) == 0;
 L1 : do if (!$15) {
  $63 = $15;
  while (1) {
   HEAP32[$12 >> 2] = 0;
   $17 = +HEAPF64[$6 >> 3] * .5;
   HEAPF64[$6 >> 3] = $17;
   if ($17 < $13) {
    label = 4;
    break;
   }
   if ($17 < +HEAPF64[$8 >> 3]) {
    label = 4;
    break;
   }
   $23 = __ZN14NordsieckState7RescaleERK6Matrixd(HEAP32[$11 >> 2] | 0, .5) | 0;
   $24 = HEAP32[$11 >> 2] | 0;
   if (!$24) HEAP32[$11 >> 2] = $23; else {
    __ZN6MatrixD2Ev($24);
    __ZdlPv($24);
    HEAP32[$11 >> 2] = $23;
    if ($63) {
     label = 15;
     break;
    }
   }
   __ZN4Gear9CorrectorERb($this, $isIterationFailed);
   $63 = (HEAP8[$isIterationFailed >> 0] | 0) == 0;
   if ($63) break L1;
  }
  if ((label | 0) == 4) {
   $21 = ___cxa_allocate_exception(4) | 0;
   HEAP32[$21 >> 2] = 15048;
   ___cxa_throw($21 | 0, 888, 0);
  } else if ((label | 0) == 15) {
   $60 = +HEAPF64[$4 >> 3];
   $61 = HEAP32[$1 >> 2] | 0;
   __ZN6VectorC2ERKS_($0, $61);
   __ZN6VectorC2ERKS_($agg$result, $0);
   $62 = $agg$result + 8 | 0;
   HEAPF64[$62 >> 3] = $60;
   __ZN6VectorD2Ev($0);
   STACKTOP = sp;
   return;
  }
 } while (0);
 __ZN6VectoraSERKS_(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
 $28 = +HEAPF64[$3 >> 3];
 HEAPF64[$4 >> 3] = $28;
 $29 = +HEAPF64[$5 >> 3];
 $31 = $29 > .2 ? $29 : .2;
 $33 = $31 < 1.1 ? $31 : 1.1;
 $34 = +HEAPF64[$6 >> 3];
 HEAPF64[$3 >> 3] = $28 + $34;
 $36 = +HEAPF64[$7 >> 3];
 if ($36 < 1797693134862315708145274.0e284) {
  $38 = $36 / $34;
  $45 = $38 < $33 ? $38 : $33;
 } else $45 = $33;
 $41 = +HEAPF64[$8 >> 3];
 if ($41 > 0.0) {
  $43 = $41 / $34;
  $49 = $45 < $43 ? $43 : $45;
 } else $49 = $45;
 $47 = +HEAPF64[$9 >> 3];
 $50 = $47 < $49 ? $47 : $49;
 $51 = +HEAPF64[$10 >> 3];
 $53 = $50 < $51 ? $51 : $50;
 HEAPF64[$6 >> 3] = $34 * $53;
 $55 = HEAP32[$11 >> 2] | 0;
 $56 = __ZN14NordsieckState7RescaleERK6Matrixd($55, $53) | 0;
 HEAP32[$11 >> 2] = $56;
 if (!$55) {
  $60 = +HEAPF64[$4 >> 3];
  $61 = HEAP32[$1 >> 2] | 0;
  __ZN6VectorC2ERKS_($0, $61);
  __ZN6VectorC2ERKS_($agg$result, $0);
  $62 = $agg$result + 8 | 0;
  HEAPF64[$62 >> 3] = $60;
  __ZN6VectorD2Ev($0);
  STACKTOP = sp;
  return;
 }
 __ZN6MatrixD2Ev($55);
 __ZdlPv($55);
 $60 = +HEAPF64[$4 >> 3];
 $61 = HEAP32[$1 >> 2] | 0;
 __ZN6VectorC2ERKS_($0, $61);
 __ZN6VectorC2ERKS_($agg$result, $0);
 $62 = $agg$result + 8 | 0;
 HEAPF64[$62 >> 3] = $60;
 __ZN6VectorD2Ev($0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $10 = 0, $2 = 0, $27 = 0, $29 = 0, $30 = 0, $35 = 0, $4 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $63 = 0, $64 = 0, $8 = 0, $__loc = 0, $__neg = 0, $__w$0 = 0, $__w$0$lcssa = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $$byval_copy = sp + 24 | 0;
 $__wbuf = sp + 32 | 0;
 $__wb = sp + 16 | 0;
 $__wn = sp + 8 | 0;
 $__loc = sp + 4 | 0;
 $__neg = sp + 28 | 0;
 $0 = sp;
 HEAP32[$__wb >> 2] = $__wbuf;
 $2 = $__wb + 4 | 0;
 HEAP32[$2 >> 2] = 147;
 $4 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $4;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10392) | 0;
 HEAP8[$__neg >> 0] = 0;
 $6 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $6;
 $8 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $10 = $6;
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $$byval_copy, $__intl, $__loc, $8, $__err, $__neg, $5, $__wb, $__wn, $__wbuf + 100 | 0) | 0) {
  if (!(HEAP8[$__v >> 0] & 1)) {
   HEAP8[$__v + 1 >> 0] = 0;
   HEAP8[$__v >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__v + 8 >> 2] >> 0] = 0;
   HEAP32[$__v + 4 >> 2] = 0;
  }
  if (HEAP8[$__neg >> 0] | 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 63]($5, 45) | 0);
  $27 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 63]($5, 48) | 0;
  $29 = HEAP32[$__wn >> 2] | 0;
  $30 = $29 + -1 | 0;
  $__w$0 = HEAP32[$__wb >> 2] | 0;
  while (1) {
   if ($__w$0 >>> 0 >= $30 >>> 0) {
    $__w$0$lcssa = $__w$0;
    break;
   }
   if ((HEAP8[$__w$0 >> 0] | 0) != $27 << 24 >> 24) {
    $__w$0$lcssa = $__w$0;
    break;
   }
   $__w$0 = $__w$0 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v, $__w$0$lcssa, $29) | 0;
 }
 $35 = HEAP32[$__b >> 2] | 0;
 do if (!$35) $47 = 0; else if ((HEAP32[$35 + 12 >> 2] | 0) == (HEAP32[$35 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 127]($35) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $47 = 0;
  break;
 } else {
  $47 = HEAP32[$__b >> 2] | 0;
  break;
 } else $47 = $35; while (0);
 $48 = ($47 | 0) == 0;
 do if (!$6) label = 22; else {
  if ((HEAP32[$10 + 12 >> 2] | 0) == (HEAP32[$10 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] & 127]($10) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 22;
   break;
  }
  if (!$48) label = 23;
 } while (0);
 if ((label | 0) == 22) if ($48) label = 23;
 if ((label | 0) == 23) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $63 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($4) | 0;
 $64 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($64) FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 255]($64);
 STACKTOP = sp;
 return $63 | 0;
}

function __ZNSt3__110__stdinbufIcE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$10 = 0, $$11 = 0, $$9 = 0, $0 = 0, $12 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $4 = 0, $44 = 0, $57 = 0, $6 = 0, $61 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$0 = 0, $__i6$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$0$lcssa51 = 0, $__nread$053 = 0, $__nread$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__enxt = sp + 4 | 0;
 $__inxt = sp;
 $0 = $this + 52 | 0;
 if (!(HEAP8[$0 >> 0] | 0)) {
  $6 = HEAP32[$this + 44 >> 2] | 0;
  $8 = ($6 | 0) > 1 ? $6 : 1;
  $9 = $this + 32 | 0;
  $__i$0 = 0;
  while (1) {
   if (($__i$0 | 0) >= ($8 | 0)) {
    label = 8;
    break;
   }
   $12 = _getc(HEAP32[$9 >> 2] | 0) | 0;
   if (($12 | 0) == -1) {
    $$10 = -1;
    break;
   }
   HEAP8[$__extbuf + $__i$0 >> 0] = $12;
   $__i$0 = $__i$0 + 1 | 0;
  }
  if ((label | 0) == 8) {
   do if (!(HEAP8[$this + 53 >> 0] | 0)) {
    $21 = $this + 40 | 0;
    $22 = $this + 36 | 0;
    $23 = $__1buf + 1 | 0;
    $__nread$0 = $8;
    L11 : while (1) {
     $24 = HEAP32[$21 >> 2] | 0;
     $25 = $24;
     $27 = HEAP32[$25 >> 2] | 0;
     $30 = HEAP32[$25 + 4 >> 2] | 0;
     $31 = HEAP32[$22 >> 2] | 0;
     $32 = $__extbuf + $__nread$0 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$31 >> 2] | 0) + 16 >> 2] & 63]($31, $24, $__extbuf, $32, $__enxt, $__1buf, $23, $__inxt) | 0) {
     case 3:
      {
       $__nread$0$lcssa51 = $__nread$0;
       label = 15;
       break L11;
       break;
      }
     case 2:
      {
       label = 17;
       break L11;
       break;
      }
     case 1:
      break;
     default:
      {
       $__nread$053 = $__nread$0;
       break L11;
      }
     }
     $38 = HEAP32[$21 >> 2] | 0;
     HEAP32[$38 >> 2] = $27;
     HEAP32[$38 + 4 >> 2] = $30;
     if (($__nread$0 | 0) == 8) {
      label = 17;
      break;
     }
     $44 = _getc(HEAP32[$9 >> 2] | 0) | 0;
     if (($44 | 0) == -1) {
      label = 17;
      break;
     }
     HEAP8[$32 >> 0] = $44;
     $__nread$0 = $__nread$0 + 1 | 0;
    }
    if ((label | 0) == 15) {
     HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0;
     $__nread$053 = $__nread$0$lcssa51;
    } else if ((label | 0) == 17) {
     $$9 = -1;
     break;
    }
    $__nread$3 = $__nread$053;
    label = 18;
   } else {
    HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0;
    $__nread$3 = $8;
    label = 18;
   } while (0);
   L21 : do if ((label | 0) == 18) {
    if ($__consume) {
     $57 = HEAP8[$__1buf >> 0] | 0;
     HEAP32[$this + 48 >> 2] = $57 & 255;
     $61 = $57;
    } else {
     $__i6$0 = $__nread$3;
     while (1) {
      if (($__i6$0 | 0) <= 0) break;
      $__i6$0 = $__i6$0 + -1 | 0;
      if ((_ungetc(HEAPU8[$__extbuf + $__i6$0 >> 0] | 0, HEAP32[$9 >> 2] | 0) | 0) == -1) {
       $$9 = -1;
       break L21;
      }
     }
     $61 = HEAP8[$__1buf >> 0] | 0;
    }
    $$9 = $61 & 255;
   } while (0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $3 = $this + 48 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if ($__consume) {
   HEAP32[$3 >> 2] = -1;
   HEAP8[$0 >> 0] = 0;
   $$11 = $4;
  } else $$11 = $4;
 }
 STACKTOP = sp;
 return $$11 | 0;
}

function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $2 = 0, $20 = 0, $35 = 0, $36 = 0, $48 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $78 = 0, $9 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $x$013 = 0;
 $0 = $f + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $f + 100 | 0;
 if ($1 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $1 + 1;
  $9 = HEAPU8[$1 >> 0] | 0;
 } else $9 = ___shgetc($f) | 0;
 switch ($9 | 0) {
 case 43:
 case 45:
  {
   $11 = ($9 | 0) == 45 & 1;
   $12 = HEAP32[$0 >> 2] | 0;
   if ($12 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $12 + 1;
    $20 = HEAPU8[$12 >> 0] | 0;
   } else $20 = ___shgetc($f) | 0;
   if (($pok | 0) != 0 & ($20 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$2 >> 2] | 0)) {
    $c$0 = $20;
    $neg$0 = $11;
   } else {
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    $c$0 = $20;
    $neg$0 = $11;
   } else {
    $c$0 = $20;
    $neg$0 = $11;
   }
   break;
  }
 default:
  {
   $c$0 = $9;
   $neg$0 = 0;
  }
 }
 if (($c$0 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$2 >> 2] | 0)) {
  $98 = -2147483648;
  $99 = 0;
 } else {
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  $98 = -2147483648;
  $99 = 0;
 } else {
  $c$112 = $c$0;
  $x$013 = 0;
  while (1) {
   $35 = $c$112 + -48 + ($x$013 * 10 | 0) | 0;
   $36 = HEAP32[$0 >> 2] | 0;
   if ($36 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $36 + 1;
    $c$1$be = HEAPU8[$36 >> 0] | 0;
   } else $c$1$be = ___shgetc($f) | 0;
   if (($c$1$be + -48 | 0) >>> 0 < 10 & ($35 | 0) < 214748364) {
    $c$112 = $c$1$be;
    $x$013 = $35;
   } else {
    $$lcssa22 = $35;
    $c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $48 = (($$lcssa22 | 0) < 0) << 31 >> 31;
  if (($c$1$be$lcssa + -48 | 0) >>> 0 < 10) {
   $53 = $$lcssa22;
   $54 = $48;
   $c$27 = $c$1$be$lcssa;
   while (1) {
    $55 = ___muldi3($53 | 0, $54 | 0, 10, 0) | 0;
    $56 = tempRet0;
    $59 = _i64Add($c$27 | 0, (($c$27 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    $61 = _i64Add($59 | 0, tempRet0 | 0, $55 | 0, $56 | 0) | 0;
    $62 = tempRet0;
    $63 = HEAP32[$0 >> 2] | 0;
    if ($63 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $63 + 1;
     $c$2$be = HEAPU8[$63 >> 0] | 0;
    } else $c$2$be = ___shgetc($f) | 0;
    if (($c$2$be + -48 | 0) >>> 0 < 10 & (($62 | 0) < 21474836 | ($62 | 0) == 21474836 & $61 >>> 0 < 2061584302)) {
     $53 = $61;
     $54 = $62;
     $c$27 = $c$2$be;
    } else {
     $92 = $61;
     $93 = $62;
     $c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;
   $93 = $48;
   $c$2$lcssa = $c$1$be$lcssa;
  }
  if (($c$2$lcssa + -48 | 0) >>> 0 < 10) do {
   $78 = HEAP32[$0 >> 2] | 0;
   if ($78 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $78 + 1;
    $c$3$be = HEAPU8[$78 >> 0] | 0;
   } else $c$3$be = ___shgetc($f) | 0;
  } while (($c$3$be + -48 | 0) >>> 0 < 10);
  if (HEAP32[$2 >> 2] | 0) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  $91 = ($neg$0 | 0) != 0;
  $94 = _i64Subtract(0, 0, $92 | 0, $93 | 0) | 0;
  $98 = $91 ? tempRet0 : $93;
  $99 = $91 ? $94 : $92;
 }
 tempRet0 = $98;
 return $99 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $$byval_copy = sp + 304 | 0;
 $vararg_buffer9 = sp + 48 | 0;
 $vararg_buffer5 = sp + 32 | 0;
 $vararg_buffer2 = sp + 24 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 308 | 0;
 $__nb = sp + 300 | 0;
 $__o = sp + 72 | 0;
 $__op = sp + 68 | 0;
 $__oe = sp + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 56 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $9 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 24225, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $10 = __ZNSt3__16__clocEv() | 0;
 if ($9) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $16 = __ZNSt3__16__clocEv() | 0;
  if ($9) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v;
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer9) | 0;
  }
  $21 = HEAP32[$__nb >> 2] | 0;
  if (!$21) __ZSt17__throw_bad_allocv(); else {
   $24 = $21;
   $38 = $21;
   $__nc$2 = $__nc$1;
  }
 } else {
  $24 = HEAP32[$__nb >> 2] | 0;
  $38 = 0;
  $__nc$2 = $__nc$0;
 }
 $23 = $24 + $__nc$2 | 0;
 $25 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($24, $23, $__iob) | 0;
 if (($24 | 0) == ($__nar | 0)) {
  $31 = $__nar;
  $36 = 0;
  $__ob$0 = $__o;
 } else {
  $28 = _malloc($__nc$2 << 3) | 0;
  if (!$28) __ZSt17__throw_bad_allocv(); else {
   $31 = $24;
   $36 = $28;
   $__ob$0 = $28;
  }
 }
 $30 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $30;
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($31, $25, $23, $__ob$0, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv($30) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $33 = HEAP32[$__op >> 2] | 0;
 $34 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $35 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__ob$0, $33, $34, $__iob, $__fl) | 0;
 HEAP32[$__s >> 2] = $35;
 if ($36) _free($36);
 _free($38);
 STACKTOP = sp;
 return $35 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$7 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$1 = 0, $$pre$i$3$i$i$9 = 0, $0 = 0, $13 = 0, $16 = 0, $26 = 0, $28 = 0, $3 = 0, $41 = 0, $42 = 0, $43 = 0, $51 = 0, $54 = 0, $66 = 0, $78 = 0, $79 = 0, $80 = 0, label = 0;
 L1 : while (1) {
  $0 = HEAP32[$__b >> 2] | 0;
  do if (!$0) $78 = 1; else {
   $3 = HEAP32[$0 + 12 >> 2] | 0;
   if (($3 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0; else $$0$i$i$i$i = HEAP32[$3 >> 2] | 0;
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $78 = 1;
    break;
   } else {
    $78 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $13 = HEAP32[$__e >> 2] | 0;
  do if (!$13) label = 15; else {
   $16 = HEAP32[$13 + 12 >> 2] | 0;
   if (($16 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) $$0$i$i$1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 127]($13) | 0; else $$0$i$i$1$i$i = HEAP32[$16 >> 2] | 0;
   if (($$0$i$i$1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 15;
    break;
   } else if ($78) {
    $79 = $13;
    break;
   } else {
    $$pre$i$3$i$i$9 = $13;
    break L1;
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i$3$i$i$9 = 0;
    break;
   } else $79 = 0;
  }
  $26 = HEAP32[$__b >> 2] | 0;
  $28 = HEAP32[$26 + 12 >> 2] | 0;
  if (($28 | 0) == (HEAP32[$26 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 127]($26) | 0; else $$0$i$i = HEAP32[$28 >> 2] | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 127]($__ct, 8192, $$0$i$i) | 0)) {
   $$pre$i$3$i$i$9 = $79;
   break;
  }
  $41 = HEAP32[$__b >> 2] | 0;
  $42 = $41 + 12 | 0;
  $43 = HEAP32[$42 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$41 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 40 >> 2] & 127]($41) | 0;
   continue;
  } else {
   HEAP32[$42 >> 2] = $43 + 4;
   continue;
  }
 }
 $51 = HEAP32[$__b >> 2] | 0;
 do if (!$51) $80 = 1; else {
  $54 = HEAP32[$51 + 12 >> 2] | 0;
  if (($54 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) $$0$i$i$i$i$1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] & 127]($51) | 0; else $$0$i$i$i$i$1 = HEAP32[$54 >> 2] | 0;
  if (($$0$i$i$i$i$1 | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $80 = 1;
   break;
  } else {
   $80 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$$pre$i$3$i$i$9) label = 37; else {
  $66 = HEAP32[$$pre$i$3$i$i$9 + 12 >> 2] | 0;
  if (($66 | 0) == (HEAP32[$$pre$i$3$i$i$9 + 16 >> 2] | 0)) $$0$i$i$1$i$i$7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$3$i$i$9 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$3$i$i$9) | 0; else $$0$i$i$1$i$i$7 = HEAP32[$66 >> 2] | 0;
  if (($$0$i$i$1$i$i$7 | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 37;
   break;
  } else if ($80) break; else {
   label = 39;
   break;
  }
 } while (0);
 if ((label | 0) == 37) if ($80) label = 39;
 if ((label | 0) == 39) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 return;
}

function __ZNSt3__110__stdinbufIwE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$10 = 0, $$11 = 0, $$9 = 0, $0 = 0, $12 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $39 = 0, $4 = 0, $45 = 0, $59 = 0, $6 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$0 = 0, $__i6$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$0$lcssa51 = 0, $__nread$053 = 0, $__nread$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__enxt = sp + 4 | 0;
 $__inxt = sp;
 $0 = $this + 52 | 0;
 if (!(HEAP8[$0 >> 0] | 0)) {
  $6 = HEAP32[$this + 44 >> 2] | 0;
  $8 = ($6 | 0) > 1 ? $6 : 1;
  $9 = $this + 32 | 0;
  $__i$0 = 0;
  while (1) {
   if (($__i$0 | 0) >= ($8 | 0)) {
    label = 8;
    break;
   }
   $12 = _getc(HEAP32[$9 >> 2] | 0) | 0;
   if (($12 | 0) == -1) {
    $$10 = -1;
    break;
   }
   HEAP8[$__extbuf + $__i$0 >> 0] = $12;
   $__i$0 = $__i$0 + 1 | 0;
  }
  if ((label | 0) == 8) {
   do if (!(HEAP8[$this + 53 >> 0] | 0)) {
    $22 = $this + 40 | 0;
    $23 = $this + 36 | 0;
    $24 = $__1buf + 4 | 0;
    $__nread$0 = $8;
    L11 : while (1) {
     $25 = HEAP32[$22 >> 2] | 0;
     $26 = $25;
     $28 = HEAP32[$26 >> 2] | 0;
     $31 = HEAP32[$26 + 4 >> 2] | 0;
     $32 = HEAP32[$23 >> 2] | 0;
     $33 = $__extbuf + $__nread$0 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$32 >> 2] | 0) + 16 >> 2] & 63]($32, $25, $__extbuf, $33, $__enxt, $__1buf, $24, $__inxt) | 0) {
     case 3:
      {
       $__nread$0$lcssa51 = $__nread$0;
       label = 15;
       break L11;
       break;
      }
     case 2:
      {
       label = 17;
       break L11;
       break;
      }
     case 1:
      break;
     default:
      {
       $__nread$053 = $__nread$0;
       break L11;
      }
     }
     $39 = HEAP32[$22 >> 2] | 0;
     HEAP32[$39 >> 2] = $28;
     HEAP32[$39 + 4 >> 2] = $31;
     if (($__nread$0 | 0) == 8) {
      label = 17;
      break;
     }
     $45 = _getc(HEAP32[$9 >> 2] | 0) | 0;
     if (($45 | 0) == -1) {
      label = 17;
      break;
     }
     HEAP8[$33 >> 0] = $45;
     $__nread$0 = $__nread$0 + 1 | 0;
    }
    if ((label | 0) == 15) {
     HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0];
     $__nread$053 = $__nread$0$lcssa51;
    } else if ((label | 0) == 17) {
     $$9 = -1;
     break;
    }
    $__nread$3 = $__nread$053;
    label = 18;
   } else {
    HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0];
    $__nread$3 = $8;
    label = 18;
   } while (0);
   L21 : do if ((label | 0) == 18) {
    if ($__consume) {
     $59 = HEAP32[$__1buf >> 2] | 0;
     HEAP32[$this + 48 >> 2] = $59;
     $$9 = $59;
     break;
    } else $__i6$0 = $__nread$3;
    while (1) {
     if (($__i6$0 | 0) <= 0) break;
     $__i6$0 = $__i6$0 + -1 | 0;
     if ((_ungetc(HEAP8[$__extbuf + $__i6$0 >> 0] | 0, HEAP32[$9 >> 2] | 0) | 0) == -1) {
      $$9 = -1;
      break L21;
     }
    }
    $$9 = HEAP32[$__1buf >> 2] | 0;
   } while (0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $3 = $this + 48 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if ($__consume) {
   HEAP32[$3 >> 2] = -1;
   HEAP8[$0 >> 0] = 0;
   $$11 = $4;
  } else $$11 = $4;
 }
 STACKTOP = sp;
 return $$11 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $$byval_copy = sp + 76 | 0;
 $vararg_buffer9 = sp + 48 | 0;
 $vararg_buffer5 = sp + 32 | 0;
 $vararg_buffer2 = sp + 24 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 138 | 0;
 $__nb = sp + 72 | 0;
 $__o = sp + 80 | 0;
 $__op = sp + 68 | 0;
 $__oe = sp + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 56 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $9 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 24225, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $10 = __ZNSt3__16__clocEv() | 0;
 if ($9) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $16 = __ZNSt3__16__clocEv() | 0;
  if ($9) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v;
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer9) | 0;
  }
  $21 = HEAP32[$__nb >> 2] | 0;
  if (!$21) __ZSt17__throw_bad_allocv(); else {
   $24 = $21;
   $37 = $21;
   $__nc$2 = $__nc$1;
  }
 } else {
  $24 = HEAP32[$__nb >> 2] | 0;
  $37 = 0;
  $__nc$2 = $__nc$0;
 }
 $23 = $24 + $__nc$2 | 0;
 $25 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($24, $23, $__iob) | 0;
 if (($24 | 0) == ($__nar | 0)) {
  $31 = $__nar;
  $36 = 0;
  $__ob$0 = $__o;
 } else {
  $28 = _malloc($__nc$2 << 1) | 0;
  if (!$28) __ZSt17__throw_bad_allocv(); else {
   $31 = $24;
   $36 = $28;
   $__ob$0 = $28;
  }
 }
 $30 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $30;
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($31, $25, $23, $__ob$0, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv($30) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $33 = HEAP32[$__op >> 2] | 0;
 $34 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $35 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__ob$0, $33, $34, $__iob, $__fl) | 0;
 _free($36);
 _free($37);
 STACKTOP = sp;
 return $35 | 0;
}

function _wcsrtombs($s, $ws, $n, $st) {
 $s = $s | 0;
 $ws = $ws | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$01$lcssa = 0, $$0129 = 0, $$0129$lcssa = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$223 = 0, $$223$lcssa = 0, $$24$lcssa = 0, $$2428 = 0, $$2428$lcssa = 0, $$3 = 0, $$35 = 0, $$422 = 0, $$422$lcssa = 0, $$422$lcssa82 = 0, $$5 = 0, $$pn = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $46 = 0, $5 = 0, $7 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf = sp;
 L1 : do if (!$s) {
  $2 = HEAP32[$ws >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  if (!$3) $$0 = 0; else {
   $$0218 = 0;
   $5 = $3;
   $ws2$019 = $2;
   while (1) {
    if ($5 >>> 0 > 127) {
     $7 = _wcrtomb($buf, $5, 0) | 0;
     if (($7 | 0) == -1) {
      $$0 = -1;
      break L1;
     } else $$pn = $7;
    } else $$pn = 1;
    $$13 = $$pn + $$0218 | 0;
    $ws2$019 = $ws2$019 + 4 | 0;
    $5 = HEAP32[$ws2$019 >> 2] | 0;
    if (!$5) {
     $$0 = $$13;
     break;
    } else $$0218 = $$13;
   }
  }
 } else {
  L9 : do if ($n >>> 0 > 3) {
   $$0129 = $s;
   $$2428 = $n;
   $14 = HEAP32[$ws >> 2] | 0;
   while (1) {
    $13 = HEAP32[$14 >> 2] | 0;
    if (($13 + -1 | 0) >>> 0 > 126) {
     if (!$13) {
      $$0129$lcssa = $$0129;
      $$2428$lcssa = $$2428;
      break;
     }
     $19 = _wcrtomb($$0129, $13, 0) | 0;
     if (($19 | 0) == -1) {
      $$0 = -1;
      break L1;
     }
     $$1 = $$0129 + $19 | 0;
     $$35 = $$2428 - $19 | 0;
     $27 = $14;
    } else {
     HEAP8[$$0129 >> 0] = $13;
     $$1 = $$0129 + 1 | 0;
     $$35 = $$2428 + -1 | 0;
     $27 = HEAP32[$ws >> 2] | 0;
    }
    $14 = $27 + 4 | 0;
    HEAP32[$ws >> 2] = $14;
    if ($$35 >>> 0 <= 3) {
     $$01$lcssa = $$1;
     $$24$lcssa = $$35;
     break L9;
    } else {
     $$0129 = $$1;
     $$2428 = $$35;
    }
   }
   HEAP8[$$0129$lcssa >> 0] = 0;
   HEAP32[$ws >> 2] = 0;
   $$0 = $n - $$2428$lcssa | 0;
   break L1;
  } else {
   $$01$lcssa = $s;
   $$24$lcssa = $n;
  } while (0);
  if (!$$24$lcssa) $$0 = $n; else {
   $$223 = $$01$lcssa;
   $$422 = $$24$lcssa;
   $30 = HEAP32[$ws >> 2] | 0;
   while (1) {
    $29 = HEAP32[$30 >> 2] | 0;
    if (($29 + -1 | 0) >>> 0 > 126) {
     if (!$29) {
      $$223$lcssa = $$223;
      $$422$lcssa = $$422;
      label = 19;
      break;
     }
     $35 = _wcrtomb($buf, $29, 0) | 0;
     if (($35 | 0) == -1) {
      $$0 = -1;
      break L1;
     }
     if ($$422 >>> 0 < $35 >>> 0) {
      $$422$lcssa82 = $$422;
      label = 22;
      break;
     }
     _wcrtomb($$223, HEAP32[$30 >> 2] | 0, 0) | 0;
     $$3 = $$223 + $35 | 0;
     $$5 = $$422 - $35 | 0;
     $46 = $30;
    } else {
     HEAP8[$$223 >> 0] = $29;
     $$3 = $$223 + 1 | 0;
     $$5 = $$422 + -1 | 0;
     $46 = HEAP32[$ws >> 2] | 0;
    }
    $30 = $46 + 4 | 0;
    HEAP32[$ws >> 2] = $30;
    if (!$$5) {
     $$0 = $n;
     break L1;
    } else {
     $$223 = $$3;
     $$422 = $$5;
    }
   }
   if ((label | 0) == 19) {
    HEAP8[$$223$lcssa >> 0] = 0;
    HEAP32[$ws >> 2] = 0;
    $$0 = $n - $$422$lcssa | 0;
    break;
   } else if ((label | 0) == 22) {
    $$0 = $n - $$422$lcssa82 | 0;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN14NordsieckState8JacobianEPFvdPdS0_ER6Vectord($rightSide, $x, $t) {
 $rightSide = $rightSide | 0;
 $x = $x | 0;
 $t = +$t;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0.0, $17 = 0.0, $18 = 0, $2 = 0, $23 = 0, $24 = 0.0, $25 = 0, $27 = 0.0, $28 = 0, $3 = 0, $30 = 0.0, $31 = 0, $33 = 0, $34 = 0.0, $35 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0.0, $45 = 0, $47 = 0.0, $48 = 0, $5 = 0, $51 = 0, $52 = 0, $6 = 0, $8 = 0, $i$014 = 0, $i1$011 = 0, $i2$09$us = 0, $i3$05 = 0, $j$06$us = 0;
 $1 = HEAP32[$x + 4 >> 2] | 0;
 $2 = __Znwj(12) | 0;
 __ZN6MatrixC2Eii($2, $1, $1);
 $3 = __Znwj(8) | 0;
 __ZN6VectorC2Eid($3, $1, 0.0);
 $4 = ($1 | 0) > 0;
 if ($4) {
  $i$014 = 0;
  do {
   $11 = __ZNK6VectorixEi($x, $i$014) | 0;
   $13 = +Math_abs(+(+HEAPF64[$11 >> 3]));
   $17 = +Math_sqrt(+(($13 > 1.0e-05 ? $13 : 1.0e-05) * 1.0e-06));
   $18 = __ZNK6VectorixEi($3, $i$014) | 0;
   HEAPF64[$18 >> 3] = $17;
   $i$014 = $i$014 + 1 | 0;
  } while (($i$014 | 0) != ($1 | 0));
 }
 $5 = $1 >>> 0 > 536870911 ? -1 : $1 << 3;
 $6 = __Znaj($5) | 0;
 FUNCTION_TABLE_vdii[$rightSide & 63]($t, HEAP32[$x >> 2] | 0, $6);
 $8 = __Znwj(8) | 0;
 __ZN6VectorC2EPKdi($8, $6, $1);
 __ZdaPv($6);
 $10 = __Znaj($1 >>> 0 > 1073741823 ? -1 : $1 << 2) | 0;
 if ($4) $i1$011 = 0; else {
  __ZN6VectorD2Ev($3);
  __ZdlPv($3);
  __ZdaPv($10);
  __ZN6VectorD2Ev($8);
  __ZdlPv($8);
  return $2 | 0;
 }
 do {
  $33 = __ZNK6VectorixEi($x, $i1$011) | 0;
  $34 = +HEAPF64[$33 >> 3];
  $35 = __ZNK6VectorixEi($3, $i1$011) | 0;
  $37 = $34 + +HEAPF64[$35 >> 3];
  $38 = __ZNK6VectorixEi($x, $i1$011) | 0;
  HEAPF64[$38 >> 3] = $37;
  $39 = __Znaj($5) | 0;
  FUNCTION_TABLE_vdii[$rightSide & 63]($t, HEAP32[$x >> 2] | 0, $39);
  $41 = __Znwj(8) | 0;
  __ZN6VectorC2EPKdi($41, $39, $1);
  HEAP32[$10 + ($i1$011 << 2) >> 2] = $41;
  __ZdaPv($39);
  $43 = __ZNK6VectorixEi($x, $i1$011) | 0;
  $44 = +HEAPF64[$43 >> 3];
  $45 = __ZNK6VectorixEi($3, $i1$011) | 0;
  $47 = $44 - +HEAPF64[$45 >> 3];
  $48 = __ZNK6VectorixEi($x, $i1$011) | 0;
  HEAPF64[$48 >> 3] = $47;
  $i1$011 = $i1$011 + 1 | 0;
 } while (($i1$011 | 0) < ($1 | 0));
 if ($4) $i2$09$us = 0; else {
  __ZN6VectorD2Ev($3);
  __ZdlPv($3);
  __ZdaPv($10);
  __ZN6VectorD2Ev($8);
  __ZdlPv($8);
  return $2 | 0;
 }
 do {
  $j$06$us = 0;
  do {
   $23 = __ZNK6VectorixEi(HEAP32[$10 + ($j$06$us << 2) >> 2] | 0, $i2$09$us) | 0;
   $24 = +HEAPF64[$23 >> 3];
   $25 = __ZNK6VectorixEi($8, $i2$09$us) | 0;
   $27 = $24 - +HEAPF64[$25 >> 3];
   $28 = __ZNK6VectorixEi($3, $j$06$us) | 0;
   $30 = $27 / +HEAPF64[$28 >> 3];
   $31 = __ZNK6Matrix9ElementAtEii($2, $i2$09$us, $j$06$us) | 0;
   HEAPF64[$31 >> 3] = $30;
   $j$06$us = $j$06$us + 1 | 0;
  } while (($j$06$us | 0) != ($1 | 0));
  $i2$09$us = $i2$09$us + 1 | 0;
 } while (($i2$09$us | 0) != ($1 | 0));
 __ZN6VectorD2Ev($3);
 __ZdlPv($3);
 if ($4) $i3$05 = 0; else {
  __ZdaPv($10);
  __ZN6VectorD2Ev($8);
  __ZdlPv($8);
  return $2 | 0;
 }
 do {
  $51 = $10 + ($i3$05 << 2) | 0;
  $52 = HEAP32[$51 >> 2] | 0;
  if ($52) {
   __ZN6VectorD2Ev($52);
   __ZdlPv($52);
  }
  HEAP32[$51 >> 2] = 0;
  $i3$05 = $i3$05 + 1 | 0;
 } while (($i3$05 | 0) < ($1 | 0));
 __ZdaPv($10);
 __ZN6VectorD2Ev($8);
 __ZdlPv($8);
 return $2 | 0;
}

function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $$0$i = 0, $$0$i$9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $24 = 0, $41 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $60 = 0, $7 = 0, $__bn$i$7 = 0, $__buf$i$6 = 0, $__i$0$i$i = 0, $__i$0$i$i$2 = 0, $__mb$i$5 = 0, $__ndflt = 0, $__p$0$i = 0, $__p$0$i$10 = 0, $__r$0$i = 0, $__r$0$i$8 = 0, $__wn$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $__mb$i$5 = sp + 168 | 0;
 $__buf$i$6 = sp + 40 | 0;
 $__bn$i$7 = sp + 36 | 0;
 $__wn$i = sp + 32 | 0;
 $__ndflt = sp;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__ndflt + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 >> 2] = 10868;
 $5 = HEAP8[$__dflt >> 0] | 0;
 $7 = ($5 & 1) == 0;
 $10 = $__dflt + 4 | 0;
 $11 = $7 ? $10 : HEAP32[$__dflt + 8 >> 2] | 0;
 $16 = $11 + (($7 ? ($5 & 255) >>> 1 : HEAP32[$10 >> 2] | 0) << 2) | 0;
 $17 = $__buf$i$6 + 32 | 0;
 $$0$i$9 = $11;
 $__r$0$i$8 = 0;
 while (1) {
  if (!(($__r$0$i$8 | 0) != 2 & $$0$i$9 >>> 0 < $16 >>> 0)) break;
  HEAP32[$__wn$i >> 2] = $$0$i$9;
  $24 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] & 63]($0, $__mb$i$5, $$0$i$9, $16, $__wn$i, $__buf$i$6, $17, $__bn$i$7) | 0;
  $__p$0$i$10 = $__buf$i$6;
  while (1) {
   if ($__p$0$i$10 >>> 0 >= (HEAP32[$__bn$i$7 >> 2] | 0) >>> 0) break;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$__p$0$i$10 >> 0] | 0);
   $__p$0$i$10 = $__p$0$i$10 + 1 | 0;
  }
  $$0$i$9 = HEAP32[$__wn$i >> 2] | 0;
  $__r$0$i$8 = $24;
 }
 $41 = _catgets(($__c | 0) == -1 ? -1 : $__c << 1, $__set, $__msgid, (HEAP8[$__ndflt >> 0] & 1) == 0 ? $__ndflt + 1 | 0 : HEAP32[$__ndflt + 8 >> 2] | 0) | 0;
 $__i$0$i$i$2 = 0;
 while (1) {
  if (($__i$0$i$i$2 | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i$2 << 2) >> 2] = 0;
  $__i$0$i$i$2 = $__i$0$i$i$2 + 1 | 0;
 }
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = 10916;
 $46 = $41 + (_strlen($41) | 0) | 0;
 $47 = $46;
 $48 = $__buf$i$6 + 128 | 0;
 $$0$i = $41;
 $__r$0$i = 0;
 while (1) {
  if (!(($__r$0$i | 0) != 2 & $$0$i >>> 0 < $46 >>> 0)) break;
  HEAP32[$__wn$i >> 2] = $$0$i;
  $60 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 63]($1, $__mb$i$5, $$0$i, ($47 - $$0$i | 0) > 32 ? $$0$i + 32 | 0 : $46, $__wn$i, $__buf$i$6, $48, $__bn$i$7) | 0;
  $__p$0$i = $__buf$i$6;
  while (1) {
   if ($__p$0$i >>> 0 >= (HEAP32[$__bn$i$7 >> 2] | 0) >>> 0) break;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg$result, HEAP32[$__p$0$i >> 2] | 0);
   $__p$0$i = $__p$0$i + 4 | 0;
  }
  $$0$i = HEAP32[$__wn$i >> 2] | 0;
  $__r$0$i = $60;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 STACKTOP = sp;
 return;
}

function _mbsnrtowcs($wcs, $src, $n, $wn, $st) {
 $wcs = $wcs | 0;
 $src = $src | 0;
 $n = $n | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$019 = 0, $$02$ = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$214 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $0 = 0, $1 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $23 = 0, $24 = 0, $32 = 0, $37 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $cnt$020 = 0, $cnt$1 = 0, $cnt$215 = 0, $cnt$215$lcssa = 0, $cnt$3 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$010 = 0, $ws$021 = 0, $ws$021$lcssa56 = 0, $ws$1 = 0, $ws$216 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $wbuf = sp + 8 | 0;
 $s = sp;
 $0 = HEAP32[$src >> 2] | 0;
 HEAP32[$s >> 2] = $0;
 $1 = ($wcs | 0) != 0;
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $$cast = $0;
 L1 : do if (($wn$ | 0) != 0 & ($0 | 0) != 0) {
  $$019 = $n;
  $$0218 = $wn$;
  $37 = $$cast;
  $cnt$020 = 0;
  $ws$021 = $wcs$;
  while (1) {
   $4 = $$019 >>> 2;
   $5 = $4 >>> 0 >= $$0218 >>> 0;
   if (!($$019 >>> 0 > 131 | $5)) {
    $$1 = $$019;
    $$24 = $$0218;
    $18 = $37;
    $cnt$1 = $cnt$020;
    $ws$010 = $ws$021;
    break L1;
   }
   $$02$ = $5 ? $$0218 : $4;
   $8 = $$019 - $$02$ | 0;
   $9 = _mbsrtowcs($ws$021, $s, $$02$, $st) | 0;
   if (($9 | 0) == -1) {
    $$lcssa57 = $8;
    $ws$021$lcssa56 = $ws$021;
    break;
   }
   $11 = ($ws$021 | 0) == ($wbuf | 0);
   $13 = $11 ? 0 : $9;
   $$13 = $$0218 - $13 | 0;
   $ws$1 = $11 ? $ws$021 : $ws$021 + ($9 << 2) | 0;
   $14 = $9 + $cnt$020 | 0;
   $15 = HEAP32[$s >> 2] | 0;
   if (($$0218 | 0) != ($13 | 0) & ($15 | 0) != 0) {
    $$019 = $8;
    $$0218 = $$13;
    $37 = $15;
    $cnt$020 = $14;
    $ws$021 = $ws$1;
   } else {
    $$1 = $8;
    $$24 = $$13;
    $18 = $15;
    $cnt$1 = $14;
    $ws$010 = $ws$1;
    break L1;
   }
  }
  $$1 = $$lcssa57;
  $$24 = 0;
  $18 = HEAP32[$s >> 2] | 0;
  $cnt$1 = -1;
  $ws$010 = $ws$021$lcssa56;
 } else {
  $$1 = $n;
  $$24 = $wn$;
  $18 = $$cast;
  $cnt$1 = 0;
  $ws$010 = $wcs$;
 } while (0);
 L8 : do if (!$18) $cnt$3 = $cnt$1; else if (($$24 | 0) != 0 & ($$1 | 0) != 0) {
  $$214 = $$1;
  $$313 = $$24;
  $23 = $18;
  $cnt$215 = $cnt$1;
  $ws$216 = $ws$010;
  while (1) {
   $24 = _mbrtowc($ws$216, $23, $$214, $st) | 0;
   if (($24 + 2 | 0) >>> 0 < 3) {
    $$lcssa = $24;
    $cnt$215$lcssa = $cnt$215;
    break;
   }
   $23 = (HEAP32[$s >> 2] | 0) + $24 | 0;
   HEAP32[$s >> 2] = $23;
   $$313 = $$313 + -1 | 0;
   $32 = $cnt$215 + 1 | 0;
   if (!(($$313 | 0) != 0 & ($$214 | 0) != ($24 | 0))) {
    $cnt$3 = $32;
    break L8;
   } else {
    $$214 = $$214 - $24 | 0;
    $cnt$215 = $32;
    $ws$216 = $ws$216 + 4 | 0;
   }
  }
  switch ($$lcssa | 0) {
  case -1:
   {
    $cnt$3 = -1;
    break L8;
    break;
   }
  case 0:
   {
    HEAP32[$s >> 2] = 0;
    $cnt$3 = $cnt$215$lcssa;
    break L8;
    break;
   }
  default:
   {
    HEAP32[$st >> 2] = 0;
    $cnt$3 = $cnt$215$lcssa;
    break L8;
   }
  }
 } else $cnt$3 = $cnt$1; while (0);
 if ($1) HEAP32[$src >> 2] = HEAP32[$s >> 2];
 STACKTOP = sp;
 return $cnt$3 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $$byval_copy = sp + 296 | 0;
 $vararg_buffer5 = sp + 32 | 0;
 $vararg_buffer2 = sp + 24 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 300 | 0;
 $__nb = sp + 292 | 0;
 $__o = sp + 64 | 0;
 $__op = sp + 60 | 0;
 $__oe = sp + 56 | 0;
 $0 = sp + 52 | 0;
 $1 = sp + 48 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $9 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 24224, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $10 = __ZNSt3__16__clocEv() | 0;
 if ($9) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $16 = __ZNSt3__16__clocEv() | 0;
  HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
  $19 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer5) | 0;
  $20 = HEAP32[$__nb >> 2] | 0;
  if (!$20) __ZSt17__throw_bad_allocv(); else {
   $23 = $20;
   $37 = $20;
   $__nc$1 = $19;
  }
 } else {
  $23 = HEAP32[$__nb >> 2] | 0;
  $37 = 0;
  $__nc$1 = $__nc$0;
 }
 $22 = $23 + $__nc$1 | 0;
 $24 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($23, $22, $__iob) | 0;
 if (($23 | 0) == ($__nar | 0)) {
  $30 = $__nar;
  $35 = 0;
  $__ob$0 = $__o;
 } else {
  $27 = _malloc($__nc$1 << 3) | 0;
  if (!$27) __ZSt17__throw_bad_allocv(); else {
   $30 = $23;
   $35 = $27;
   $__ob$0 = $27;
  }
 }
 $29 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $29;
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($30, $24, $22, $__ob$0, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv($29) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $32 = HEAP32[$__op >> 2] | 0;
 $33 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $34 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__ob$0, $32, $33, $__iob, $__fl) | 0;
 HEAP32[$__s >> 2] = $34;
 if ($35) _free($35);
 _free($37);
 STACKTOP = sp;
 return $34 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $$byval_copy = sp + 68 | 0;
 $vararg_buffer5 = sp + 32 | 0;
 $vararg_buffer2 = sp + 24 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 130 | 0;
 $__nb = sp + 64 | 0;
 $__o = sp + 72 | 0;
 $__op = sp + 60 | 0;
 $__oe = sp + 56 | 0;
 $0 = sp + 52 | 0;
 $1 = sp + 48 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $9 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 24224, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $10 = __ZNSt3__16__clocEv() | 0;
 if ($9) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $16 = __ZNSt3__16__clocEv() | 0;
  HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
  $19 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer5) | 0;
  $20 = HEAP32[$__nb >> 2] | 0;
  if (!$20) __ZSt17__throw_bad_allocv(); else {
   $23 = $20;
   $36 = $20;
   $__nc$1 = $19;
  }
 } else {
  $23 = HEAP32[$__nb >> 2] | 0;
  $36 = 0;
  $__nc$1 = $__nc$0;
 }
 $22 = $23 + $__nc$1 | 0;
 $24 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($23, $22, $__iob) | 0;
 if (($23 | 0) == ($__nar | 0)) {
  $30 = $__nar;
  $35 = 0;
  $__ob$0 = $__o;
 } else {
  $27 = _malloc($__nc$1 << 1) | 0;
  if (!$27) __ZSt17__throw_bad_allocv(); else {
   $30 = $23;
   $35 = $27;
   $__ob$0 = $27;
  }
 }
 $29 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $29;
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($30, $24, $22, $__ob$0, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv($29) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $32 = HEAP32[$__op >> 2] | 0;
 $33 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $34 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__ob$0, $32, $33, $__iob, $__fl) | 0;
 _free($35);
 _free($36);
 STACKTOP = sp;
 return $34 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$pre$i$2$i$i$6 = 0, $0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $27 = 0, $29 = 0, $46 = 0, $47 = 0, $48 = 0, $56 = 0, $68 = 0, $69 = 0, $83 = 0, label = 0;
 $0 = $__ct + 8 | 0;
 L1 : while (1) {
  $1 = HEAP32[$__b >> 2] | 0;
  do if (!$1) $13 = 0; else if ((HEAP32[$1 + 12 >> 2] | 0) == (HEAP32[$1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] & 127]($1) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $13 = 0;
   break;
  } else {
   $13 = HEAP32[$__b >> 2] | 0;
   break;
  } else $13 = $1; while (0);
  $14 = ($13 | 0) == 0;
  $15 = HEAP32[$__e >> 2] | 0;
  do if (!$15) label = 12; else {
   if ((HEAP32[$15 + 12 >> 2] | 0) != (HEAP32[$15 + 16 >> 2] | 0)) if ($14) {
    $83 = $15;
    break;
   } else {
    $$pre$i$2$i$i$6 = $15;
    break L1;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$15 >> 2] | 0) + 36 >> 2] & 127]($15) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 12;
    break;
   } else if ($14) {
    $83 = $15;
    break;
   } else {
    $$pre$i$2$i$i$6 = $15;
    break L1;
   }
  } while (0);
  if ((label | 0) == 12) {
   label = 0;
   if ($14) {
    $$pre$i$2$i$i$6 = 0;
    break;
   } else $83 = 0;
  }
  $27 = HEAP32[$__b >> 2] | 0;
  $29 = HEAP32[$27 + 12 >> 2] | 0;
  if (($29 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 127]($27) | 0; else $$0$i$i = HEAPU8[$29 >> 0] | 0;
  if (($$0$i$i & 255) << 24 >> 24 <= -1) {
   $$pre$i$2$i$i$6 = $83;
   break;
  }
  if (!(HEAP16[(HEAP32[$0 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
   $$pre$i$2$i$i$6 = $83;
   break;
  }
  $46 = HEAP32[$__b >> 2] | 0;
  $47 = $46 + 12 | 0;
  $48 = HEAP32[$47 >> 2] | 0;
  if (($48 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 40 >> 2] & 127]($46) | 0;
   continue;
  } else {
   HEAP32[$47 >> 2] = $48 + 1;
   continue;
  }
 }
 $56 = HEAP32[$__b >> 2] | 0;
 do if (!$56) $68 = 0; else if ((HEAP32[$56 + 12 >> 2] | 0) == (HEAP32[$56 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$56 >> 2] | 0) + 36 >> 2] & 127]($56) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $68 = 0;
  break;
 } else {
  $68 = HEAP32[$__b >> 2] | 0;
  break;
 } else $68 = $56; while (0);
 $69 = ($68 | 0) == 0;
 do if (!$$pre$i$2$i$i$6) label = 32; else {
  if ((HEAP32[$$pre$i$2$i$i$6 + 12 >> 2] | 0) == (HEAP32[$$pre$i$2$i$i$6 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$2$i$i$6 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$2$i$i$6) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 32;
   break;
  }
  if (!$69) label = 33;
 } while (0);
 if ((label | 0) == 32) if ($69) label = 33;
 if ((label | 0) == 33) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 return;
}

function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this | 0;
 var $9 = 0, $__i$0$i$i$i = 0;
 if (!(HEAP8[2688] | 0)) if (___cxa_guard_acquire(2688) | 0) {
  if (!(HEAP8[2696] | 0)) if (___cxa_guard_acquire(2696) | 0) {
   $9 = 12188;
   do {
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$9 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    $9 = $9 + 12 | 0;
   } while (($9 | 0) != 12476);
   ___cxa_atexit(153, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2696);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12188, 12476) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12200, 12508) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12212, 12544) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12224, 12568) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12236, 12592) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12248, 12608) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12260, 12628) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12272, 12648) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12284, 12676) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12296, 12716) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12308, 12748) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12320, 12784) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12332, 12820) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12344, 12836) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12356, 12852) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12368, 12868) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12380, 12592) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12392, 12884) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12404, 12900) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12416, 12916) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12428, 12932) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12440, 12948) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12452, 12964) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12464, 12980) | 0;
  HEAP32[3249] = 12188;
  ___cxa_guard_release(2688);
 }
 return HEAP32[3249] | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this | 0;
 var $9 = 0, $__i$0$i$i$i = 0;
 if (!(HEAP8[2672] | 0)) if (___cxa_guard_acquire(2672) | 0) {
  if (!(HEAP8[2680] | 0)) if (___cxa_guard_acquire(2680) | 0) {
   $9 = 11896;
   do {
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$9 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    $9 = $9 + 12 | 0;
   } while (($9 | 0) != 12184);
   ___cxa_atexit(152, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2680);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11896, 24409) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11908, 24417) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11920, 24426) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11932, 24432) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11944, 24438) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11956, 24442) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11968, 24447) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11980, 24452) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11992, 24459) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12004, 24469) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12016, 24477) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12028, 24486) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12040, 24495) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12052, 24499) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12064, 24503) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12076, 24507) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12088, 24438) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12100, 24511) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12112, 24515) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12124, 24519) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12136, 24523) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12148, 24527) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12160, 24531) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12172, 24535) | 0;
  HEAP32[3046] = 11896;
  ___cxa_guard_release(2672);
 }
 return HEAP32[3046] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$2$i$i$611 = 0, $0 = 0, $12 = 0, $13 = 0, $14 = 0, $28 = 0, $30 = 0, $48 = 0, $49 = 0, $50 = 0, $60 = 0, $70 = 0, $71 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $12 = 0; else if ((HEAP32[$0 + 12 >> 2] | 0) == (HEAP32[$0 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $12 = 0;
  break;
 } else {
  $12 = HEAP32[$__b >> 2] | 0;
  break;
 } else $12 = $0; while (0);
 $13 = ($12 | 0) == 0;
 $14 = HEAP32[$__e >> 2] | 0;
 do if (!$14) label = 11; else {
  if ((HEAP32[$14 + 12 >> 2] | 0) == (HEAP32[$14 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 127]($14) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 11;
   break;
  }
  if ($13) {
   $$pre$i$2$i$i$611 = $14;
   label = 13;
  } else label = 12;
 } while (0);
 if ((label | 0) == 11) if ($13) label = 12; else {
  $$pre$i$2$i$i$611 = 0;
  label = 13;
 }
 L16 : do if ((label | 0) == 12) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; else if ((label | 0) == 13) {
  $28 = HEAP32[$__b >> 2] | 0;
  $30 = HEAP32[$28 + 12 >> 2] | 0;
  if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 127]($28) | 0; else $$0$i$i = HEAPU8[$30 >> 0] | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 127]($__ct, $$0$i$i & 255, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   break;
  }
  $48 = HEAP32[$__b >> 2] | 0;
  $49 = $48 + 12 | 0;
  $50 = HEAP32[$49 >> 2] | 0;
  if (($50 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$48 >> 2] | 0) + 40 >> 2] & 127]($48) | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   if (!$$pre) $70 = 0; else {
    $60 = $$pre;
    label = 21;
   }
  } else {
   HEAP32[$49 >> 2] = $50 + 1;
   $60 = $48;
   label = 21;
  }
  do if ((label | 0) == 21) if ((HEAP32[$60 + 12 >> 2] | 0) == (HEAP32[$60 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 36 >> 2] & 127]($60) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $70 = 0;
   break;
  } else {
   $70 = HEAP32[$__b >> 2] | 0;
   break;
  } else $70 = $60; while (0);
  $71 = ($70 | 0) == 0;
  do if (!$$pre$i$2$i$i$611) label = 30; else {
   if ((HEAP32[$$pre$i$2$i$i$611 + 12 >> 2] | 0) == (HEAP32[$$pre$i$2$i$i$611 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$2$i$i$611 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$2$i$i$611) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 30;
    break;
   }
   if ($71) break L16;
  } while (0);
  if ((label | 0) == 30) if (!$71) break;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 } while (0);
 return;
}

function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$2 = 0, $$pre2 = 0, $10 = 0, $12 = 0, $17 = 0, $24 = 0, $35 = 0, $38 = 0, $40 = 0, $50 = 0, $55 = 0, $6 = 0, $66 = 0, $72 = 0, $77 = 0, $8 = 0, $80 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $$pre2 = $to_end;
 if (!($mode & 2)) label = 4; else if (($$pre2 - $to | 0) < 3) $$2 = 1; else {
  HEAP32[$to_nxt >> 2] = $to + 1;
  HEAP8[$to >> 0] = -17;
  $6 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $6 + 1;
  HEAP8[$6 >> 0] = -69;
  $8 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $8 + 1;
  HEAP8[$8 >> 0] = -65;
  label = 4;
 }
 L4 : do if ((label | 0) == 4) {
  $10 = HEAP32[$frm_nxt >> 2] | 0;
  while (1) {
   if ($10 >>> 0 >= $frm_end >>> 0) {
    $$2 = 0;
    break L4;
   }
   $12 = HEAP32[$10 >> 2] | 0;
   if ($12 >>> 0 > $Maxcode >>> 0 | ($12 & -2048 | 0) == 55296) {
    $$2 = 2;
    break L4;
   }
   do if ($12 >>> 0 < 128) {
    $17 = HEAP32[$to_nxt >> 2] | 0;
    if (($$pre2 - $17 | 0) < 1) {
     $$2 = 1;
     break L4;
    }
    HEAP32[$to_nxt >> 2] = $17 + 1;
    HEAP8[$17 >> 0] = $12;
   } else {
    if ($12 >>> 0 < 2048) {
     $24 = HEAP32[$to_nxt >> 2] | 0;
     if (($$pre2 - $24 | 0) < 2) {
      $$2 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $24 + 1;
     HEAP8[$24 >> 0] = $12 >>> 6 | 192;
     $35 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $35 + 1;
     HEAP8[$35 >> 0] = $12 & 63 | 128;
     break;
    }
    $38 = HEAP32[$to_nxt >> 2] | 0;
    $40 = $$pre2 - $38 | 0;
    if ($12 >>> 0 < 65536) {
     if (($40 | 0) < 3) {
      $$2 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $38 + 1;
     HEAP8[$38 >> 0] = $12 >>> 12 | 224;
     $50 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $50 + 1;
     HEAP8[$50 >> 0] = $12 >>> 6 & 63 | 128;
     $55 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $55 + 1;
     HEAP8[$55 >> 0] = $12 & 63 | 128;
     break;
    } else {
     if (($40 | 0) < 4) {
      $$2 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $38 + 1;
     HEAP8[$38 >> 0] = $12 >>> 18 | 240;
     $66 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $66 + 1;
     HEAP8[$66 >> 0] = $12 >>> 12 & 63 | 128;
     $72 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $72 + 1;
     HEAP8[$72 >> 0] = $12 >>> 6 & 63 | 128;
     $77 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $77 + 1;
     HEAP8[$77 >> 0] = $12 & 63 | 128;
     break;
    }
   } while (0);
   $80 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0;
   HEAP32[$frm_nxt >> 2] = $80;
   $10 = $80;
  }
 } while (0);
 return $$2 | 0;
}

function _pop_arg($arg, $type, $ap) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 var $105 = 0, $106 = 0.0, $112 = 0, $113 = 0.0, $13 = 0, $14 = 0, $17 = 0, $26 = 0, $27 = 0, $28 = 0, $37 = 0, $38 = 0, $40 = 0, $43 = 0, $44 = 0, $53 = 0, $54 = 0, $56 = 0, $59 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $79 = 0, $80 = 0, $82 = 0, $85 = 0, $94 = 0, $95 = 0, $96 = 0;
 L1 : do if ($type >>> 0 <= 20) do switch ($type | 0) {
 case 9:
  {
   $6 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $7 = HEAP32[$6 >> 2] | 0;
   HEAP32[$ap >> 2] = $6 + 4;
   HEAP32[$arg >> 2] = $7;
   break L1;
   break;
  }
 case 10:
  {
   $13 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $14 = HEAP32[$13 >> 2] | 0;
   HEAP32[$ap >> 2] = $13 + 4;
   $17 = $arg;
   HEAP32[$17 >> 2] = $14;
   HEAP32[$17 + 4 >> 2] = (($14 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $26 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $27 = HEAP32[$26 >> 2] | 0;
   HEAP32[$ap >> 2] = $26 + 4;
   $28 = $arg;
   HEAP32[$28 >> 2] = $27;
   HEAP32[$28 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $37 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $38 = $37;
   $40 = HEAP32[$38 >> 2] | 0;
   $43 = HEAP32[$38 + 4 >> 2] | 0;
   HEAP32[$ap >> 2] = $37 + 8;
   $44 = $arg;
   HEAP32[$44 >> 2] = $40;
   HEAP32[$44 + 4 >> 2] = $43;
   break L1;
   break;
  }
 case 13:
  {
   $53 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $54 = HEAP32[$53 >> 2] | 0;
   HEAP32[$ap >> 2] = $53 + 4;
   $56 = ($54 & 65535) << 16 >> 16;
   $59 = $arg;
   HEAP32[$59 >> 2] = $56;
   HEAP32[$59 + 4 >> 2] = (($56 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $68 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $69 = HEAP32[$68 >> 2] | 0;
   HEAP32[$ap >> 2] = $68 + 4;
   $70 = $arg;
   HEAP32[$70 >> 2] = $69 & 65535;
   HEAP32[$70 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $79 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $80 = HEAP32[$79 >> 2] | 0;
   HEAP32[$ap >> 2] = $79 + 4;
   $82 = ($80 & 255) << 24 >> 24;
   $85 = $arg;
   HEAP32[$85 >> 2] = $82;
   HEAP32[$85 + 4 >> 2] = (($82 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $94 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $95 = HEAP32[$94 >> 2] | 0;
   HEAP32[$ap >> 2] = $94 + 4;
   $96 = $arg;
   HEAP32[$96 >> 2] = $95 & 255;
   HEAP32[$96 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $105 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $106 = +HEAPF64[$105 >> 3];
   HEAP32[$ap >> 2] = $105 + 8;
   HEAPF64[$arg >> 3] = $106;
   break L1;
   break;
  }
 case 18:
  {
   $112 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $113 = +HEAPF64[$112 >> 3];
   HEAP32[$ap >> 2] = $112 + 8;
   HEAPF64[$arg >> 3] = $113;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $15 = 0, $20 = 0, $25 = 0, $3 = 0, $34 = 0, $36 = 0, $38 = 0, $49 = 0, $5 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $iovs = sp + 32 | 0;
 $0 = $f + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$iovs >> 2] = $1;
 $3 = $f + 20 | 0;
 $5 = (HEAP32[$3 >> 2] | 0) - $1 | 0;
 HEAP32[$iovs + 4 >> 2] = $5;
 HEAP32[$iovs + 8 >> 2] = $buf;
 HEAP32[$iovs + 12 >> 2] = $len;
 $9 = $f + 60 | 0;
 $10 = $f + 44 | 0;
 $iov$0 = $iovs;
 $iovcnt$0 = 2;
 $rem$0 = $5 + $len | 0;
 while (1) {
  if (!(HEAP32[840] | 0)) {
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$vararg_buffer3 + 4 >> 2] = $iov$0;
   HEAP32[$vararg_buffer3 + 8 >> 2] = $iovcnt$0;
   $cnt$0 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
  } else {
   _pthread_cleanup_push(144, $f | 0);
   HEAP32[$vararg_buffer >> 2] = HEAP32[$9 >> 2];
   HEAP32[$vararg_buffer + 4 >> 2] = $iov$0;
   HEAP32[$vararg_buffer + 8 >> 2] = $iovcnt$0;
   $15 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  if (($rem$0 | 0) == ($cnt$0 | 0)) {
   label = 6;
   break;
  }
  if (($cnt$0 | 0) < 0) {
   $iov$0$lcssa11 = $iov$0;
   $iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = $rem$0 - $cnt$0 | 0;
  $36 = HEAP32[$iov$0 + 4 >> 2] | 0;
  if ($cnt$0 >>> 0 > $36 >>> 0) {
   $38 = HEAP32[$10 >> 2] | 0;
   HEAP32[$0 >> 2] = $38;
   HEAP32[$3 >> 2] = $38;
   $49 = HEAP32[$iov$0 + 12 >> 2] | 0;
   $cnt$1 = $cnt$0 - $36 | 0;
   $iov$1 = $iov$0 + 8 | 0;
   $iovcnt$1 = $iovcnt$0 + -1 | 0;
  } else if (($iovcnt$0 | 0) == 2) {
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $cnt$0;
   $49 = $36;
   $cnt$1 = $cnt$0;
   $iov$1 = $iov$0;
   $iovcnt$1 = 2;
  } else {
   $49 = $36;
   $cnt$1 = $cnt$0;
   $iov$1 = $iov$0;
   $iovcnt$1 = $iovcnt$0;
  }
  HEAP32[$iov$1 >> 2] = (HEAP32[$iov$1 >> 2] | 0) + $cnt$1;
  HEAP32[$iov$1 + 4 >> 2] = $49 - $cnt$1;
  $iov$0 = $iov$1;
  $iovcnt$0 = $iovcnt$1;
  $rem$0 = $34;
 }
 if ((label | 0) == 6) {
  $20 = HEAP32[$10 >> 2] | 0;
  HEAP32[$f + 16 >> 2] = $20 + (HEAP32[$f + 48 >> 2] | 0);
  $25 = $20;
  HEAP32[$0 >> 2] = $25;
  HEAP32[$3 >> 2] = $25;
  $$0 = $len;
 } else if ((label | 0) == 8) {
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | 32;
  if (($iovcnt$0$lcssa12 | 0) == 2) $$0 = 0; else $$0 = $len - (HEAP32[$iov$0$lcssa11 + 4 >> 2] | 0) | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _wcsnrtombs($dst, $wcs, $wn, $n, $st) {
 $dst = $dst | 0;
 $wcs = $wcs | 0;
 $wn = $wn | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$019 = 0, $$02$$0 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$214 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $23 = 0, $24 = 0, $33 = 0, $38 = 0, $4 = 0, $7 = 0, $8 = 0, $buf = 0, $cnt$020 = 0, $cnt$1 = 0, $cnt$215 = 0, $cnt$215$lcssa = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $s$010 = 0, $s$021 = 0, $s$021$lcssa56 = 0, $s$1 = 0, $s$216 = 0, $ws = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $buf = sp + 8 | 0;
 $ws = sp;
 $0 = HEAP32[$wcs >> 2] | 0;
 HEAP32[$ws >> 2] = $0;
 $1 = ($dst | 0) != 0;
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $$cast = $0;
 L1 : do if (($n$ | 0) != 0 & ($0 | 0) != 0) {
  $$019 = $wn;
  $$0218 = $n$;
  $38 = $$cast;
  $cnt$020 = 0;
  $s$021 = $dst$;
  while (1) {
   $4 = $$019 >>> 0 >= $$0218 >>> 0;
   if (!($4 | $$019 >>> 0 > 32)) {
    $$1 = $$019;
    $$24 = $$0218;
    $17 = $38;
    $cnt$1 = $cnt$020;
    $s$010 = $s$021;
    break L1;
   }
   $$02$$0 = $4 ? $$0218 : $$019;
   $7 = $$019 - $$02$$0 | 0;
   $8 = _wcsrtombs($s$021, $ws, $$02$$0, 0) | 0;
   if (($8 | 0) == -1) {
    $$lcssa57 = $7;
    $s$021$lcssa56 = $s$021;
    break;
   }
   $10 = ($s$021 | 0) == ($buf | 0);
   $12 = $10 ? 0 : $8;
   $$13 = $$0218 - $12 | 0;
   $s$1 = $10 ? $s$021 : $s$021 + $8 | 0;
   $13 = $8 + $cnt$020 | 0;
   $14 = HEAP32[$ws >> 2] | 0;
   if (($$0218 | 0) != ($12 | 0) & ($14 | 0) != 0) {
    $$019 = $7;
    $$0218 = $$13;
    $38 = $14;
    $cnt$020 = $13;
    $s$021 = $s$1;
   } else {
    $$1 = $7;
    $$24 = $$13;
    $17 = $14;
    $cnt$1 = $13;
    $s$010 = $s$1;
    break L1;
   }
  }
  $$1 = $$lcssa57;
  $$24 = 0;
  $17 = HEAP32[$ws >> 2] | 0;
  $cnt$1 = -1;
  $s$010 = $s$021$lcssa56;
 } else {
  $$1 = $wn;
  $$24 = $n$;
  $17 = $$cast;
  $cnt$1 = 0;
  $s$010 = $dst$;
 } while (0);
 L8 : do if (!$17) $cnt$3 = $cnt$1; else if (($$24 | 0) != 0 & ($$1 | 0) != 0) {
  $$214 = $$1;
  $$313 = $$24;
  $23 = $17;
  $cnt$215 = $cnt$1;
  $s$216 = $s$010;
  while (1) {
   $24 = _wcrtomb($s$216, HEAP32[$23 >> 2] | 0, 0) | 0;
   if (($24 + 1 | 0) >>> 0 < 2) {
    $$lcssa = $24;
    $cnt$215$lcssa = $cnt$215;
    break;
   }
   $23 = (HEAP32[$ws >> 2] | 0) + 4 | 0;
   HEAP32[$ws >> 2] = $23;
   $$214 = $$214 + -1 | 0;
   $33 = $cnt$215 + 1 | 0;
   if (!(($$313 | 0) != ($24 | 0) & ($$214 | 0) != 0)) {
    $cnt$3 = $33;
    break L8;
   } else {
    $$313 = $$313 - $24 | 0;
    $cnt$215 = $33;
    $s$216 = $s$216 + $24 | 0;
   }
  }
  if (!$$lcssa) {
   HEAP32[$ws >> 2] = 0;
   $cnt$3 = $cnt$215$lcssa;
  } else $cnt$3 = -1;
 } else $cnt$3 = $cnt$1; while (0);
 if ($1) HEAP32[$wcs >> 2] = HEAP32[$ws >> 2];
 STACKTOP = sp;
 return $cnt$3 | 0;
}

function __ZN35EmscriptenBindingInitializer_solverC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 __embind_register_class(8, 16, 32, 0, 14910, 102, 14913, 0, 14913, 0, 14752, 14915, 137);
 __embind_register_class_constructor(8, 2, 3016, 14918, 56, 103);
 $0 = __Znwj(8) | 0;
 HEAP32[$0 >> 2] = 42;
 HEAP32[$0 + 4 >> 2] = 0;
 __embind_register_class_function(8, 14759, 4, 3024, 14922, 42, $0 | 0, 0);
 $1 = __Znwj(8) | 0;
 HEAP32[$1 >> 2] = 42;
 HEAP32[$1 + 4 >> 2] = 0;
 __embind_register_class_function(8, 14770, 3, 3040, 14928, 42, $1 | 0, 0);
 $2 = __Znwj(8) | 0;
 HEAP32[$2 >> 2] = 138;
 HEAP32[$2 + 4 >> 2] = 0;
 __embind_register_class_function(8, 14781, 2, 3052, 14933, 80, $2 | 0, 0);
 __embind_register_class(48, 56, 72, 0, 14910, 104, 14913, 0, 14913, 0, 14787, 14915, 139);
 __embind_register_class_constructor(48, 5, 3060, 14967, 42, 42);
 __embind_register_class_constructor(48, 4, 3080, 14974, 42, 42);
 $3 = __Znwj(8) | 0;
 HEAP32[$3 >> 2] = 81;
 HEAP32[$3 + 4 >> 2] = 0;
 __embind_register_class_function(48, 14792, 2, 3096, 14918, 57, $3 | 0, 0);
 __embind_register_class(88, 104, 120, 0, 14910, 105, 14913, 0, 14913, 0, 14798, 14915, 140);
 __embind_register_class_constructor(88, 1, 3104, 14910, 106, 42);
 $4 = __Znwj(8) | 0;
 HEAP32[$4 >> 2] = 42;
 HEAP32[$4 + 4 >> 2] = 0;
 $5 = __Znwj(8) | 0;
 HEAP32[$5 >> 2] = 42;
 HEAP32[$5 + 4 >> 2] = 0;
 __embind_register_class_property(88, 14806, 976, 15011, 43, $4 | 0, 976, 15015, 42, $5 | 0);
 $6 = __Znwj(8) | 0;
 HEAP32[$6 >> 2] = 43;
 HEAP32[$6 + 4 >> 2] = 0;
 $7 = __Znwj(8) | 0;
 HEAP32[$7 >> 2] = 43;
 HEAP32[$7 + 4 >> 2] = 0;
 __embind_register_class_property(88, 14817, 976, 15011, 43, $6 | 0, 976, 15015, 42, $7 | 0);
 $8 = __Znwj(8) | 0;
 HEAP32[$8 >> 2] = 44;
 HEAP32[$8 + 4 >> 2] = 0;
 $9 = __Znwj(8) | 0;
 HEAP32[$9 >> 2] = 44;
 HEAP32[$9 + 4 >> 2] = 0;
 __embind_register_class_property(88, 14835, 976, 15011, 43, $8 | 0, 976, 15015, 42, $9 | 0);
 __embind_register_function(14853, 4, 3080, 14974, 42, 43);
 __embind_register_class(96, 136, 152, 0, 14910, 107, 14913, 0, 14913, 0, 14869, 14915, 141);
 __embind_register_class_constructor(96, 3, 3108, 15043, 42, 58);
 $10 = __Znwj(8) | 0;
 HEAP32[$10 >> 2] = 45;
 HEAP32[$10 + 4 >> 2] = 0;
 __embind_register_class_function(96, 14878, 2, 3120, 15011, 44, $10 | 0, 0);
 $11 = __Znwj(8) | 0;
 HEAP32[$11 >> 2] = 82;
 HEAP32[$11 + 4 >> 2] = 0;
 __embind_register_class_function(96, 14792, 2, 3128, 14918, 59, $11 | 0, 0);
 $12 = __Znwj(8) | 0;
 HEAP32[$12 >> 2] = 142;
 HEAP32[$12 + 4 >> 2] = 0;
 __embind_register_class_function(96, 14781, 2, 3136, 14933, 83, $12 | 0, 0);
 return;
}

function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $20 = 0, $25 = 0, $27 = 0, $34 = 0, $35 = 0, $4 = 0, $47 = 0, $50 = 0, label = 0;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $1 = ($0 | 0) == ($__a | 0);
 do if ($1) {
  $4 = (HEAP32[$__atoms + 96 >> 2] | 0) == ($__ct | 0);
  if (!$4) if ((HEAP32[$__atoms + 100 >> 2] | 0) != ($__ct | 0)) {
   label = 5;
   break;
  }
  HEAP32[$__a_end >> 2] = $__a + 1;
  HEAP8[$__a >> 0] = $4 ? 43 : 45;
  HEAP32[$__dc >> 2] = 0;
  $$1 = 0;
 } else label = 5; while (0);
 L6 : do if ((label | 0) == 5) {
  $10 = HEAP8[$__grouping >> 0] | 0;
  if (($__ct | 0) == ($__thousands_sep | 0) ? ((($10 & 1) == 0 ? ($10 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) != 0 : 0) {
   $20 = HEAP32[$__g_end >> 2] | 0;
   if (($20 - $__g | 0) >= 160) {
    $$1 = 0;
    break;
   }
   $25 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $20 + 4;
   HEAP32[$20 >> 2] = $25;
   HEAP32[$__dc >> 2] = 0;
   $$1 = 0;
   break;
  }
  $27 = $__atoms + 104 | 0;
  $$0$i = $__atoms;
  while (1) {
   if (($$0$i | 0) == ($27 | 0)) {
    $$0$lcssa$i = $27;
    break;
   }
   if ((HEAP32[$$0$i >> 2] | 0) == ($__ct | 0)) {
    $$0$lcssa$i = $$0$i;
    break;
   }
   $$0$i = $$0$i + 4 | 0;
  }
  $34 = $$0$lcssa$i - $__atoms | 0;
  $35 = $34 >> 2;
  if (($34 | 0) > 92) $$1 = -1; else {
   switch ($__base | 0) {
   case 10:
   case 8:
    {
     if (($35 | 0) >= ($__base | 0)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if (($34 | 0) >= 88) {
      if ($1) {
       $$1 = -1;
       break L6;
      }
      if (($0 - $__a | 0) >= 3) {
       $$1 = -1;
       break L6;
      }
      if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$__dc >> 2] = 0;
      $47 = HEAP8[22824 + $35 >> 0] | 0;
      HEAP32[$__a_end >> 2] = $0 + 1;
      HEAP8[$0 >> 0] = $47;
      $$1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   $50 = HEAP8[22824 + $35 >> 0] | 0;
   HEAP32[$__a_end >> 2] = $0 + 1;
   HEAP8[$0 >> 0] = $50;
   HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
   $$1 = 0;
  }
 } while (0);
 return $$1 | 0;
}

function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $20 = 0, $25 = 0, $27 = 0, $34 = 0, $4 = 0, $46 = 0, $49 = 0, label = 0;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $1 = ($0 | 0) == ($__a | 0);
 do if ($1) {
  $4 = (HEAP8[$__atoms + 24 >> 0] | 0) == $__ct << 24 >> 24;
  if (!$4) if ((HEAP8[$__atoms + 25 >> 0] | 0) != $__ct << 24 >> 24) {
   label = 5;
   break;
  }
  HEAP32[$__a_end >> 2] = $__a + 1;
  HEAP8[$__a >> 0] = $4 ? 43 : 45;
  HEAP32[$__dc >> 2] = 0;
  $$1 = 0;
 } else label = 5; while (0);
 L6 : do if ((label | 0) == 5) {
  $10 = HEAP8[$__grouping >> 0] | 0;
  if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24 ? ((($10 & 1) == 0 ? ($10 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) != 0 : 0) {
   $20 = HEAP32[$__g_end >> 2] | 0;
   if (($20 - $__g | 0) >= 160) {
    $$1 = 0;
    break;
   }
   $25 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $20 + 4;
   HEAP32[$20 >> 2] = $25;
   HEAP32[$__dc >> 2] = 0;
   $$1 = 0;
   break;
  }
  $27 = $__atoms + 26 | 0;
  $$0$i = $__atoms;
  while (1) {
   if (($$0$i | 0) == ($27 | 0)) {
    $$0$lcssa$i = $27;
    break;
   }
   if ((HEAP8[$$0$i >> 0] | 0) == $__ct << 24 >> 24) {
    $$0$lcssa$i = $$0$i;
    break;
   }
   $$0$i = $$0$i + 1 | 0;
  }
  $34 = $$0$lcssa$i - $__atoms | 0;
  if (($34 | 0) > 23) $$1 = -1; else {
   switch ($__base | 0) {
   case 10:
   case 8:
    {
     if (($34 | 0) >= ($__base | 0)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if (($34 | 0) >= 22) {
      if ($1) {
       $$1 = -1;
       break L6;
      }
      if (($0 - $__a | 0) >= 3) {
       $$1 = -1;
       break L6;
      }
      if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$__dc >> 2] = 0;
      $46 = HEAP8[22824 + $34 >> 0] | 0;
      HEAP32[$__a_end >> 2] = $0 + 1;
      HEAP8[$0 >> 0] = $46;
      $$1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   $49 = HEAP8[22824 + $34 >> 0] | 0;
   HEAP32[$__a_end >> 2] = $0 + 1;
   HEAP8[$0 >> 0] = $49;
   HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
   $$1 = 0;
  }
 } while (0);
 return $$1 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $__lv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy$2 = sp + 48 | 0;
 $$byval_copy = sp + 24 | 0;
 $__lv = sp + 16 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  HEAP32[$__lv >> 2] = -1;
  $11 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
  HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  HEAP32[$$byval_copy$2 >> 2] = HEAP32[$1 >> 2];
  $14 = FUNCTION_TABLE_iiiiiii[$11 & 127]($this, $$byval_copy, $$byval_copy$2, $__iob, $__err, $__lv) | 0;
  HEAP32[$__b >> 2] = $14;
  switch (HEAP32[$__lv >> 2] | 0) {
  case 0:
   {
    HEAP8[$__v >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[$__v >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[$__v >> 0] = 1;
    HEAP32[$__err >> 2] = 4;
   }
  }
  $$sroa$01$0 = $14;
 } else {
  $16 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
  HEAP32[$2 >> 2] = $16;
  $17 = __ZNKSt3__16locale9use_facetERNS0_2idE($2, 10384) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv($16) | 0;
  $18 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
  HEAP32[$3 >> 2] = $18;
  $19 = __ZNKSt3__16locale9use_facetERNS0_2idE($3, 10540) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv($18) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 24 >> 2] & 127]($$byval_copy, $19);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 28 >> 2] & 127]($$byval_copy + 12 | 0, $19);
  HEAP32[$4 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy$2 >> 2] = HEAP32[$4 >> 2];
  $31 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy$2, $$byval_copy, $$byval_copy + 24 | 0, $17, $__err, 1) | 0) == ($$byval_copy | 0) & 1;
  HEAP8[$__v >> 0] = $31;
  $32 = HEAP32[$__b >> 2] | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy + 12 | 0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy);
  $$sroa$01$0 = $32;
 }
 STACKTOP = sp;
 return $$sroa$01$0 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $__lv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy$2 = sp + 48 | 0;
 $$byval_copy = sp + 24 | 0;
 $__lv = sp + 16 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  HEAP32[$__lv >> 2] = -1;
  $11 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
  HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  HEAP32[$$byval_copy$2 >> 2] = HEAP32[$1 >> 2];
  $14 = FUNCTION_TABLE_iiiiiii[$11 & 127]($this, $$byval_copy, $$byval_copy$2, $__iob, $__err, $__lv) | 0;
  HEAP32[$__b >> 2] = $14;
  switch (HEAP32[$__lv >> 2] | 0) {
  case 0:
   {
    HEAP8[$__v >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[$__v >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[$__v >> 0] = 1;
    HEAP32[$__err >> 2] = 4;
   }
  }
  $$sroa$01$0 = $14;
 } else {
  $16 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
  HEAP32[$2 >> 2] = $16;
  $17 = __ZNKSt3__16locale9use_facetERNS0_2idE($2, 10392) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv($16) | 0;
  $18 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
  HEAP32[$3 >> 2] = $18;
  $19 = __ZNKSt3__16locale9use_facetERNS0_2idE($3, 10532) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv($18) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 24 >> 2] & 127]($$byval_copy, $19);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 28 >> 2] & 127]($$byval_copy + 12 | 0, $19);
  HEAP32[$4 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy$2 >> 2] = HEAP32[$4 >> 2];
  $31 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy$2, $$byval_copy, $$byval_copy + 24 | 0, $17, $__err, 1) | 0) == ($$byval_copy | 0) & 1;
  HEAP8[$__v >> 0] = $31;
  $32 = HEAP32[$__b >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy + 12 | 0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy);
  $$sroa$01$0 = $32;
 }
 STACKTOP = sp;
 return $$sroa$01$0 | 0;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $26 = 0, $27 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0;
 $0 = $c & 255;
 $4 = ($n | 0) != 0;
 L1 : do if ($4 & ($src & 3 | 0) != 0) {
  $5 = $c & 255;
  $$019 = $n;
  $s$020 = $src;
  while (1) {
   if ((HEAP8[$s$020 >> 0] | 0) == $5 << 24 >> 24) {
    $$0$lcssa44 = $$019;
    $s$0$lcssa43 = $s$020;
    label = 6;
    break L1;
   }
   $8 = $s$020 + 1 | 0;
   $9 = $$019 + -1 | 0;
   $13 = ($9 | 0) != 0;
   if ($13 & ($8 & 3 | 0) != 0) {
    $$019 = $9;
    $s$020 = $8;
   } else {
    $$0$lcssa = $9;
    $$lcssa = $13;
    $s$0$lcssa = $8;
    label = 5;
    break;
   }
  }
 } else {
  $$0$lcssa = $n;
  $$lcssa = $4;
  $s$0$lcssa = $src;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($$lcssa) {
  $$0$lcssa44 = $$0$lcssa;
  $s$0$lcssa43 = $s$0$lcssa;
  label = 6;
 } else {
  $$3 = 0;
  $s$2 = $s$0$lcssa;
 }
 L8 : do if ((label | 0) == 6) {
  $15 = $c & 255;
  if ((HEAP8[$s$0$lcssa43 >> 0] | 0) == $15 << 24 >> 24) {
   $$3 = $$0$lcssa44;
   $s$2 = $s$0$lcssa43;
  } else {
   $17 = Math_imul($0, 16843009) | 0;
   L11 : do if ($$0$lcssa44 >>> 0 > 3) {
    $$110 = $$0$lcssa44;
    $w$011 = $s$0$lcssa43;
    while (1) {
     $20 = HEAP32[$w$011 >> 2] ^ $17;
     if (($20 & -2139062144 ^ -2139062144) & $20 + -16843009) {
      $$110$lcssa = $$110;
      $w$011$lcssa = $w$011;
      break;
     }
     $26 = $w$011 + 4 | 0;
     $27 = $$110 + -4 | 0;
     if ($27 >>> 0 > 3) {
      $$110 = $27;
      $w$011 = $26;
     } else {
      $$1$lcssa = $27;
      $w$0$lcssa = $26;
      label = 11;
      break L11;
     }
    }
    $$24 = $$110$lcssa;
    $s$15 = $w$011$lcssa;
   } else {
    $$1$lcssa = $$0$lcssa44;
    $w$0$lcssa = $s$0$lcssa43;
    label = 11;
   } while (0);
   if ((label | 0) == 11) if (!$$1$lcssa) {
    $$3 = 0;
    $s$2 = $w$0$lcssa;
    break;
   } else {
    $$24 = $$1$lcssa;
    $s$15 = $w$0$lcssa;
   }
   while (1) {
    if ((HEAP8[$s$15 >> 0] | 0) == $15 << 24 >> 24) {
     $$3 = $$24;
     $s$2 = $s$15;
     break L8;
    }
    $32 = $s$15 + 1 | 0;
    $$24 = $$24 + -1 | 0;
    if (!$$24) {
     $$3 = 0;
     $s$2 = $32;
     break;
    } else $s$15 = $32;
   }
  }
 } while (0);
 return (($$3 | 0) != 0 ? $s$2 : 0) | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $23 = 0, $24 = 0, $26 = 0, $33 = 0, $44 = 0, $6 = 0, $is_dst_type_derived_from_static_type$0$off02 = 0, $is_dst_type_derived_from_static_type$0$off03 = 0, label = 0;
 do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
   $6 = $info + 28 | 0;
   if ((HEAP32[$6 >> 2] | 0) != 1) HEAP32[$6 >> 2] = $path_below;
  }
 } else {
  if (($this | 0) != (HEAP32[$info >> 2] | 0)) {
   $44 = HEAP32[$this + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$44 >> 2] | 0) + 24 >> 2] & 63]($44, $info, $current_ptr, $path_below, $use_strcmp);
   break;
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $14 = $info + 20 | 0;
   if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $20 = $info + 44 | 0;
    if ((HEAP32[$20 >> 2] | 0) == 4) break;
    $23 = $info + 52 | 0;
    HEAP8[$23 >> 0] = 0;
    $24 = $info + 53 | 0;
    HEAP8[$24 >> 0] = 0;
    $26 = HEAP32[$this + 8 >> 2] | 0;
    FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$26 >> 2] | 0) + 20 >> 2] & 63]($26, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
    if (!(HEAP8[$24 >> 0] | 0)) {
     $is_dst_type_derived_from_static_type$0$off02 = 0;
     label = 13;
    } else if (!(HEAP8[$23 >> 0] | 0)) {
     $is_dst_type_derived_from_static_type$0$off02 = 1;
     label = 13;
    } else $is_dst_type_derived_from_static_type$0$off03 = 1;
    if ((label | 0) == 13) {
     HEAP32[$14 >> 2] = $current_ptr;
     $33 = $info + 40 | 0;
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1;
     if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) {
      HEAP8[$info + 54 >> 0] = 1;
      $is_dst_type_derived_from_static_type$0$off03 = $is_dst_type_derived_from_static_type$0$off02;
     } else $is_dst_type_derived_from_static_type$0$off03 = $is_dst_type_derived_from_static_type$0$off02; else $is_dst_type_derived_from_static_type$0$off03 = $is_dst_type_derived_from_static_type$0$off02;
    }
    HEAP32[$20 >> 2] = $is_dst_type_derived_from_static_type$0$off03 ? 3 : 4;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZN6Vector4LerpEddRS_dS0_($agg$result, $t, $t0, $v0, $t1, $v1) {
 $agg$result = $agg$result | 0;
 $t = +$t;
 $t0 = +$t0;
 $v0 = $v0 | 0;
 $t1 = +$t1;
 $v1 = $v1 | 0;
 var $0 = 0.0, $12 = 0, $16 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $4 = 0, $41 = 0.0, $43 = 0, $49 = 0, $5 = 0, $6 = 0, $i$01$i = 0, $i$01$i$12 = 0, $i$01$i$18 = 0, $i$01$i$7 = 0, $i$01$i$i = 0, $i$01$i$i$15 = 0, $i$01$i$i$4 = 0;
 $0 = $t1 - $t;
 $2 = HEAP32[$v0 + 4 >> 2] | 0;
 $4 = __Znaj($2 >>> 0 > 536870911 ? -1 : $2 << 3) | 0;
 $5 = ($2 | 0) > 0;
 if ($5) {
  $6 = HEAP32[$v0 >> 2] | 0;
  $i$01$i$i = 0;
  do {
   HEAPF64[$4 + ($i$01$i$i << 3) >> 3] = +HEAPF64[$6 + ($i$01$i$i << 3) >> 3];
   $i$01$i$i = $i$01$i$i + 1 | 0;
  } while (($i$01$i$i | 0) < ($2 | 0));
  $i$01$i = 0;
  do {
   $12 = $4 + ($i$01$i << 3) | 0;
   HEAPF64[$12 >> 3] = $0 * +HEAPF64[$12 >> 3];
   $i$01$i = $i$01$i + 1 | 0;
  } while (($i$01$i | 0) != ($2 | 0));
 }
 $16 = $t - $t0;
 $18 = HEAP32[$v1 + 4 >> 2] | 0;
 $19 = $18 >>> 0 > 536870911 ? -1 : $18 << 3;
 $20 = __Znaj($19) | 0;
 $21 = ($18 | 0) > 0;
 if ($21) {
  $22 = HEAP32[$v1 >> 2] | 0;
  $i$01$i$i$4 = 0;
  do {
   HEAPF64[$20 + ($i$01$i$i$4 << 3) >> 3] = +HEAPF64[$22 + ($i$01$i$i$4 << 3) >> 3];
   $i$01$i$i$4 = $i$01$i$i$4 + 1 | 0;
  } while (($i$01$i$i$4 | 0) < ($18 | 0));
  $i$01$i$7 = 0;
  do {
   $28 = $20 + ($i$01$i$7 << 3) | 0;
   HEAPF64[$28 >> 3] = $16 * +HEAPF64[$28 >> 3];
   $i$01$i$7 = $i$01$i$7 + 1 | 0;
  } while (($i$01$i$7 | 0) != ($18 | 0));
 }
 $32 = __Znaj($19) | 0;
 if ($21) _memset($32 | 0, 0, $18 << 3 | 0) | 0;
 if ($5) {
  $i$01$i$12 = 0;
  do {
   HEAPF64[$32 + ($i$01$i$12 << 3) >> 3] = +HEAPF64[$4 + ($i$01$i$12 << 3) >> 3] + +HEAPF64[$20 + ($i$01$i$12 << 3) >> 3];
   $i$01$i$12 = $i$01$i$12 + 1 | 0;
  } while (($i$01$i$12 | 0) != ($2 | 0));
 }
 $41 = $t1 - $t0;
 HEAP32[$agg$result + 4 >> 2] = $18;
 $43 = __Znaj($19) | 0;
 HEAP32[$agg$result >> 2] = $43;
 if ($21) $i$01$i$i$15 = 0; else {
  __ZdaPv($32);
  __ZdaPv($20);
  __ZdaPv($4);
  return;
 }
 do {
  HEAPF64[$43 + ($i$01$i$i$15 << 3) >> 3] = +HEAPF64[$32 + ($i$01$i$i$15 << 3) >> 3];
  $i$01$i$i$15 = $i$01$i$i$15 + 1 | 0;
 } while (($i$01$i$i$15 | 0) < ($18 | 0));
 $i$01$i$18 = 0;
 do {
  $49 = $43 + ($i$01$i$18 << 3) | 0;
  HEAPF64[$49 >> 3] = +HEAPF64[$49 >> 3] / $41;
  $i$01$i$18 = $i$01$i$18 + 1 | 0;
 } while (($i$01$i$18 | 0) != ($18 | 0));
 __ZdaPv($32);
 __ZdaPv($20);
 __ZdaPv($4);
 return;
}

function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $18 = 0, $2 = 0, $31 = 0, $41 = 0, $8 = 0;
 $0 = HEAP32[854] | 0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(8376, $0, 8432);
 HEAP32[1924] = 9124;
 HEAP32[1926] = 9144;
 HEAP32[1925] = 0;
 __ZNSt3__18ios_base4initEPv(7704, 8376);
 HEAP32[1944] = 0;
 HEAP32[1945] = -1;
 $1 = HEAP32[851] | 0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(8480, $1, 8440);
 HEAP32[1946] = 9204;
 HEAP32[1947] = 9224;
 __ZNSt3__18ios_base4initEPv(7788, 8480);
 HEAP32[1965] = 0;
 HEAP32[1966] = -1;
 $2 = HEAP32[853] | 0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(8528, $2, 8448);
 HEAP32[1967] = 9204;
 HEAP32[1968] = 9224;
 __ZNSt3__18ios_base4initEPv(7872, 8528);
 HEAP32[1986] = 0;
 HEAP32[1987] = -1;
 $8 = HEAP32[7868 + (HEAP32[(HEAP32[1967] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[1988] = 9204;
 HEAP32[1989] = 9224;
 __ZNSt3__18ios_base4initEPv(7956, $8);
 HEAP32[2007] = 0;
 HEAP32[2008] = -1;
 HEAP32[7696 + (HEAP32[(HEAP32[1924] | 0) + -12 >> 2] | 0) + 72 >> 2] = 7784;
 $18 = 7868 + (HEAP32[(HEAP32[1967] | 0) + -12 >> 2] | 0) + 4 | 0;
 HEAP32[$18 >> 2] = HEAP32[$18 >> 2] | 8192;
 HEAP32[7868 + (HEAP32[(HEAP32[1967] | 0) + -12 >> 2] | 0) + 72 >> 2] = 7784;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(8576, $0, 8456);
 HEAP32[2009] = 9164;
 HEAP32[2011] = 9184;
 HEAP32[2010] = 0;
 __ZNSt3__18ios_base4initEPv(8044, 8576);
 HEAP32[2029] = 0;
 HEAP32[2030] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(8632, $1, 8464);
 HEAP32[2031] = 9244;
 HEAP32[2032] = 9264;
 __ZNSt3__18ios_base4initEPv(8128, 8632);
 HEAP32[2050] = 0;
 HEAP32[2051] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(8680, $2, 8472);
 HEAP32[2052] = 9244;
 HEAP32[2053] = 9264;
 __ZNSt3__18ios_base4initEPv(8212, 8680);
 HEAP32[2071] = 0;
 HEAP32[2072] = -1;
 $31 = HEAP32[8208 + (HEAP32[(HEAP32[2052] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[2073] = 9244;
 HEAP32[2074] = 9264;
 __ZNSt3__18ios_base4initEPv(8296, $31);
 HEAP32[2092] = 0;
 HEAP32[2093] = -1;
 HEAP32[8036 + (HEAP32[(HEAP32[2009] | 0) + -12 >> 2] | 0) + 72 >> 2] = 8124;
 $41 = 8208 + (HEAP32[(HEAP32[2052] | 0) + -12 >> 2] | 0) + 4 | 0;
 HEAP32[$41 >> 2] = HEAP32[$41 >> 2] | 8192;
 HEAP32[8208 + (HEAP32[(HEAP32[2052] | 0) + -12 >> 2] | 0) + 72 >> 2] = 8124;
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$byval_copy = 0, $$pre$phi3Z2D = 0, $$pre1 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  $8 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  $$sroa$0$0 = FUNCTION_TABLE_iiiiii[$8 & 63]($this, $$byval_copy, $__iob, $__fl, $__v & 1) | 0;
 } else {
  $12 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
  HEAP32[$1 >> 2] = $12;
  $13 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 10540) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv($12) | 0;
  $14 = HEAP32[$13 >> 2] | 0;
  if ($__v) FUNCTION_TABLE_vii[HEAP32[$14 + 24 >> 2] & 127]($$byval_copy, $13); else FUNCTION_TABLE_vii[HEAP32[$14 + 28 >> 2] & 127]($$byval_copy, $13);
  $19 = HEAP8[$$byval_copy >> 0] | 0;
  $21 = ($19 & 1) == 0;
  $24 = $$byval_copy + 4 | 0;
  $$pre1 = $$byval_copy + 8 | 0;
  $$pre$phi3Z2D = $21 ? $24 : $$byval_copy + 4 | 0;
  $26 = $19;
  $34 = $21 ? $24 : HEAP32[$$byval_copy + 8 >> 2] | 0;
  while (1) {
   $27 = ($26 & 1) == 0;
   if (($34 | 0) == (($27 ? $$pre$phi3Z2D : HEAP32[$$pre1 >> 2] | 0) + (($27 ? ($26 & 255) >>> 1 : HEAP32[$$pre$phi3Z2D >> 2] | 0) << 2) | 0)) break;
   $37 = HEAP32[$34 >> 2] | 0;
   $38 = HEAP32[$__s >> 2] | 0;
   if ($38) {
    $40 = $38 + 24 | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    if (($41 | 0) == (HEAP32[$38 + 28 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$38 >> 2] | 0) + 52 >> 2] & 63]($38, $37) | 0; else {
     HEAP32[$40 >> 2] = $41 + 4;
     HEAP32[$41 >> 2] = $37;
     $$0$i$i = $37;
    }
    if (($$0$i$i | 0) == -1) HEAP32[$__s >> 2] = 0;
   }
   $26 = HEAP8[$$byval_copy >> 0] | 0;
   $34 = $34 + 4 | 0;
  }
  $36 = HEAP32[$__s >> 2] | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy);
  $$sroa$0$0 = $36;
 }
 STACKTOP = sp;
 return $$sroa$0$0 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$pre$phi5Z2D = 0, $$pre1 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $21 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  $8 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  $$sroa$0$0 = FUNCTION_TABLE_iiiiii[$8 & 63]($this, $$byval_copy, $__iob, $__fl, $__v & 1) | 0;
 } else {
  $12 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
  HEAP32[$1 >> 2] = $12;
  $13 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 10532) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv($12) | 0;
  $14 = HEAP32[$13 >> 2] | 0;
  if ($__v) FUNCTION_TABLE_vii[HEAP32[$14 + 24 >> 2] & 127]($$byval_copy, $13); else FUNCTION_TABLE_vii[HEAP32[$14 + 28 >> 2] & 127]($$byval_copy, $13);
  $19 = HEAP8[$$byval_copy >> 0] | 0;
  $21 = ($19 & 1) == 0;
  $24 = $$byval_copy + 1 | 0;
  $$pre1 = $$byval_copy + 8 | 0;
  $$pre$phi5Z2D = $21 ? $24 : $$byval_copy + 1 | 0;
  $25 = $$byval_copy + 4 | 0;
  $27 = $19;
  $35 = $21 ? $24 : HEAP32[$$byval_copy + 8 >> 2] | 0;
  while (1) {
   $28 = ($27 & 1) == 0;
   if (($35 | 0) == (($28 ? $$pre$phi5Z2D : HEAP32[$$pre1 >> 2] | 0) + ($28 ? ($27 & 255) >>> 1 : HEAP32[$25 >> 2] | 0) | 0)) break;
   $38 = HEAP8[$35 >> 0] | 0;
   $39 = HEAP32[$__s >> 2] | 0;
   do if ($39) {
    $41 = $39 + 24 | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    if (($42 | 0) != (HEAP32[$39 + 28 >> 2] | 0)) {
     HEAP32[$41 >> 2] = $42 + 1;
     HEAP8[$42 >> 0] = $38;
     break;
    }
    if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$39 >> 2] | 0) + 52 >> 2] & 63]($39, $38 & 255) | 0) == -1) HEAP32[$__s >> 2] = 0;
   } while (0);
   $27 = HEAP8[$$byval_copy >> 0] | 0;
   $35 = $35 + 1 | 0;
  }
  $37 = HEAP32[$__s >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy);
  $$sroa$0$0 = $37;
 }
 STACKTOP = sp;
 return $$sroa$0$0 | 0;
}

function _mbrtowc($wc, $src, $n, $st) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $1 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $30 = 0, $40 = 0, $7 = 0, $8 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $dummy = sp;
 $$st = ($st | 0) == 0 ? 3768 : $st;
 $1 = HEAP32[$$st >> 2] | 0;
 L1 : do if (!$src) if (!$1) $$0 = 0; else label = 15; else {
  $dummy$wc = ($wc | 0) == 0 ? $dummy : $wc;
  if (!$n) $$0 = -2; else {
   if (!$1) {
    $7 = HEAP8[$src >> 0] | 0;
    $8 = $7 & 255;
    if ($7 << 24 >> 24 > -1) {
     HEAP32[$dummy$wc >> 2] = $8;
     $$0 = $7 << 24 >> 24 != 0 & 1;
     break;
    }
    $12 = $8 + -194 | 0;
    if ($12 >>> 0 > 50) {
     label = 15;
     break;
    }
    $16 = HEAP32[3420 + ($12 << 2) >> 2] | 0;
    $17 = $n + -1 | 0;
    if (!$17) $c$2 = $16; else {
     $$024 = $17;
     $c$05 = $16;
     $s$06 = $src + 1 | 0;
     label = 9;
    }
   } else {
    $$024 = $n;
    $c$05 = $1;
    $s$06 = $src;
    label = 9;
   }
   L11 : do if ((label | 0) == 9) {
    $19 = HEAP8[$s$06 >> 0] | 0;
    $21 = ($19 & 255) >>> 3;
    if (($21 + -16 | $21 + ($c$05 >> 26)) >>> 0 > 7) {
     label = 15;
     break L1;
    } else {
     $$1 = $$024;
     $30 = $19;
     $c$1 = $c$05;
     $s$1 = $s$06;
    }
    while (1) {
     $s$1 = $s$1 + 1 | 0;
     $c$1 = ($30 & 255) + -128 | $c$1 << 6;
     $$1 = $$1 + -1 | 0;
     if (($c$1 | 0) >= 0) {
      $$lcssa = $c$1;
      $$lcssa35 = $$1;
      break;
     }
     if (!$$1) {
      $c$2 = $c$1;
      break L11;
     }
     $30 = HEAP8[$s$1 >> 0] | 0;
     if (($30 & -64) << 24 >> 24 != -128) {
      label = 15;
      break L1;
     }
    }
    HEAP32[$$st >> 2] = 0;
    HEAP32[$dummy$wc >> 2] = $$lcssa;
    $$0 = $n - $$lcssa35 | 0;
    break L1;
   } while (0);
   HEAP32[$$st >> 2] = $c$2;
   $$0 = -2;
  }
 } while (0);
 if ((label | 0) == 15) {
  HEAP32[$$st >> 2] = 0;
  $40 = ___errno_location() | 0;
  HEAP32[$40 >> 2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this | 0;
 var $9 = 0, $__i$0$i$i$i = 0;
 if (!(HEAP8[2656] | 0)) if (___cxa_guard_acquire(2656) | 0) {
  if (!(HEAP8[2664] | 0)) if (___cxa_guard_acquire(2664) | 0) {
   $9 = 11384;
   do {
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$9 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    $9 = $9 + 12 | 0;
   } while (($9 | 0) != 11552);
   ___cxa_atexit(151, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2664);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11384, 11552) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11396, 11580) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11408, 11608) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11420, 11640) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11432, 11680) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11444, 11716) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11456, 11744) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11468, 11780) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11480, 11796) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11492, 11812) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11504, 11828) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11516, 11844) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11528, 11860) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11540, 11876) | 0;
  HEAP32[2973] = 11384;
  ___cxa_guard_release(2656);
 }
 return HEAP32[2973] | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this | 0;
 var $9 = 0, $__i$0$i$i$i = 0;
 if (!(HEAP8[2640] | 0)) if (___cxa_guard_acquire(2640) | 0) {
  if (!(HEAP8[2648] | 0)) if (___cxa_guard_acquire(2648) | 0) {
   $9 = 11212;
   do {
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$9 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    $9 = $9 + 12 | 0;
   } while (($9 | 0) != 11380);
   ___cxa_atexit(150, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2648);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11212, 24324) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11224, 24331) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11236, 24338) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11248, 24346) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11260, 24356) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11272, 24365) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11284, 24372) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11296, 24381) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11308, 24385) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11320, 24389) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11332, 24393) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11344, 24397) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11356, 24401) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11368, 24405) | 0;
  HEAP32[2845] = 11212;
  ___cxa_guard_release(2640);
 }
 return HEAP32[2845] | 0;
}

function __ZNK6MatrixplERKS_($agg$result, $this, $obj) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $obj = $obj | 0;
 var $1 = 0, $11 = 0, $13 = 0, $16 = 0, $18 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02$i = 0, $i$02$i$us = 0, $i$02$us = 0, $j$01$i$us = 0, $j$01$us = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 HEAP32[$agg$result + 4 >> 2] = $1;
 $4 = HEAP32[$this + 8 >> 2] | 0;
 HEAP32[$agg$result + 8 >> 2] = $4;
 $7 = __Znaj($1 >>> 0 > 1073741823 ? -1 : $1 << 2) | 0;
 HEAP32[$agg$result >> 2] = $7;
 $8 = ($1 | 0) > 0;
 if (!$8) return;
 $9 = $4 >>> 0 > 536870911 ? -1 : $4 << 3;
 if (($4 | 0) > 0) {
  $13 = $7;
  $i$02$i$us = 0;
  while (1) {
   $11 = __Znaj($9) | 0;
   HEAP32[$13 + ($i$02$i$us << 2) >> 2] = $11;
   $16 = HEAP32[(HEAP32[$this >> 2] | 0) + ($i$02$i$us << 2) >> 2] | 0;
   $18 = HEAP32[$7 + ($i$02$i$us << 2) >> 2] | 0;
   $j$01$i$us = 0;
   do {
    HEAPF64[$18 + ($j$01$i$us << 3) >> 3] = +HEAPF64[$16 + ($j$01$i$us << 3) >> 3];
    $j$01$i$us = $j$01$i$us + 1 | 0;
   } while (($j$01$i$us | 0) != ($4 | 0));
   $23 = $i$02$i$us + 1 | 0;
   if (($23 | 0) < ($1 | 0)) {
    $13 = $7;
    $i$02$i$us = $23;
   } else break;
  }
 } else {
  $27 = $7;
  $i$02$i = 0;
  while (1) {
   $25 = __Znaj($9) | 0;
   HEAP32[$27 + ($i$02$i << 2) >> 2] = $25;
   $28 = $i$02$i + 1 | 0;
   if (($28 | 0) < ($1 | 0)) {
    $27 = $7;
    $i$02$i = $28;
   } else break;
  }
 }
 if (!$8) return;
 $31 = HEAP32[$obj >> 2] | 0;
 if (($4 | 0) > 0) $i$02$us = 0; else return;
 do {
  $35 = HEAP32[$31 + ($i$02$us << 2) >> 2] | 0;
  $38 = HEAP32[$7 + ($i$02$us << 2) >> 2] | 0;
  $j$01$us = 0;
  do {
   $37 = $38 + ($j$01$us << 3) | 0;
   HEAPF64[$37 >> 3] = +HEAPF64[$35 + ($j$01$us << 3) >> 3] + +HEAPF64[$37 >> 3];
   $j$01$us = $j$01$us + 1 | 0;
  } while (($j$01$us | 0) < ($4 | 0));
  $i$02$us = $i$02$us + 1 | 0;
 } while (($i$02$us | 0) < ($1 | 0));
 return;
}

function __ZNK6MatrixmiERKS_($agg$result, $this, $obj) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $obj = $obj | 0;
 var $1 = 0, $11 = 0, $13 = 0, $16 = 0, $18 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02$i = 0, $i$02$i$us = 0, $i$02$us = 0, $j$01$i$us = 0, $j$01$us = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 HEAP32[$agg$result + 4 >> 2] = $1;
 $4 = HEAP32[$this + 8 >> 2] | 0;
 HEAP32[$agg$result + 8 >> 2] = $4;
 $7 = __Znaj($1 >>> 0 > 1073741823 ? -1 : $1 << 2) | 0;
 HEAP32[$agg$result >> 2] = $7;
 $8 = ($1 | 0) > 0;
 if (!$8) return;
 $9 = $4 >>> 0 > 536870911 ? -1 : $4 << 3;
 if (($4 | 0) > 0) {
  $13 = $7;
  $i$02$i$us = 0;
  while (1) {
   $11 = __Znaj($9) | 0;
   HEAP32[$13 + ($i$02$i$us << 2) >> 2] = $11;
   $16 = HEAP32[(HEAP32[$this >> 2] | 0) + ($i$02$i$us << 2) >> 2] | 0;
   $18 = HEAP32[$7 + ($i$02$i$us << 2) >> 2] | 0;
   $j$01$i$us = 0;
   do {
    HEAPF64[$18 + ($j$01$i$us << 3) >> 3] = +HEAPF64[$16 + ($j$01$i$us << 3) >> 3];
    $j$01$i$us = $j$01$i$us + 1 | 0;
   } while (($j$01$i$us | 0) != ($4 | 0));
   $23 = $i$02$i$us + 1 | 0;
   if (($23 | 0) < ($1 | 0)) {
    $13 = $7;
    $i$02$i$us = $23;
   } else break;
  }
 } else {
  $27 = $7;
  $i$02$i = 0;
  while (1) {
   $25 = __Znaj($9) | 0;
   HEAP32[$27 + ($i$02$i << 2) >> 2] = $25;
   $28 = $i$02$i + 1 | 0;
   if (($28 | 0) < ($1 | 0)) {
    $27 = $7;
    $i$02$i = $28;
   } else break;
  }
 }
 if (!$8) return;
 $31 = HEAP32[$obj >> 2] | 0;
 if (($4 | 0) > 0) $i$02$us = 0; else return;
 do {
  $35 = HEAP32[$31 + ($i$02$us << 2) >> 2] | 0;
  $38 = HEAP32[$7 + ($i$02$us << 2) >> 2] | 0;
  $j$01$us = 0;
  do {
   $37 = $38 + ($j$01$us << 3) | 0;
   HEAPF64[$37 >> 3] = +HEAPF64[$37 >> 3] - +HEAPF64[$35 + ($j$01$us << 3) >> 3];
   $j$01$us = $j$01$us + 1 | 0;
  } while (($j$01$us | 0) < ($4 | 0));
  $i$02$us = $i$02$us + 1 | 0;
 } while (($i$02$us | 0) < ($1 | 0));
 return;
}

function ___cxx_global_array_dtor_112($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13568);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13556);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13544);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13532);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13520);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13508);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13496);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13484);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13472);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13460);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13448);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13436);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13424);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13412);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13400);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13388);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13376);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13364);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13352);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13340);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13328);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13316);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13304);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(13292);
 return;
}

function ___cxx_global_array_dtor_85($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12464);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12452);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12440);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12428);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12416);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12404);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12392);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12380);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12368);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12356);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12344);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12332);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12320);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12308);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12296);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12284);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12272);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12260);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12248);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12236);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12224);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12212);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12200);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12188);
 return;
}

function ___cxx_global_array_dtor_61($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12172);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12160);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12148);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12136);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12124);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12112);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12100);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12088);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12076);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12064);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12052);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12040);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12028);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12016);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12004);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11992);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11980);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11968);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11956);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11944);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11932);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11920);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11908);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11896);
 return;
}

function ___cxx_global_array_dtor_109($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13276);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13264);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13252);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13240);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13228);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13216);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13204);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13192);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13180);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13168);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13156);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13144);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13132);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13120);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13108);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13096);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13084);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13072);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13060);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13048);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13036);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13024);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13012);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(13e3);
 return;
}

function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 $static_ptr = $static_ptr | 0;
 $static_type = $static_type | 0;
 $dst_type = $dst_type | 0;
 $src2dst_offset = $src2dst_offset | 0;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $5 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $3 = $static_ptr + (HEAP32[$0 + -8 >> 2] | 0) | 0;
 $5 = HEAP32[$0 + -4 >> 2] | 0;
 HEAP32[$info >> 2] = $dst_type;
 HEAP32[$info + 4 >> 2] = $static_ptr;
 HEAP32[$info + 8 >> 2] = $static_type;
 HEAP32[$info + 12 >> 2] = $src2dst_offset;
 $9 = $info + 16 | 0;
 $10 = $info + 20 | 0;
 $11 = $info + 24 | 0;
 $12 = $info + 28 | 0;
 $13 = $info + 32 | 0;
 $14 = $info + 40 | 0;
 $15 = ($5 | 0) == ($dst_type | 0);
 dest = $9;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9 + 36 >> 1] = 0;
 HEAP8[$9 + 38 >> 0] = 0;
 L1 : do if ($15) {
  HEAP32[$info + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$dst_type >> 2] | 0) + 20 >> 2] & 63]($dst_type, $info, $3, $3, 1, 0);
  $dst_ptr$0 = (HEAP32[$11 >> 2] | 0) == 1 ? $3 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 24 >> 2] & 63]($5, $info, $3, 1, 0);
  switch (HEAP32[$info + 36 >> 2] | 0) {
  case 0:
   {
    $dst_ptr$0 = (HEAP32[$14 >> 2] | 0) == 1 & (HEAP32[$12 >> 2] | 0) == 1 & (HEAP32[$13 >> 2] | 0) == 1 ? HEAP32[$10 >> 2] | 0 : 0;
    break L1;
    break;
   }
  case 1:
   break;
  default:
   {
    $dst_ptr$0 = 0;
    break L1;
   }
  }
  if ((HEAP32[$11 >> 2] | 0) != 1) if (!((HEAP32[$14 >> 2] | 0) == 0 & (HEAP32[$12 >> 2] | 0) == 1 & (HEAP32[$13 >> 2] | 0) == 1)) {
   $dst_ptr$0 = 0;
   break;
  }
  $dst_ptr$0 = HEAP32[$9 >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $dst_ptr$0 | 0;
}

function __ZNSt3__111__stdoutbufIcE8overflowEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$4 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $20 = 0, $30 = 0, $9 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, $pbase$0$lcssa27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__extbe = sp + 4 | 0;
 $__e = sp;
 $0 = ($__c | 0) == -1;
 do if ($0) label = 14; else {
  HEAP8[$__1buf >> 0] = $__c;
  if (HEAP8[$this + 44 >> 0] | 0) if ((_fwrite($__1buf, 1, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
   label = 14;
   break;
  } else {
   $$4 = -1;
   break;
  }
  HEAP32[$__extbe >> 2] = $__extbuf;
  $9 = $__1buf + 1 | 0;
  $10 = $this + 36 | 0;
  $11 = $this + 40 | 0;
  $12 = $__extbuf + 8 | 0;
  $13 = $__extbuf;
  $14 = $this + 32 | 0;
  $pbase$0 = $__1buf;
  while (1) {
   $15 = HEAP32[$10 >> 2] | 0;
   $20 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$15 >> 2] | 0) + 12 >> 2] & 63]($15, HEAP32[$11 >> 2] | 0, $pbase$0, $9, $__e, $__extbuf, $12, $__extbe) | 0;
   if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
    label = 13;
    break;
   }
   if (($20 | 0) == 3) {
    $pbase$0$lcssa27 = $pbase$0;
    label = 7;
    break;
   }
   if ($20 >>> 0 >= 2) {
    label = 13;
    break;
   }
   $30 = (HEAP32[$__extbe >> 2] | 0) - $13 | 0;
   if ((_fwrite($__extbuf, 1, $30, HEAP32[$14 >> 2] | 0) | 0) != ($30 | 0)) {
    label = 13;
    break;
   }
   if (($20 | 0) == 1) $pbase$0 = HEAP32[$__e >> 2] | 0; else {
    label = 12;
    break;
   }
  }
  if ((label | 0) == 7) if ((_fwrite($pbase$0$lcssa27, 1, 1, HEAP32[$14 >> 2] | 0) | 0) == 1) label = 12; else label = 13;
  if ((label | 0) == 12) {
   label = 14;
   break;
  } else if ((label | 0) == 13) {
   $$4 = -1;
   break;
  }
 } while (0);
 if ((label | 0) == 14) $$4 = $0 ? 0 : $__c;
 STACKTOP = sp;
 return $$4 | 0;
}

function __ZNSt3__111__stdoutbufIwE8overflowEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$4 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $29 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, $pbase$0$lcssa27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__extbe = sp + 4 | 0;
 $__e = sp;
 $0 = ($__c | 0) == -1;
 do if ($0) label = 14; else {
  HEAP32[$__1buf >> 2] = $__c;
  if (HEAP8[$this + 44 >> 0] | 0) if ((_fwrite($__1buf, 4, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
   label = 14;
   break;
  } else {
   $$4 = -1;
   break;
  }
  HEAP32[$__extbe >> 2] = $__extbuf;
  $8 = $__1buf + 4 | 0;
  $9 = $this + 36 | 0;
  $10 = $this + 40 | 0;
  $11 = $__extbuf + 8 | 0;
  $12 = $__extbuf;
  $13 = $this + 32 | 0;
  $pbase$0 = $__1buf;
  while (1) {
   $14 = HEAP32[$9 >> 2] | 0;
   $19 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$14 >> 2] | 0) + 12 >> 2] & 63]($14, HEAP32[$10 >> 2] | 0, $pbase$0, $8, $__e, $__extbuf, $11, $__extbe) | 0;
   if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
    label = 13;
    break;
   }
   if (($19 | 0) == 3) {
    $pbase$0$lcssa27 = $pbase$0;
    label = 7;
    break;
   }
   if ($19 >>> 0 >= 2) {
    label = 13;
    break;
   }
   $29 = (HEAP32[$__extbe >> 2] | 0) - $12 | 0;
   if ((_fwrite($__extbuf, 1, $29, HEAP32[$13 >> 2] | 0) | 0) != ($29 | 0)) {
    label = 13;
    break;
   }
   if (($19 | 0) == 1) $pbase$0 = HEAP32[$__e >> 2] | 0; else {
    label = 12;
    break;
   }
  }
  if ((label | 0) == 7) if ((_fwrite($pbase$0$lcssa27, 1, 1, HEAP32[$13 >> 2] | 0) | 0) == 1) label = 12; else label = 13;
  if ((label | 0) == 12) {
   label = 14;
   break;
  } else if ((label | 0) == 13) {
   $$4 = -1;
   break;
  }
 } while (0);
 if ((label | 0) == 14) $$4 = $0 ? 0 : $__c;
 STACKTOP = sp;
 return $$4 | 0;
}

function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $$sroa$0$2 = 0, $0 = 0, $10 = 0, $2 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__sp = sp;
 $0 = HEAP32[$__s >> 2] | 0;
 if (!$0) {
  $$sroa$0$2 = 0;
  STACKTOP = sp;
  return $$sroa$0$2 | 0;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = $2 - $3 | 0;
 $5 = $__iob + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $__ns$0 = ($6 | 0) > ($4 | 0) ? $6 - $4 | 0 : 0;
 $9 = $__op;
 $10 = $9 - $3 | 0;
 if (($10 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 127]($0, $__ob, $10) | 0) != ($10 | 0)) {
  HEAP32[$__s >> 2] = 0;
  $$sroa$0$2 = 0;
  STACKTOP = sp;
  return $$sroa$0$2 | 0;
 }
 do if (($__ns$0 | 0) > 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp, $__ns$0, $__fl);
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 127]($0, (HEAP8[$__sp >> 0] & 1) == 0 ? $__sp + 1 | 0 : HEAP32[$__sp + 8 >> 2] | 0, $__ns$0) | 0) == ($__ns$0 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
   break;
  }
  HEAP32[$__s >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
  $$sroa$0$2 = 0;
  STACKTOP = sp;
  return $$sroa$0$2 | 0;
 } while (0);
 $30 = $2 - $9 | 0;
 if (($30 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 127]($0, $__op, $30) | 0) != ($30 | 0)) {
  HEAP32[$__s >> 2] = 0;
  $$sroa$0$2 = 0;
  STACKTOP = sp;
  return $$sroa$0$2 | 0;
 }
 HEAP32[$5 >> 2] = 0;
 $$sroa$0$2 = $0;
 STACKTOP = sp;
 return $$sroa$0$2 | 0;
}

function __ZN4Gear5SolveEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $$lcssa = 0.0, $$lcssa5 = 0.0, $$pre12 = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0.0, $27 = 0.0, $3 = 0.0, $30 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $lastSolve = 0, $nextSolve = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp;
 $lastSolve = sp + 32 | 0;
 $nextSolve = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = $this + 32 | 0;
 $3 = +HEAPF64[$2 >> 3];
 if (!($3 > 0.0)) {
  __ZN4Gear9SolveNextEv($agg$result, $this);
  STACKTOP = sp;
  return;
 }
 $5 = $this + 176 | 0;
 $6 = +HEAPF64[$5 >> 3];
 $7 = $this + 188 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $8 + 8 | 0;
 $$pre12 = $this + 184 | 0;
 if (!($6 >= +HEAPF64[$9 >> 3])) {
  $$lcssa5 = $6;
  $27 = $3;
 } else {
  $12 = $0 + 8 | 0;
  $14 = $8;
  $16 = $9;
  do {
   $13 = HEAP32[$$pre12 >> 2] | 0;
   __ZN6VectoraSERKS_($13, $14) | 0;
   HEAPF64[$13 + 8 >> 3] = +HEAPF64[$16 >> 3];
   $18 = HEAP32[$7 >> 2] | 0;
   __ZN4Gear9SolveNextEv($0, $this);
   __ZN6VectoraSERKS_($18, $0) | 0;
   HEAPF64[$18 + 8 >> 3] = +HEAPF64[$12 >> 3];
   __ZN6VectorD2Ev($0);
   $21 = +HEAPF64[$5 >> 3];
   $14 = HEAP32[$7 >> 2] | 0;
   $16 = $14 + 8 | 0;
  } while ($21 >= +HEAPF64[$16 >> 3]);
  $$lcssa = $21;
  $$lcssa5 = $$lcssa;
  $27 = +HEAPF64[$2 >> 3];
 }
 HEAPF64[$5 >> 3] = $$lcssa5 + $27;
 __ZN6VectorC2ERKS_($lastSolve, HEAP32[$$pre12 >> 2] | 0);
 __ZN6VectorC2ERKS_($nextSolve, HEAP32[$7 >> 2] | 0);
 $30 = +HEAPF64[$5 >> 3];
 __ZN6Vector4LerpEddRS_dS0_($1, $$lcssa5, +HEAPF64[(HEAP32[$$pre12 >> 2] | 0) + 8 >> 3], $lastSolve, +HEAPF64[(HEAP32[$7 >> 2] | 0) + 8 >> 3], $nextSolve);
 __ZN6VectorC2ERKS_($agg$result, $1);
 HEAPF64[$agg$result + 8 >> 3] = $30;
 __ZN6VectorD2Ev($1);
 __ZN6VectorD2Ev($nextSolve);
 __ZN6VectorD2Ev($lastSolve);
 STACKTOP = sp;
 return;
}

function __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($__os, $__str, $__len) {
 $__os = $__os | 0;
 $__str = $__str | 0;
 $__len = $__len | 0;
 var $$byval_copy = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $23 = 0, $32 = 0, $6 = 0, $__s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $__s = sp;
 $0 = sp + 8 | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $__os);
 if (!(HEAP8[$__s >> 0] | 0)) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  STACKTOP = sp;
  return $__os | 0;
 }
 $6 = $__os + (HEAP32[(HEAP32[$__os >> 2] | 0) + -12 >> 2] | 0) | 0;
 HEAP32[$0 >> 2] = HEAP32[$6 + 24 >> 2];
 $10 = HEAP32[$6 + 4 >> 2] | 0;
 $11 = $__str + $__len | 0;
 $12 = $6 + 76 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 if (($13 | 0) == -1) {
  $15 = __ZNKSt3__18ios_base6getlocEv($6) | 0;
  HEAP32[$$byval_copy >> 2] = $15;
  $16 = __ZNKSt3__16locale9use_facetERNS0_2idE($$byval_copy, 10392) | 0;
  $20 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$16 >> 2] | 0) + 28 >> 2] & 63]($16, 32) | 0;
  __ZNSt3__16localeD2Ev($$byval_copy);
  $21 = $20 << 24 >> 24;
  HEAP32[$12 >> 2] = $21;
  $23 = $21;
 } else $23 = $13;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 if (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__str, ($10 & 176 | 0) == 32 ? $11 : $__str, $11, $6, $23 & 255) | 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  STACKTOP = sp;
  return $__os | 0;
 }
 $32 = $__os + (HEAP32[(HEAP32[$__os >> 2] | 0) + -12 >> 2] | 0) | 0;
 __ZNSt3__18ios_base5clearEj($32, HEAP32[$32 + 16 >> 2] | 5);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;
 return $__os | 0;
}

function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $$sroa$0$2 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $__ns$0 = 0, $__sp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__sp = sp;
 $0 = HEAP32[$__s >> 2] | 0;
 L1 : do if (!$0) $$sroa$0$2 = 0; else {
  $2 = $__oe;
  $3 = $__ob;
  $5 = $2 - $3 >> 2;
  $6 = $__iob + 12 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $__ns$0 = ($7 | 0) > ($5 | 0) ? $7 - $5 | 0 : 0;
  $10 = $__op;
  $11 = $10 - $3 | 0;
  $12 = $11 >> 2;
  if (($11 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 127]($0, $__ob, $12) | 0) != ($12 | 0)) {
   HEAP32[$__s >> 2] = 0;
   $$sroa$0$2 = 0;
   break;
  }
  do if (($__ns$0 | 0) > 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp, $__ns$0, $__fl);
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 127]($0, (HEAP8[$__sp >> 0] & 1) == 0 ? $__sp + 4 | 0 : HEAP32[$__sp + 8 >> 2] | 0, $__ns$0) | 0) == ($__ns$0 | 0)) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
    break;
   } else {
    HEAP32[$__s >> 2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
    $$sroa$0$2 = 0;
    break L1;
   }
  } while (0);
  $32 = $2 - $10 | 0;
  $33 = $32 >> 2;
  if (($32 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 127]($0, $__op, $33) | 0) != ($33 | 0)) {
   HEAP32[$__s >> 2] = 0;
   $$sroa$0$2 = 0;
   break;
  }
  HEAP32[$6 >> 2] = 0;
  $$sroa$0$2 = $0;
 } while (0);
 STACKTOP = sp;
 return $$sroa$0$2 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 116 | 0;
 $__nar = sp + 104 | 0;
 $__o = sp + 20 | 0;
 $__op = sp + 16 | 0;
 $__oe = sp + 8 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[24213] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[24214] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[24215] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[24216] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[24217] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[24218] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 24219, 0, HEAP32[$__iob + 4 >> 2] | 0);
 $5 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $7 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $$byval_copy) | 0) | 0;
 $8 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0;
 $9 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $9;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $8, $7, $__o, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv($9) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $11 = HEAP32[$__op >> 2] | 0;
 $12 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $13 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $11, $12, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $13 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 116 | 0;
 $__nar = sp + 104 | 0;
 $__o = sp + 20 | 0;
 $__op = sp + 16 | 0;
 $__oe = sp + 8 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[24213] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[24214] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[24215] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[24216] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[24217] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[24218] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 24219, 1, HEAP32[$__iob + 4 >> 2] | 0);
 $5 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $7 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $$byval_copy) | 0) | 0;
 $8 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0;
 $9 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $9;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $8, $7, $__o, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv($9) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $11 = HEAP32[$__op >> 2] | 0;
 $12 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $13 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $11, $12, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $13 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 56 | 0;
 $__nar = sp + 44 | 0;
 $__o = sp + 20 | 0;
 $__op = sp + 16 | 0;
 $__oe = sp + 8 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[24213] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[24214] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[24215] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[24216] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[24217] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[24218] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 24219, 0, HEAP32[$__iob + 4 >> 2] | 0);
 $5 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $7 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $$byval_copy) | 0) | 0;
 $8 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0;
 $9 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $9;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $8, $7, $__o, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv($9) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $11 = HEAP32[$__op >> 2] | 0;
 $12 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $13 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $11, $12, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $13 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 56 | 0;
 $__nar = sp + 44 | 0;
 $__o = sp + 20 | 0;
 $__op = sp + 16 | 0;
 $__oe = sp + 8 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[24213] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[24214] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[24215] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[24216] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[24217] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[24218] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 24219, 1, HEAP32[$__iob + 4 >> 2] | 0);
 $5 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $7 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $$byval_copy) | 0) | 0;
 $8 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0;
 $9 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $9;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $8, $7, $__o, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv($9) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $11 = HEAP32[$__op >> 2] | 0;
 $12 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $13 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $11, $12, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $13 | 0;
}

function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$0 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $6 = 0, $7 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $ap2 = sp + 120 | 0;
 $nl_type = sp + 80 | 0;
 $nl_arg = sp;
 $internal_buf = sp + 136 | 0;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0) < 0) $$0 = -1; else {
  if ((HEAP32[$f + 76 >> 2] | 0) > -1) $32 = ___lockfile($f) | 0; else $32 = 0;
  $6 = HEAP32[$f >> 2] | 0;
  $7 = $6 & 32;
  if ((HEAP8[$f + 74 >> 0] | 0) < 1) HEAP32[$f >> 2] = $6 & -33;
  $12 = $f + 48 | 0;
  if (!(HEAP32[$12 >> 2] | 0)) {
   $16 = $f + 44 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   HEAP32[$16 >> 2] = $internal_buf;
   $18 = $f + 28 | 0;
   HEAP32[$18 >> 2] = $internal_buf;
   $19 = $f + 20 | 0;
   HEAP32[$19 >> 2] = $internal_buf;
   HEAP32[$12 >> 2] = 80;
   $21 = $f + 16 | 0;
   HEAP32[$21 >> 2] = $internal_buf + 80;
   $22 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
   if (!$17) $ret$1 = $22; else {
    FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 127]($f, 0, 0) | 0;
    $$ = (HEAP32[$19 >> 2] | 0) == 0 ? -1 : $22;
    HEAP32[$16 >> 2] = $17;
    HEAP32[$12 >> 2] = 0;
    HEAP32[$21 >> 2] = 0;
    HEAP32[$18 >> 2] = 0;
    HEAP32[$19 >> 2] = 0;
    $ret$1 = $$;
   }
  } else $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
  $28 = HEAP32[$f >> 2] | 0;
  HEAP32[$f >> 2] = $28 | $7;
  if ($32) ___unlockfile($f);
  $$0 = ($28 & 32 | 0) == 0 ? $ret$1 : -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNK6MatrixmlEd($agg$result, $this, $val) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $val = +$val;
 var $1 = 0, $11 = 0, $13 = 0, $16 = 0, $18 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $33 = 0, $34 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02$i = 0, $i$02$i$us = 0, $i$02$us = 0, $j$01$i$us = 0, $j$01$us = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 HEAP32[$agg$result + 4 >> 2] = $1;
 $4 = HEAP32[$this + 8 >> 2] | 0;
 HEAP32[$agg$result + 8 >> 2] = $4;
 $7 = __Znaj($1 >>> 0 > 1073741823 ? -1 : $1 << 2) | 0;
 HEAP32[$agg$result >> 2] = $7;
 $8 = ($1 | 0) > 0;
 if (!$8) return;
 $9 = $4 >>> 0 > 536870911 ? -1 : $4 << 3;
 if (($4 | 0) > 0) {
  $13 = $7;
  $i$02$i$us = 0;
  while (1) {
   $11 = __Znaj($9) | 0;
   HEAP32[$13 + ($i$02$i$us << 2) >> 2] = $11;
   $16 = HEAP32[(HEAP32[$this >> 2] | 0) + ($i$02$i$us << 2) >> 2] | 0;
   $18 = HEAP32[$7 + ($i$02$i$us << 2) >> 2] | 0;
   $j$01$i$us = 0;
   do {
    HEAPF64[$18 + ($j$01$i$us << 3) >> 3] = +HEAPF64[$16 + ($j$01$i$us << 3) >> 3];
    $j$01$i$us = $j$01$i$us + 1 | 0;
   } while (($j$01$i$us | 0) != ($4 | 0));
   $23 = $i$02$i$us + 1 | 0;
   if (($23 | 0) < ($1 | 0)) {
    $13 = $7;
    $i$02$i$us = $23;
   } else break;
  }
 } else {
  $27 = $7;
  $i$02$i = 0;
  while (1) {
   $25 = __Znaj($9) | 0;
   HEAP32[$27 + ($i$02$i << 2) >> 2] = $25;
   $28 = $i$02$i + 1 | 0;
   if (($28 | 0) < ($1 | 0)) {
    $27 = $7;
    $i$02$i = $28;
   } else break;
  }
 }
 if ($8 & ($4 | 0) > 0) $i$02$us = 0; else return;
 do {
  $34 = HEAP32[$7 + ($i$02$us << 2) >> 2] | 0;
  $j$01$us = 0;
  do {
   $33 = $34 + ($j$01$us << 3) | 0;
   HEAPF64[$33 >> 3] = +HEAPF64[$33 >> 3] * $val;
   $j$01$us = $j$01$us + 1 | 0;
  } while (($j$01$us | 0) < ($4 | 0));
  $i$02$us = $i$02$us + 1 | 0;
 } while (($i$02$us | 0) < ($1 | 0));
 return;
}

function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this | 0;
 __embind_register_void(856, 15200);
 __embind_register_bool(872, 15205, 1, 1, 0);
 __embind_register_integer(880, 15210, 1, -128, 127);
 __embind_register_integer(912, 15215, 1, -128, 127);
 __embind_register_integer(904, 15227, 1, 0, 255);
 __embind_register_integer(920, 15241, 2, -32768, 32767);
 __embind_register_integer(928, 15247, 2, 0, 65535);
 __embind_register_integer(936, 15262, 4, -2147483648, 2147483647);
 __embind_register_integer(944, 15266, 4, 0, -1);
 __embind_register_integer(952, 15279, 4, -2147483648, 2147483647);
 __embind_register_integer(960, 15284, 4, 0, -1);
 __embind_register_float(968, 15298, 4);
 __embind_register_float(976, 15304, 8);
 __embind_register_std_string(560, 15311);
 __embind_register_std_string(584, 15323);
 __embind_register_std_wstring(608, 4, 15356);
 __embind_register_emval(632, 15369);
 __embind_register_memory_view(640, 0, 15385);
 __embind_register_memory_view(648, 0, 15415);
 __embind_register_memory_view(656, 1, 15452);
 __embind_register_memory_view(664, 2, 15491);
 __embind_register_memory_view(672, 3, 15522);
 __embind_register_memory_view(680, 4, 15562);
 __embind_register_memory_view(688, 5, 15591);
 __embind_register_memory_view(696, 4, 15629);
 __embind_register_memory_view(704, 5, 15659);
 __embind_register_memory_view(648, 0, 15698);
 __embind_register_memory_view(656, 1, 15730);
 __embind_register_memory_view(664, 2, 15763);
 __embind_register_memory_view(672, 3, 15796);
 __embind_register_memory_view(680, 4, 15830);
 __embind_register_memory_view(688, 5, 15863);
 __embind_register_memory_view(712, 6, 15897);
 __embind_register_memory_view(720, 7, 15928);
 __embind_register_memory_view(728, 7, 15960);
 return;
}

function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $__g_end, $__err) {
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__err = $__err | 0;
 var $$0$i$i = 0, $$01$i$i = 0, $0 = 0, $10 = 0, $12 = 0, $16 = 0, $17 = 0, $21 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $4 = 0, $__ig$0 = 0, $__r$0 = 0, $or$cond2 = 0, label = 0;
 $0 = HEAP8[$__grouping >> 0] | 0;
 $3 = $__grouping + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 do if ((($0 & 1) == 0 ? ($0 & 255) >>> 1 : $4) | 0) {
  if (($__g | 0) == ($__g_end | 0)) {
   $16 = $0;
   $24 = $4;
  } else {
   $$0$i$i = $__g_end;
   $$01$i$i = $__g;
   while (1) {
    $10 = $$0$i$i + -4 | 0;
    if ($$01$i$i >>> 0 >= $10 >>> 0) break;
    $12 = HEAP32[$$01$i$i >> 2] | 0;
    HEAP32[$$01$i$i >> 2] = HEAP32[$10 >> 2];
    HEAP32[$10 >> 2] = $12;
    $$0$i$i = $10;
    $$01$i$i = $$01$i$i + 4 | 0;
   }
   $16 = HEAP8[$__grouping >> 0] | 0;
   $24 = HEAP32[$3 >> 2] | 0;
  }
  $17 = ($16 & 1) == 0;
  $21 = $17 ? $__grouping + 1 | 0 : HEAP32[$__grouping + 8 >> 2] | 0;
  $27 = $__g_end + -4 | 0;
  $28 = $21 + ($17 ? ($16 & 255) >>> 1 : $24) | 0;
  $__ig$0 = $21;
  $__r$0 = $__g;
  while (1) {
   $30 = HEAP8[$__ig$0 >> 0] | 0;
   $or$cond2 = $30 << 24 >> 24 < 1 | $30 << 24 >> 24 == 127;
   if ($__r$0 >>> 0 >= $27 >>> 0) break;
   if (!$or$cond2) if (($30 << 24 >> 24 | 0) != (HEAP32[$__r$0 >> 2] | 0)) {
    label = 10;
    break;
   }
   $__ig$0 = ($28 - $__ig$0 | 0) > 1 ? $__ig$0 + 1 | 0 : $__ig$0;
   $__r$0 = $__r$0 + 4 | 0;
  }
  if ((label | 0) == 10) {
   HEAP32[$__err >> 2] = 4;
   break;
  }
  if (!$or$cond2) if (((HEAP32[$27 >> 2] | 0) + -1 | 0) >>> 0 >= $30 << 24 >> 24 >>> 0) HEAP32[$__err >> 2] = 4;
 } while (0);
 return;
}

function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $$0 = 0, $$4 = 0, $15 = 0, $16 = 0, $21 = 0, $23 = 0, $25 = 0, $5 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 HEAP32[$adjustedPtr >> 2] = HEAP32[HEAP32[$adjustedPtr >> 2] >> 2];
 if (($this | 0) == ($thrown_type | 0) | ($thrown_type | 0) == 864) $$4 = 1; else if (!$thrown_type) $$4 = 0; else {
  $5 = ___dynamic_cast($thrown_type, 776, 824, 0) | 0;
  if (!$5) $$4 = 0; else if (!(HEAP32[$5 + 8 >> 2] & ~HEAP32[$this + 8 >> 2])) {
   $15 = HEAP32[$this + 12 >> 2] | 0;
   $16 = $5 + 12 | 0;
   if (($15 | 0) == 856 ? 1 : ($15 | 0) == (HEAP32[$16 >> 2] | 0)) $$4 = 1; else if (!$15) $$4 = 0; else {
    $21 = ___dynamic_cast($15, 776, 792, 0) | 0;
    if (!$21) $$4 = 0; else {
     $23 = HEAP32[$16 >> 2] | 0;
     if (!$23) $$4 = 0; else {
      $25 = ___dynamic_cast($23, 776, 792, 0) | 0;
      if (!$25) $$4 = 0; else {
       dest = $info;
       stop = dest + 56 | 0;
       do {
        HEAP32[dest >> 2] = 0;
        dest = dest + 4 | 0;
       } while ((dest | 0) < (stop | 0));
       HEAP32[$info >> 2] = $25;
       HEAP32[$info + 8 >> 2] = $21;
       HEAP32[$info + 12 >> 2] = -1;
       HEAP32[$info + 48 >> 2] = 1;
       FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$25 >> 2] | 0) + 28 >> 2] & 63]($25, $info, HEAP32[$adjustedPtr >> 2] | 0, 1);
       if ((HEAP32[$info + 24 >> 2] | 0) == 1) {
        HEAP32[$adjustedPtr >> 2] = HEAP32[$info + 16 >> 2];
        $$0 = 1;
       } else $$0 = 0;
       $$4 = $$0;
      }
     }
    }
   }
  } else $$4 = 0;
 }
 STACKTOP = sp;
 return $$4 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__fmt = 0, $__nar = 0, $__o = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 180 | 0;
 $__nar = sp + 160 | 0;
 $__o = sp + 8 | 0;
 $0 = sp + 156 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[24227] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[24228] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[24229] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[24230] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[24231] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[24232] | 0;
 $2 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $3 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 20, $2, $__fmt, $$byval_copy) | 0;
 $4 = $__nar + $3 | 0;
 $5 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $4, $__iob) | 0;
 $6 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $6;
 $7 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 10384) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($6) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 63]($7, $__nar, $4, $__o) | 0;
 $11 = $__o + ($3 << 2) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $18 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, ($5 | 0) == ($4 | 0) ? $11 : $__o + ($5 - $__nar << 2) | 0, $11, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $18 | 0;
}

function __Z5LotkadPdS_($t, $x, $r) {
 $t = +$t;
 $x = $x | 0;
 $r = $r | 0;
 var $0 = 0.0, $10 = 0.0, $12 = 0.0, $16 = 0.0, $18 = 0.0, $2 = 0.0, $20 = 0.0, $23 = 0.0, $24 = 0.0, $26 = 0.0, $32 = 0.0, $36 = 0.0, $4 = 0.0, $44 = 0.0, $47 = 0.0, $49 = 0.0, $53 = 0.0, $56 = 0.0, $6 = 0.0, $61 = 0, $68 = 0.0, $8 = 0.0;
 $0 = +HEAPF64[$x >> 3];
 $2 = +HEAPF64[$x + 8 >> 3];
 $4 = +HEAPF64[$x + 16 >> 3];
 $6 = +HEAPF64[$x + 24 >> 3];
 $8 = +HEAPF64[$x + 48 >> 3];
 $10 = +HEAPF64[$x + 64 >> 3];
 $12 = +HEAPF64[$x + 88 >> 3];
 $16 = +HEAPF64[$x + 104 >> 3];
 $18 = +HEAPF64[$x + 120 >> 3];
 $20 = +HEAPF64[$x + 144 >> 3];
 $23 = +HEAPF64[$x + 96 >> 3] * 1.0e-05;
 $24 = $6 * $23;
 $26 = $16 * .1;
 $32 = $6 * ($20 * 1.0e-05);
 HEAP32[$r >> 2] = 0;
 HEAP32[$r + 4 >> 2] = 0;
 HEAP32[$r + 8 >> 2] = 0;
 HEAP32[$r + 12 >> 2] = 0;
 HEAP32[$r + 16 >> 2] = 0;
 HEAP32[$r + 20 >> 2] = 0;
 HEAPF64[$r + 24 >> 3] = $12 * 2.0e-05 * $18 + ($26 + ($0 * -1.0e-05 * $6 - $24)) - $32;
 $36 = $0 * 1.0e-05 * $6;
 HEAPF64[$r + 32 >> 3] = $36;
 HEAPF64[$r + 40 >> 3] = $36;
 $44 = $8 * $23;
 $47 = $8 * ($16 * 1.0e-05);
 $49 = $20 * .1;
 HEAPF64[$r + 48 >> 3] = $4 * -1.0e-05 * $8 + $2 * 2.0e-05 * $10 - $44 - $47 + $49;
 $53 = $4 * 1.0e-05 * $8;
 HEAPF64[$r + 56 >> 3] = $53;
 $56 = $2 * 1.0e-05 * $10;
 HEAPF64[$r + 64 >> 3] = $53 - $56;
 HEAPF64[$r + 72 >> 3] = $56;
 HEAPF64[$r + 80 >> 3] = $56;
 $61 = $r + 88 | 0;
 HEAP32[$61 >> 2] = 0;
 HEAP32[$61 + 4 >> 2] = 0;
 HEAP32[$61 + 8 >> 2] = 0;
 HEAP32[$61 + 12 >> 2] = 0;
 HEAPF64[$r + 104 >> 3] = $24 - $26 - $47;
 HEAPF64[$r + 112 >> 3] = $47 + $32;
 $68 = $12 * 1.0e-05 * $18;
 HEAPF64[$r + 120 >> 3] = $47 - $68 + $32;
 HEAPF64[$r + 128 >> 3] = $68;
 HEAPF64[$r + 136 >> 3] = $68;
 HEAPF64[$r + 144 >> 3] = $44 - $49 - $32;
 return;
}

function __ZNSt3__110__stdinbufIwE9pbackfailEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$1 = 0, $$pre$phiZ2D = 0, $1 = 0, $11 = 0, $23 = 0, $24 = 0, $26 = 0, $3 = 0, $5 = 0, $8 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__enxt = sp + 8 | 0;
 $__ci = sp + 4 | 0;
 $__inxt = sp;
 $1 = $this + 52 | 0;
 $3 = (HEAP8[$1 >> 0] | 0) != 0;
 L1 : do if (($__c | 0) == -1) if ($3) $$1 = -1; else {
  $5 = HEAP32[$this + 48 >> 2] | 0;
  HEAP8[$1 >> 0] = ($5 | 0) != -1 & 1;
  $$1 = $5;
 } else {
  do if ($3) {
   $8 = $this + 48 | 0;
   HEAP32[$__ci >> 2] = HEAP32[$8 >> 2];
   $11 = HEAP32[$this + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] & 63]($11, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 4 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0) {
   case 1:
   case 2:
    {
     $$1 = -1;
     break L1;
     break;
    }
   case 3:
    {
     HEAP8[$__extbuf >> 0] = HEAP32[$8 >> 2];
     HEAP32[$__enxt >> 2] = $__extbuf + 1;
     break;
    }
   default:
    {}
   }
   $23 = $this + 32 | 0;
   while (1) {
    $24 = HEAP32[$__enxt >> 2] | 0;
    if ($24 >>> 0 <= $__extbuf >>> 0) {
     label = 13;
     break;
    }
    $26 = $24 + -1 | 0;
    HEAP32[$__enxt >> 2] = $26;
    if ((_ungetc(HEAP8[$26 >> 0] | 0, HEAP32[$23 >> 2] | 0) | 0) == -1) {
     label = 12;
     break;
    }
   }
   if ((label | 0) == 12) {
    $$1 = -1;
    break L1;
   } else if ((label | 0) == 13) {
    $$pre$phiZ2D = $8;
    break;
   }
  } else $$pre$phiZ2D = $this + 48 | 0; while (0);
  HEAP32[$$pre$phiZ2D >> 2] = $__c;
  HEAP8[$1 >> 0] = 1;
  $$1 = $__c;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__110__stdinbufIcE9pbackfailEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$1 = 0, $$pre$phiZ2D = 0, $1 = 0, $12 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $5 = 0, $8 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__enxt = sp + 4 | 0;
 $__ci = sp + 8 | 0;
 $__inxt = sp;
 $1 = $this + 52 | 0;
 $3 = (HEAP8[$1 >> 0] | 0) != 0;
 L1 : do if (($__c | 0) == -1) if ($3) $$1 = -1; else {
  $5 = HEAP32[$this + 48 >> 2] | 0;
  HEAP8[$1 >> 0] = ($5 | 0) != -1 & 1;
  $$1 = $5;
 } else {
  do if ($3) {
   $8 = $this + 48 | 0;
   HEAP8[$__ci >> 0] = HEAP32[$8 >> 2];
   $12 = HEAP32[$this + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 63]($12, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 1 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0) {
   case 1:
   case 2:
    {
     $$1 = -1;
     break L1;
     break;
    }
   case 3:
    {
     HEAP8[$__extbuf >> 0] = HEAP32[$8 >> 2];
     HEAP32[$__enxt >> 2] = $__extbuf + 1;
     break;
    }
   default:
    {}
   }
   $24 = $this + 32 | 0;
   while (1) {
    $25 = HEAP32[$__enxt >> 2] | 0;
    if ($25 >>> 0 <= $__extbuf >>> 0) {
     label = 13;
     break;
    }
    $27 = $25 + -1 | 0;
    HEAP32[$__enxt >> 2] = $27;
    if ((_ungetc(HEAP8[$27 >> 0] | 0, HEAP32[$24 >> 2] | 0) | 0) == -1) {
     label = 12;
     break;
    }
   }
   if ((label | 0) == 12) {
    $$1 = -1;
    break L1;
   } else if ((label | 0) == 13) {
    $$pre$phiZ2D = $8;
    break;
   }
  } else $$pre$phiZ2D = $this + 48 | 0; while (0);
  HEAP32[$$pre$phiZ2D >> 2] = $__c;
  HEAP8[$1 >> 0] = 1;
  $$1 = $__c;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__fmt = 0, $__nar = 0, $__o = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 72 | 0;
 $__nar = sp + 52 | 0;
 $__o = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[24227] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[24228] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[24229] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[24230] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[24231] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[24232] | 0;
 $2 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $3 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 20, $2, $__fmt, $$byval_copy) | 0;
 $4 = $__nar + $3 | 0;
 $5 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $4, $__iob) | 0;
 $6 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $6;
 $7 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 10392) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($6) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 32 >> 2] & 63]($7, $__nar, $4, $__o) | 0;
 $11 = $__o + $3 | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $18 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, ($5 | 0) == ($4 | 0) ? $11 : $__o + ($5 - $__nar) | 0, $11, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $18 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 204 | 0;
 $__o = sp + 32 | 0;
 $__op = sp + 28 | 0;
 $__oe = sp + 20 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = $__fmt;
 HEAP32[$4 >> 2] = 37;
 HEAP32[$4 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 24221, 0, HEAP32[$__iob + 4 >> 2] | 0);
 $11 = __ZNSt3__16__clocEv() | 0;
 $12 = $$byval_copy;
 HEAP32[$12 >> 2] = $0;
 HEAP32[$12 + 4 >> 2] = $1;
 $17 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 23, $11, $__fmt, $$byval_copy) | 0) | 0;
 $18 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0;
 $19 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$2 >> 2] = $19;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $18, $17, $__o, $__op, $__oe, $2);
 __ZNSt3__114__shared_count16__release_sharedEv($19) | 0;
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2];
 $21 = HEAP32[$__op >> 2] | 0;
 $22 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
 $23 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $21, $22, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $23 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 196 | 0;
 $__o = sp + 32 | 0;
 $__op = sp + 28 | 0;
 $__oe = sp + 20 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = $__fmt;
 HEAP32[$4 >> 2] = 37;
 HEAP32[$4 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 24221, 1, HEAP32[$__iob + 4 >> 2] | 0);
 $11 = __ZNSt3__16__clocEv() | 0;
 $12 = $$byval_copy;
 HEAP32[$12 >> 2] = $0;
 HEAP32[$12 + 4 >> 2] = $1;
 $17 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 22, $11, $__fmt, $$byval_copy) | 0) | 0;
 $18 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0;
 $19 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$2 >> 2] = $19;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $18, $17, $__o, $__op, $__oe, $2);
 __ZNSt3__114__shared_count16__release_sharedEv($19) | 0;
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2];
 $21 = HEAP32[$__op >> 2] | 0;
 $22 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
 $23 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $21, $22, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $23 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 75 | 0;
 $__o = sp + 32 | 0;
 $__op = sp + 28 | 0;
 $__oe = sp + 20 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = $__fmt;
 HEAP32[$4 >> 2] = 37;
 HEAP32[$4 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 24221, 0, HEAP32[$__iob + 4 >> 2] | 0);
 $11 = __ZNSt3__16__clocEv() | 0;
 $12 = $$byval_copy;
 HEAP32[$12 >> 2] = $0;
 HEAP32[$12 + 4 >> 2] = $1;
 $17 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 23, $11, $__fmt, $$byval_copy) | 0) | 0;
 $18 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0;
 $19 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$2 >> 2] = $19;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $18, $17, $__o, $__op, $__oe, $2);
 __ZNSt3__114__shared_count16__release_sharedEv($19) | 0;
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2];
 $21 = HEAP32[$__op >> 2] | 0;
 $22 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
 $23 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $21, $22, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $23 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $p$0 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $3 = $info + 52 | 0;
  $4 = HEAP8[$3 >> 0] | 0;
  $5 = $info + 53 | 0;
  $6 = HEAP8[$5 >> 0] | 0;
  $9 = HEAP32[$this + 12 >> 2] | 0;
  $10 = $this + 16 + ($9 << 3) | 0;
  HEAP8[$3 >> 0] = 0;
  HEAP8[$5 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this + 16 | 0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
  L4 : do if (($9 | 0) > 1) {
   $13 = $info + 24 | 0;
   $14 = $this + 8 | 0;
   $15 = $info + 54 | 0;
   $p$0 = $this + 24 | 0;
   do {
    if (HEAP8[$15 >> 0] | 0) break L4;
    if (!(HEAP8[$3 >> 0] | 0)) {
     if (HEAP8[$5 >> 0] | 0) if (!(HEAP32[$14 >> 2] & 1)) break L4;
    } else {
     if ((HEAP32[$13 >> 2] | 0) == 1) break L4;
     if (!(HEAP32[$14 >> 2] & 2)) break L4;
    }
    HEAP8[$3 >> 0] = 0;
    HEAP8[$5 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
    $p$0 = $p$0 + 8 | 0;
   } while ($p$0 >>> 0 < $10 >>> 0);
  } while (0);
  HEAP8[$3 >> 0] = $4;
  HEAP8[$5 >> 0] = $6;
 }
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 74 | 0;
 $__o = sp + 32 | 0;
 $__op = sp + 28 | 0;
 $__oe = sp + 20 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = $__fmt;
 HEAP32[$4 >> 2] = 37;
 HEAP32[$4 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 24221, 1, HEAP32[$__iob + 4 >> 2] | 0);
 $11 = __ZNSt3__16__clocEv() | 0;
 $12 = $$byval_copy;
 HEAP32[$12 >> 2] = $0;
 HEAP32[$12 + 4 >> 2] = $1;
 $17 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 22, $11, $__fmt, $$byval_copy) | 0) | 0;
 $18 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0;
 $19 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$2 >> 2] = $19;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $18, $17, $__o, $__op, $__oe, $2);
 __ZNSt3__114__shared_count16__release_sharedEv($19) | 0;
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2];
 $21 = HEAP32[$__op >> 2] | 0;
 $22 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
 $23 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $21, $22, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $23 | 0;
}

function ___stdio_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $15 = 0, $2 = 0, $27 = 0, $30 = 0, $31 = 0, $7 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $iov = sp + 32 | 0;
 HEAP32[$iov >> 2] = $buf;
 $0 = $iov + 4 | 0;
 $1 = $f + 48 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$0 >> 2] = $len - (($2 | 0) != 0 & 1);
 $7 = $f + 44 | 0;
 HEAP32[$iov + 8 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$iov + 12 >> 2] = $2;
 if (!(HEAP32[840] | 0)) {
  HEAP32[$vararg_buffer3 >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer3 + 4 >> 2] = $iov;
  HEAP32[$vararg_buffer3 + 8 >> 2] = 2;
  $cnt$0 = ___syscall_ret(___syscall145(145, $vararg_buffer3 | 0) | 0) | 0;
 } else {
  _pthread_cleanup_push(145, $f | 0);
  HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = $iov;
  HEAP32[$vararg_buffer + 8 >> 2] = 2;
  $15 = ___syscall_ret(___syscall145(145, $vararg_buffer | 0) | 0) | 0;
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 if (($cnt$0 | 0) < 1) {
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | $cnt$0 & 48 ^ 16;
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0 >> 2] | 0;
  if ($cnt$0 >>> 0 > $27 >>> 0) {
   $30 = HEAP32[$7 >> 2] | 0;
   $31 = $f + 4 | 0;
   HEAP32[$31 >> 2] = $30;
   $$cast = $30;
   HEAP32[$f + 8 >> 2] = $$cast + ($cnt$0 - $27);
   if (!(HEAP32[$1 >> 2] | 0)) $$0 = $len; else {
    HEAP32[$31 >> 2] = $$cast + 1;
    HEAP8[$buf + ($len + -1) >> 0] = HEAP8[$$cast >> 0] | 0;
    $$0 = $len;
   }
  } else $$0 = $cnt$0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this, $__res_arg) {
 $this = $this | 0;
 $__res_arg = $__res_arg | 0;
 var $1 = 0, $14 = 0, $16 = 0, $20 = 0, $22 = 0, $28 = 0, $4 = 0, $41 = 0, $8 = 0, $__new_data$0 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 if ($__res_arg >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 $1 = HEAP8[$this >> 0] | 0;
 if (!($1 & 1)) {
  $22 = 10;
  $8 = $1;
 } else {
  $4 = HEAP32[$this >> 2] | 0;
  $22 = ($4 & -2) + -1 | 0;
  $8 = $4 & 255;
 }
 if (!($8 & 1)) $14 = ($8 & 255) >>> 1; else $14 = HEAP32[$this + 4 >> 2] | 0;
 $16 = $14 >>> 0 > $__res_arg >>> 0 ? $14 : $__res_arg;
 if ($16 >>> 0 < 11) $20 = 10; else $20 = ($16 + 16 & -16) + -1 | 0;
 do if (($20 | 0) != ($22 | 0)) {
  do if (($20 | 0) == 10) {
   $__new_data$0 = $this + 1 | 0;
   $__now_long$0$off0 = 0;
   $__p$0 = HEAP32[$this + 8 >> 2] | 0;
   $__was_long$0$off0 = 1;
  } else {
   $28 = __Znwj($20 + 1 | 0) | 0;
   if (!($8 & 1)) {
    $__new_data$0 = $28;
    $__now_long$0$off0 = 1;
    $__p$0 = $this + 1 | 0;
    $__was_long$0$off0 = 0;
    break;
   } else {
    $__new_data$0 = $28;
    $__now_long$0$off0 = 1;
    $__p$0 = HEAP32[$this + 8 >> 2] | 0;
    $__was_long$0$off0 = 1;
    break;
   }
  } while (0);
  if (!($8 & 1)) $41 = ($8 & 255) >>> 1; else $41 = HEAP32[$this + 4 >> 2] | 0;
  _memcpy($__new_data$0 | 0, $__p$0 | 0, $41 + 1 | 0) | 0;
  if ($__was_long$0$off0) __ZdlPv($__p$0);
  if ($__now_long$0$off0) {
   HEAP32[$this >> 2] = $20 + 1 | 1;
   HEAP32[$this + 4 >> 2] = $14;
   HEAP32[$this + 8 >> 2] = $__new_data$0;
   break;
  } else {
   HEAP8[$this >> 0] = $14 << 1;
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEd($this, $__n) {
 $this = $this | 0;
 $__n = +$__n;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $24 = 0, $25 = 0, $27 = 0, $30 = 0, $37 = 0, $8 = 0, $9 = 0, $__s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 16 | 0;
 $0 = sp + 12 | 0;
 $__s = sp;
 $1 = sp + 8 | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $this);
 if (HEAP8[$__s >> 0] | 0) {
  $8 = __ZNKSt3__18ios_base6getlocEv($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  HEAP32[$1 >> 2] = $8;
  $9 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 9564) | 0;
  __ZNSt3__16localeD2Ev($1);
  $13 = $this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0;
  $15 = HEAP32[$13 + 24 >> 2] | 0;
  $16 = $13 + 76 | 0;
  $17 = HEAP32[$16 >> 2] | 0;
  if (($17 | 0) == -1) {
   $19 = __ZNKSt3__18ios_base6getlocEv($13) | 0;
   HEAP32[$$byval_copy >> 2] = $19;
   $20 = __ZNKSt3__16locale9use_facetERNS0_2idE($$byval_copy, 10392) | 0;
   $24 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] & 63]($20, 32) | 0;
   __ZNSt3__16localeD2Ev($$byval_copy);
   $25 = $24 << 24 >> 24;
   HEAP32[$16 >> 2] = $25;
   $27 = $25;
  } else $27 = $17;
  $30 = HEAP32[(HEAP32[$9 >> 2] | 0) + 32 >> 2] | 0;
  HEAP32[$0 >> 2] = $15;
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  if (!(FUNCTION_TABLE_iiiiid[$30 & 63]($9, $$byval_copy, $13, $27 & 255, $__n) | 0)) {
   $37 = $this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 16 | 0;
   HEAP32[$37 >> 2] = HEAP32[$37 >> 2] | 5;
  }
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this, $__res_arg) {
 $this = $this | 0;
 $__res_arg = $__res_arg | 0;
 var $1 = 0, $14 = 0, $16 = 0, $20 = 0, $22 = 0, $29 = 0, $4 = 0, $42 = 0, $8 = 0, $__new_data$0 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 if ($__res_arg >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 $1 = HEAP8[$this >> 0] | 0;
 if (!($1 & 1)) {
  $22 = 1;
  $8 = $1;
 } else {
  $4 = HEAP32[$this >> 2] | 0;
  $22 = ($4 & -2) + -1 | 0;
  $8 = $4 & 255;
 }
 if (!($8 & 1)) $14 = ($8 & 255) >>> 1; else $14 = HEAP32[$this + 4 >> 2] | 0;
 $16 = $14 >>> 0 > $__res_arg >>> 0 ? $14 : $__res_arg;
 if ($16 >>> 0 < 2) $20 = 1; else $20 = ($16 + 4 & -4) + -1 | 0;
 do if (($20 | 0) != ($22 | 0)) {
  do if (($20 | 0) == 1) {
   $__new_data$0 = $this + 4 | 0;
   $__now_long$0$off0 = 0;
   $__p$0 = HEAP32[$this + 8 >> 2] | 0;
   $__was_long$0$off0 = 1;
  } else {
   $29 = __Znwj(($20 << 2) + 4 | 0) | 0;
   if (!($8 & 1)) {
    $__new_data$0 = $29;
    $__now_long$0$off0 = 1;
    $__p$0 = $this + 4 | 0;
    $__was_long$0$off0 = 0;
    break;
   } else {
    $__new_data$0 = $29;
    $__now_long$0$off0 = 1;
    $__p$0 = HEAP32[$this + 8 >> 2] | 0;
    $__was_long$0$off0 = 1;
    break;
   }
  } while (0);
  if (!($8 & 1)) $42 = ($8 & 255) >>> 1; else $42 = HEAP32[$this + 4 >> 2] | 0;
  _wmemcpy($__new_data$0, $__p$0, $42 + 1 | 0) | 0;
  if ($__was_long$0$off0) __ZdlPv($__p$0);
  if ($__now_long$0$off0) {
   HEAP32[$this >> 2] = $20 + 1 | 1;
   HEAP32[$this + 4 >> 2] = $14;
   HEAP32[$this + 8 >> 2] = $__new_data$0;
   break;
  } else {
   HEAP8[$this >> 0] = $14 << 1;
   break;
  }
 } while (0);
 return;
}

function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $$0$i = 0, $$0$i$6 = 0, $14 = 0, $2 = 0, $29 = 0, $33 = 0, $4 = 0, $8 = 0, $__i$0$i$i = 0, $__i$0$i$i$2 = 0, $__ndflt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__ndflt = sp;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__ndflt + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $2 = HEAP8[$__dflt >> 0] | 0;
 $4 = ($2 & 1) == 0;
 $8 = $4 ? $__dflt + 1 | 0 : HEAP32[$__dflt + 8 >> 2] | 0;
 $14 = $8 + ($4 ? ($2 & 255) >>> 1 : HEAP32[$__dflt + 4 >> 2] | 0) | 0;
 $$0$i$6 = $8;
 while (1) {
  if ($$0$i$6 >>> 0 >= $14 >>> 0) break;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$$0$i$6 >> 0] | 0);
  $$0$i$6 = $$0$i$6 + 1 | 0;
 }
 $29 = _catgets(($__c | 0) == -1 ? -1 : $__c << 1, $__set, $__msgid, (HEAP8[$__ndflt >> 0] & 1) == 0 ? $__ndflt + 1 | 0 : HEAP32[$__ndflt + 8 >> 2] | 0) | 0;
 $__i$0$i$i$2 = 0;
 while (1) {
  if (($__i$0$i$i$2 | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i$2 << 2) >> 2] = 0;
  $__i$0$i$i$2 = $__i$0$i$i$2 + 1 | 0;
 }
 $33 = $29 + (_strlen($29) | 0) | 0;
 $$0$i = $29;
 while (1) {
  if ($$0$i >>> 0 >= $33 >>> 0) break;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result, HEAP8[$$0$i >> 0] | 0);
  $$0$i = $$0$i + 1 | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp, $__len, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__flags = $__flags | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$2$ph = 0, $11 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $specify_precision$0$off0$ph = 0;
 if (!($__flags & 2048)) $$0 = $__fmtp; else {
  HEAP8[$__fmtp >> 0] = 43;
  $$0 = $__fmtp + 1 | 0;
 }
 if (!($__flags & 1024)) $$1 = $$0; else {
  HEAP8[$$0 >> 0] = 35;
  $$1 = $$0 + 1 | 0;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6 | 0) == 260;
 if ($8) {
  $$2$ph = $$1;
  $specify_precision$0$off0$ph = 0;
 } else {
  HEAP8[$$1 >> 0] = 46;
  HEAP8[$$1 + 1 >> 0] = 42;
  $$2$ph = $$1 + 2 | 0;
  $specify_precision$0$off0$ph = 1;
 }
 $$01 = $__len;
 $$2 = $$2$ph;
 while (1) {
  $11 = HEAP8[$$01 >> 0] | 0;
  if (!($11 << 24 >> 24)) {
   $$2$lcssa = $$2;
   break;
  }
  HEAP8[$$2 >> 0] = $11;
  $$01 = $$01 + 1 | 0;
  $$2 = $$2 + 1 | 0;
 }
 L14 : do switch ($6 | 0) {
 case 4:
  {
   if (!($7 & 1)) {
    HEAP8[$$2$lcssa >> 0] = 102;
    break L14;
   } else {
    HEAP8[$$2$lcssa >> 0] = 70;
    break L14;
   }
   break;
  }
 case 256:
  {
   if (!($7 & 1)) {
    HEAP8[$$2$lcssa >> 0] = 101;
    break L14;
   } else {
    HEAP8[$$2$lcssa >> 0] = 69;
    break L14;
   }
   break;
  }
 default:
  {
   $20 = ($7 & 1 | 0) != 0;
   if ($8) if ($20) {
    HEAP8[$$2$lcssa >> 0] = 65;
    break L14;
   } else {
    HEAP8[$$2$lcssa >> 0] = 97;
    break L14;
   } else if ($20) {
    HEAP8[$$2$lcssa >> 0] = 71;
    break L14;
   } else {
    HEAP8[$$2$lcssa >> 0] = 103;
    break L14;
   }
  }
 } while (0);
 return $specify_precision$0$off0$ph | 0;
}

function __ZL25default_terminate_handlerv() {
 var $0 = 0, $11 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $30 = 0, $34 = 0, $6 = 0, $8 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36 | 0;
 $0 = ___cxa_get_globals_fast() | 0;
 if ($0) {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2) {
   $6 = $2 + 48 | 0;
   $8 = HEAP32[$6 >> 2] | 0;
   $11 = HEAP32[$6 + 4 >> 2] | 0;
   if (!(($8 & -256 | 0) == 1126902528 & ($11 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = HEAP32[839];
    _abort_message(17461, $vararg_buffer7);
   }
   if (($8 | 0) == 1126902529 & ($11 | 0) == 1129074247) $21 = HEAP32[$2 + 44 >> 2] | 0; else $21 = $2 + 80 | 0;
   HEAP32[$thrown_object >> 2] = $21;
   $22 = HEAP32[$2 >> 2] | 0;
   $24 = HEAP32[$22 + 4 >> 2] | 0;
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[760 >> 2] | 0) + 16 >> 2] & 127](760, $22, $thrown_object) | 0) {
    $29 = HEAP32[$thrown_object >> 2] | 0;
    $30 = HEAP32[839] | 0;
    $34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 8 >> 2] & 127]($29) | 0;
    HEAP32[$vararg_buffer >> 2] = $30;
    HEAP32[$vararg_buffer + 4 >> 2] = $24;
    HEAP32[$vararg_buffer + 8 >> 2] = $34;
    _abort_message(17375, $vararg_buffer);
   } else {
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[839];
    HEAP32[$vararg_buffer3 + 4 >> 2] = $24;
    _abort_message(17420, $vararg_buffer3);
   }
  }
 }
 _abort_message(17499, $vararg_buffer10);
}

function _mbtowc($wc, $src, $n) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $20 = 0, $21 = 0, $29 = 0, $3 = 0, $33 = 0, $38 = 0, $4 = 0, $42 = 0, $48 = 0, $8 = 0, $dummy = 0, $dummy$wc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $dummy = sp;
 L1 : do if (!$src) $$0 = 0; else {
  do if ($n) {
   $dummy$wc = ($wc | 0) == 0 ? $dummy : $wc;
   $3 = HEAP8[$src >> 0] | 0;
   $4 = $3 & 255;
   if ($3 << 24 >> 24 > -1) {
    HEAP32[$dummy$wc >> 2] = $4;
    $$0 = $3 << 24 >> 24 != 0 & 1;
    break L1;
   }
   $8 = $4 + -194 | 0;
   if ($8 >>> 0 <= 50) {
    $10 = $src + 1 | 0;
    $12 = HEAP32[3420 + ($8 << 2) >> 2] | 0;
    if ($n >>> 0 < 4) if ($12 & -2147483648 >>> (($n * 6 | 0) + -6 | 0)) break;
    $20 = HEAPU8[$10 >> 0] | 0;
    $21 = $20 >>> 3;
    if (($21 + -16 | $21 + ($12 >> 26)) >>> 0 <= 7) {
     $29 = $20 + -128 | $12 << 6;
     if (($29 | 0) >= 0) {
      HEAP32[$dummy$wc >> 2] = $29;
      $$0 = 2;
      break L1;
     }
     $33 = HEAPU8[$src + 2 >> 0] | 0;
     if (($33 & 192 | 0) == 128) {
      $38 = $33 + -128 | $29 << 6;
      if (($38 | 0) >= 0) {
       HEAP32[$dummy$wc >> 2] = $38;
       $$0 = 3;
       break L1;
      }
      $42 = HEAPU8[$src + 3 >> 0] | 0;
      if (($42 & 192 | 0) == 128) {
       HEAP32[$dummy$wc >> 2] = $42 + -128 | $38 << 6;
       $$0 = 4;
       break L1;
      }
     }
    }
   }
  } while (0);
  $48 = ___errno_location() | 0;
  HEAP32[$48 >> 2] = 84;
  $$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $10 = 0, $12 = 0, $18 = 0, $19 = 0, $21 = 0, $24 = 0, $34 = 0, $9 = 0;
 if ((1073741806 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if (!(HEAP8[$this >> 0] & 1)) $21 = $this + 4 | 0; else $21 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 536870887) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  $18 = $12 >>> 0 < 2 ? 2 : $12 + 4 & -4;
 } else $18 = 1073741807;
 $19 = __Znwj($18 << 2) | 0;
 if ($__n_copy) _wmemcpy($19, $21, $__n_copy) | 0;
 if ($__n_add) _wmemcpy($19 + ($__n_copy << 2) | 0, $__p_new_stuff, $__n_add) | 0;
 $24 = $__old_sz - $__n_del | 0;
 if (($24 | 0) != ($__n_copy | 0)) _wmemcpy($19 + ($__n_copy << 2) + ($__n_add << 2) | 0, $21 + ($__n_copy << 2) + ($__n_del << 2) | 0, $24 - $__n_copy | 0) | 0;
 if (($__old_cap | 0) != 1) __ZdlPv($21);
 HEAP32[$this + 8 >> 2] = $19;
 HEAP32[$this >> 2] = $18 | 1;
 $34 = $24 + $__n_add | 0;
 HEAP32[$this + 4 >> 2] = $34;
 HEAP32[$19 + ($34 << 2) >> 2] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $10 = 0, $12 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $33 = 0, $9 = 0;
 if ((-18 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if (!(HEAP8[$this >> 0] & 1)) $20 = $this + 1 | 0; else $20 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 2147483623) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  $17 = $12 >>> 0 < 11 ? 11 : $12 + 16 & -16;
 } else $17 = -17;
 $18 = __Znwj($17) | 0;
 if ($__n_copy) _memcpy($18 | 0, $20 | 0, $__n_copy | 0) | 0;
 if ($__n_add) _memcpy($18 + $__n_copy | 0, $__p_new_stuff | 0, $__n_add | 0) | 0;
 $23 = $__old_sz - $__n_del | 0;
 if (($23 | 0) != ($__n_copy | 0)) _memcpy($18 + $__n_copy + $__n_add | 0, $20 + $__n_copy + $__n_del | 0, $23 - $__n_copy | 0) | 0;
 if (($__old_cap | 0) != 10) __ZdlPv($20);
 HEAP32[$this + 8 >> 2] = $18;
 HEAP32[$this >> 2] = $17 | 1;
 $33 = $23 + $__n_add | 0;
 HEAP32[$this + 4 >> 2] = $33;
 HEAP8[$18 + $33 >> 0] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $12 = 0, $15 = 0, $16 = 0, $21 = 0, $27 = 0, $33 = 0, $40 = 0, $8 = 0, $__p$0 = 0, $scevgep1 = 0;
 $0 = $__first;
 $1 = HEAP8[$this >> 0] | 0;
 if (!($1 & 1)) {
  $15 = ($1 & 255) >>> 1;
  $16 = 10;
  $40 = $1;
 } else {
  $8 = HEAP32[$this >> 2] | 0;
  $15 = HEAP32[$this + 4 >> 2] | 0;
  $16 = ($8 & -2) + -1 | 0;
  $40 = $8 & 255;
 }
 $12 = $__last - $0 | 0;
 do if (($__last | 0) != ($__first | 0)) {
  if (($16 - $15 | 0) >>> 0 < $12 >>> 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $16, $15 + $12 - $16 | 0, $15, $15, 0, 0);
   $21 = HEAP8[$this >> 0] | 0;
  } else $21 = $40;
  if (!($21 & 1)) $27 = $this + 1 | 0; else $27 = HEAP32[$this + 8 >> 2] | 0;
  $scevgep1 = $__last + ($15 - $0) | 0;
  $$0 = $__first;
  $__p$0 = $27 + $15 | 0;
  while (1) {
   if (($$0 | 0) == ($__last | 0)) break;
   HEAP8[$__p$0 >> 0] = HEAP8[$$0 >> 0] | 0;
   $$0 = $$0 + 1 | 0;
   $__p$0 = $__p$0 + 1 | 0;
  }
  HEAP8[$27 + $scevgep1 >> 0] = 0;
  $33 = $15 + $12 | 0;
  if (!(HEAP8[$this >> 0] & 1)) {
   HEAP8[$this >> 0] = $33 << 1;
   break;
  } else {
   HEAP32[$this + 4 >> 2] = $33;
   break;
  }
 } while (0);
 return $this | 0;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $11 = 0, $19 = 0, $29 = 0, $6 = 0, $7 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0, $i$1 = 0, label = 0;
 $0 = $f + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) if (!(___towrite($f) | 0)) {
  $9 = HEAP32[$0 >> 2] | 0;
  label = 5;
 } else $$0 = 0; else {
  $9 = $1;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $6 = $f + 20 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $11 = $7;
  if (($9 - $7 | 0) >>> 0 < $l >>> 0) {
   $$0 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 127]($f, $s, $l) | 0;
   break;
  }
  L10 : do if ((HEAP8[$f + 75 >> 0] | 0) > -1) {
   $i$0 = $l;
   while (1) {
    if (!$i$0) {
     $$01 = $l;
     $$02 = $s;
     $29 = $11;
     $i$1 = 0;
     break L10;
    }
    $19 = $i$0 + -1 | 0;
    if ((HEAP8[$s + $19 >> 0] | 0) == 10) {
     $i$0$lcssa12 = $i$0;
     break;
    } else $i$0 = $19;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 127]($f, $s, $i$0$lcssa12) | 0) >>> 0 < $i$0$lcssa12 >>> 0) {
    $$0 = $i$0$lcssa12;
    break L5;
   }
   $$01 = $l - $i$0$lcssa12 | 0;
   $$02 = $s + $i$0$lcssa12 | 0;
   $29 = HEAP32[$6 >> 2] | 0;
   $i$1 = $i$0$lcssa12;
  } else {
   $$01 = $l;
   $$02 = $s;
   $29 = $11;
   $i$1 = 0;
  } while (0);
  _memcpy($29 | 0, $$02 | 0, $$01 | 0) | 0;
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $$01;
  $$0 = $i$1 + $$01 | 0;
 } while (0);
 return $$0 | 0;
}

function __ZN6VectoranERKS_($this, $obj) {
 $this = $this | 0;
 $obj = $obj | 0;
 var $0 = 0, $1 = 0, $19 = 0.0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $i$04 = 0, $i$04$us = 0, $j$03$us = 0, label = 0;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $obj + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = __Znwj(12) | 0;
 __ZN6MatrixC2Eii($4, $1, $3);
 if (($1 | 0) <= 0) return $4 | 0;
 if (($3 | 0) > 0) $i$04$us = 0; else {
  $i$04 = 0;
  do $i$04 = $i$04 + 1 | 0; while (($i$04 | 0) < ($1 | 0));
  return $4 | 0;
 }
 L8 : while (1) {
  $j$03$us = 0;
  do {
   if ((HEAP32[$0 >> 2] | 0) <= ($i$04$us | 0)) {
    label = 10;
    break L8;
   }
   if ((HEAP32[$2 >> 2] | 0) <= ($j$03$us | 0)) {
    label = 11;
    break L8;
   }
   $19 = +HEAPF64[(HEAP32[$this >> 2] | 0) + ($i$04$us << 3) >> 3] * +HEAPF64[(HEAP32[$obj >> 2] | 0) + ($j$03$us << 3) >> 3];
   $20 = __ZNK6Matrix9ElementAtEii($4, $i$04$us, $j$03$us) | 0;
   HEAPF64[$20 >> 3] = $19;
   $j$03$us = $j$03$us + 1 | 0;
  } while (($j$03$us | 0) < ($3 | 0));
  $i$04$us = $i$04$us + 1 | 0;
  if (($i$04$us | 0) >= ($1 | 0)) {
   label = 8;
   break;
  }
 }
 if ((label | 0) == 8) return $4 | 0; else if ((label | 0) == 10) {
  $25 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$25 >> 2] = 0;
  ___cxa_throw($25 | 0, 936, 0);
 } else if ((label | 0) == 11) {
  $26 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$26 >> 2] = 0;
  ___cxa_throw($26 | 0, 936, 0);
 }
 return 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $13 = 0, $16 = 0, $17 = 0, $22 = 0, $28 = 0, $32 = 0, $37 = 0, $44 = 0, $8 = 0, $__p$0 = 0;
 $0 = $__first;
 $1 = HEAP8[$this >> 0] | 0;
 if (!($1 & 1)) {
  $16 = ($1 & 255) >>> 1;
  $17 = 1;
  $44 = $1;
 } else {
  $8 = HEAP32[$this >> 2] | 0;
  $16 = HEAP32[$this + 4 >> 2] | 0;
  $17 = ($8 & -2) + -1 | 0;
  $44 = $8 & 255;
 }
 $13 = $__last - $0 >> 2;
 do if ($13) {
  if (($17 - $16 | 0) >>> 0 < $13 >>> 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $17, $16 + $13 - $17 | 0, $16, $16, 0, 0);
   $22 = HEAP8[$this >> 0] | 0;
  } else $22 = $44;
  if (!($22 & 1)) $28 = $this + 4 | 0; else $28 = HEAP32[$this + 8 >> 2] | 0;
  $32 = $16 + (($__last - $0 | 0) >>> 2) | 0;
  $$0 = $__first;
  $__p$0 = $28 + ($16 << 2) | 0;
  while (1) {
   if (($$0 | 0) == ($__last | 0)) break;
   HEAP32[$__p$0 >> 2] = HEAP32[$$0 >> 2];
   $$0 = $$0 + 4 | 0;
   $__p$0 = $__p$0 + 4 | 0;
  }
  HEAP32[$28 + ($32 << 2) >> 2] = 0;
  $37 = $16 + $13 | 0;
  if (!(HEAP8[$this >> 0] & 1)) {
   HEAP8[$this >> 0] = $37 << 1;
   break;
  } else {
   HEAP32[$this + 4 >> 2] = $37;
   break;
  }
 } while (0);
 return $this | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $14 = 0, $22 = 0, $23 = 0, $29 = 0, $31 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1) | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 if (!($6 & 1)) $23 = ($6 & 255) >>> 1; else $23 = HEAP32[$5 + 4 >> 2] | 0;
 $14 = HEAP8[$5 + 12 >> 0] | 0;
 if (!($14 & 1)) $22 = ($14 & 255) >>> 1; else $22 = HEAP32[$5 + 16 >> 2] | 0;
 do if (($23 | 0) == (0 - $22 | 0)) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; else {
  HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  $29 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $5 + 24 | 0, $__ct, $__err, 0) | 0;
  $31 = HEAP32[$__h >> 2] | 0;
  if (($29 | 0) == ($5 | 0) & ($31 | 0) == 12) {
   HEAP32[$__h >> 2] = 0;
   break;
  }
  if (($31 | 0) < 12 & ($29 - $5 | 0) == 12) HEAP32[$__h >> 2] = $31 + 12;
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $14 = 0, $22 = 0, $23 = 0, $29 = 0, $31 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 127]($1) | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 if (!($6 & 1)) $23 = ($6 & 255) >>> 1; else $23 = HEAP32[$5 + 4 >> 2] | 0;
 $14 = HEAP8[$5 + 12 >> 0] | 0;
 if (!($14 & 1)) $22 = ($14 & 255) >>> 1; else $22 = HEAP32[$5 + 16 >> 2] | 0;
 do if (($23 | 0) == (0 - $22 | 0)) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; else {
  HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  $29 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $5 + 24 | 0, $__ct, $__err, 0) | 0;
  $31 = HEAP32[$__h >> 2] | 0;
  if (($29 | 0) == ($5 | 0) & ($31 | 0) == 12) {
   HEAP32[$__h >> 2] = 0;
   break;
  }
  if (($31 | 0) < 12 & ($29 - $5 | 0) == 12) HEAP32[$__h >> 2] = $31 + 12;
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i$1 = 0, $$pre$i = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $19 = 0, $3 = 0, $8 = 0, $__v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 $3 = HEAP32[$this + 4 >> 2] | 0;
 if ($1 - $3 >> 2 >>> 0 < $__n >>> 0) {
  $8 = HEAP32[$this >> 2] | 0;
  $10 = $3 - $8 >> 2;
  $11 = $10 + $__n | 0;
  if ($11 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  $13 = $1 - $8 | 0;
  if ($13 >> 2 >>> 0 < 536870911) {
   $16 = $13 >> 1;
   $$0$i$1 = $16 >>> 0 < $11 >>> 0 ? $11 : $16;
  } else $$0$i$1 = 1073741823;
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v, $$0$i$1, $10, $this + 16 | 0);
  $19 = $__v + 8 | 0;
  $$pre$i = HEAP32[$19 >> 2] | 0;
  _memset($$pre$i | 0, 0, $__n << 2 | 0) | 0;
  HEAP32[$19 >> 2] = $$pre$i + ($__n << 2);
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 } else __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this, $__n);
 STACKTOP = sp;
 return;
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$0 = 0, $$phi$trans$insert3 = 0, $$pre = 0, $0 = 0, $1 = 0, $13 = 0, $19 = 0, $21 = 0, $25 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $41 = 0, $6 = 0, $9 = 0, label = 0;
 $0 = $f + 104 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) label = 3; else if ((HEAP32[$f + 108 >> 2] | 0) < ($1 | 0)) label = 3; else label = 4;
 if ((label | 0) == 3) {
  $6 = ___uflow($f) | 0;
  if (($6 | 0) < 0) label = 4; else {
   $9 = HEAP32[$0 >> 2] | 0;
   $$pre = HEAP32[$f + 8 >> 2] | 0;
   if (!$9) {
    $41 = $$pre;
    label = 9;
   } else {
    $13 = HEAP32[$f + 4 >> 2] | 0;
    $19 = $9 - (HEAP32[$f + 108 >> 2] | 0) + -1 | 0;
    $21 = $$pre;
    if (($$pre - $13 | 0) > ($19 | 0)) {
     HEAP32[$f + 100 >> 2] = $13 + $19;
     $25 = $21;
    } else {
     $41 = $21;
     label = 9;
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$f + 100 >> 2] = $$pre;
    $25 = $41;
   }
   $$phi$trans$insert3 = $f + 4 | 0;
   if (!$25) $36 = HEAP32[$$phi$trans$insert3 >> 2] | 0; else {
    $27 = HEAP32[$$phi$trans$insert3 >> 2] | 0;
    $29 = $f + 108 | 0;
    HEAP32[$29 >> 2] = $25 + 1 - $27 + (HEAP32[$29 >> 2] | 0);
    $36 = $27;
   }
   $35 = $36 + -1 | 0;
   if ((HEAPU8[$35 >> 0] | 0 | 0) == ($6 | 0)) $$0 = $6; else {
    HEAP8[$35 >> 0] = $6;
    $$0 = $6;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$f + 100 >> 2] = 0;
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $$1 = 0, $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$1 = 0;
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  $4 = _strtoll_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $5 = tempRet0;
  $6 = HEAP32[$1 >> 2] | 0;
  if (!$6) HEAP32[$1 >> 2] = $2;
  L7 : do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) {
   do if (($6 | 0) == 34) {
    HEAP32[$__err >> 2] = 4;
    if (($5 | 0) > 0 | ($5 | 0) == 0 & $4 >>> 0 > 0) {
     $$0 = 2147483647;
     break L7;
    }
   } else {
    if (($5 | 0) < -1 | ($5 | 0) == -1 & $4 >>> 0 < 2147483648) {
     HEAP32[$__err >> 2] = 4;
     break;
    }
    if (($5 | 0) > 0 | ($5 | 0) == 0 & $4 >>> 0 > 2147483647) {
     HEAP32[$__err >> 2] = 4;
     $$0 = 2147483647;
     break L7;
    } else {
     $$0 = $4;
     break L7;
    }
   } while (0);
   $$0 = -2147483648;
  } else {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
  } while (0);
  $$1 = $$0;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $$0$i$i = 0, $$lcssa = 0, $10 = 0, $11 = 0, $21 = 0, $23 = 0, $4 = 0, $7 = 0, $8 = 0, $__nar = 0, $__ne = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__nar = sp + 4 | 0;
 $__ne = sp;
 HEAP32[$__ne >> 2] = $__nar + 100;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this + 8 | 0, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $4 = HEAP32[$__ne >> 2] | 0;
 $$0$i$i = $__nar;
 $8 = HEAP32[$__s >> 2] | 0;
 while (1) {
  if (($$0$i$i | 0) == ($4 | 0)) {
   $$lcssa = $8;
   break;
  }
  $7 = HEAP8[$$0$i$i >> 0] | 0;
  do if (!$8) $23 = 0; else {
   $10 = $8 + 24 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$8 + 28 >> 2] | 0)) {
    $21 = (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 52 >> 2] & 63]($8, $7 & 255) | 0) == -1;
    $23 = $21 ? 0 : $8;
    break;
   } else {
    HEAP32[$10 >> 2] = $11 + 1;
    HEAP8[$11 >> 0] = $7;
    $23 = $8;
    break;
   }
  } while (0);
  $$0$i$i = $$0$i$i + 1 | 0;
  $8 = $23;
 }
 STACKTOP = sp;
 return $$lcssa | 0;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $3 = 0, $5 = 0, $8 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $b = sp + 112 | 0;
 $f = sp;
 dest = $f;
 src = 3656;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $$01 = $b;
  $$02 = 1;
  label = 4;
 } else {
  $3 = ___errno_location() | 0;
  HEAP32[$3 >> 2] = 75;
  $$0 = -1;
 } else {
  $$01 = $s;
  $$02 = $n;
  label = 4;
 }
 if ((label | 0) == 4) {
  $5 = -2 - $$01 | 0;
  $$$02 = $$02 >>> 0 > $5 >>> 0 ? $5 : $$02;
  HEAP32[$f + 48 >> 2] = $$$02;
  $8 = $f + 20 | 0;
  HEAP32[$8 >> 2] = $$01;
  HEAP32[$f + 44 >> 2] = $$01;
  $10 = $$01 + $$$02 | 0;
  $11 = $f + 16 | 0;
  HEAP32[$11 >> 2] = $10;
  HEAP32[$f + 28 >> 2] = $10;
  $13 = _vfprintf($f, $fmt, $ap) | 0;
  if (!$$$02) $$0 = $13; else {
   $15 = HEAP32[$8 >> 2] | 0;
   HEAP8[$15 + ((($15 | 0) == (HEAP32[$11 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$lcssa = 0, $10 = 0, $11 = 0, $22 = 0, $4 = 0, $7 = 0, $8 = 0, $__nar = 0, $__ne = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 $__nar = sp + 8 | 0;
 $__ne = sp;
 HEAP32[$__ne >> 2] = $__nar + 400;
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this + 8 | 0, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $4 = HEAP32[$__ne >> 2] | 0;
 $$0$i$i = $__nar;
 $8 = HEAP32[$__s >> 2] | 0;
 while (1) {
  if (($$0$i$i | 0) == ($4 | 0)) {
   $$lcssa = $8;
   break;
  }
  $7 = HEAP32[$$0$i$i >> 2] | 0;
  if (!$8) $22 = 0; else {
   $10 = $8 + 24 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$8 + 28 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 52 >> 2] & 63]($8, $7) | 0; else {
    HEAP32[$10 >> 2] = $11 + 4;
    HEAP32[$11 >> 2] = $7;
    $$0$i$i$i$i = $7;
   }
   $22 = ($$0$i$i$i$i | 0) == -1 ? 0 : $8;
  }
  $$0$i$i = $$0$i$i + 4 | 0;
  $8 = $22;
 }
 STACKTOP = sp;
 return $$lcssa | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $10 = 0, $12 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $9 = 0;
 if ((1073741807 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if (!(HEAP8[$this >> 0] & 1)) $21 = $this + 4 | 0; else $21 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 536870887) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  $18 = $12 >>> 0 < 2 ? 2 : $12 + 4 & -4;
 } else $18 = 1073741807;
 $19 = __Znwj($18 << 2) | 0;
 if ($__n_copy) _wmemcpy($19, $21, $__n_copy) | 0;
 $22 = $__old_sz - $__n_del | 0;
 if (($22 | 0) != ($__n_copy | 0)) _wmemcpy($19 + ($__n_copy << 2) + ($__n_add << 2) | 0, $21 + ($__n_copy << 2) + ($__n_del << 2) | 0, $22 - $__n_copy | 0) | 0;
 if (($__old_cap | 0) != 1) __ZdlPv($21);
 HEAP32[$this + 8 >> 2] = $19;
 HEAP32[$this >> 2] = $18 | 1;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = $this + 8 | 0;
 $6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 127]($2) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 $9 = HEAP8[$6 >> 0] | 0;
 $11 = ($9 & 1) == 0;
 $14 = $6 + 4 | 0;
 $15 = $11 ? $14 : HEAP32[$6 + 8 >> 2] | 0;
 $20 = $15 + (($11 ? ($9 & 255) >>> 1 : HEAP32[$14 >> 2] | 0) << 2) | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $21 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__tm, $15, $20) | 0;
 STACKTOP = sp;
 return $21 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $10 = 0, $12 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $9 = 0;
 if ((-17 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if (!(HEAP8[$this >> 0] & 1)) $20 = $this + 1 | 0; else $20 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 2147483623) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  $17 = $12 >>> 0 < 11 ? 11 : $12 + 16 & -16;
 } else $17 = -17;
 $18 = __Znwj($17) | 0;
 if ($__n_copy) _memcpy($18 | 0, $20 | 0, $__n_copy | 0) | 0;
 $21 = $__old_sz - $__n_del | 0;
 if (($21 | 0) != ($__n_copy | 0)) _memcpy($18 + $__n_copy + $__n_add | 0, $20 + $__n_copy + $__n_del | 0, $21 - $__n_copy | 0) | 0;
 if (($__old_cap | 0) != 10) __ZdlPv($20);
 HEAP32[$this + 8 >> 2] = $18;
 HEAP32[$this >> 2] = $17 | 1;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $11 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = $this + 8 | 0;
 $6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 127]($2) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 $9 = HEAP8[$6 >> 0] | 0;
 $11 = ($9 & 1) == 0;
 $15 = $11 ? $6 + 1 | 0 : HEAP32[$6 + 8 >> 2] | 0;
 $21 = $15 + ($11 ? ($9 & 255) >>> 1 : HEAP32[$6 + 4 >> 2] | 0) | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $22 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__tm, $15, $21) | 0;
 STACKTOP = sp;
 return $22 | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $16 = 0, $17 = 0, $22 = 0, $25 = 0, $5 = 0, $6 = 0;
 HEAP8[$info + 53 >> 0] = 1;
 do if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
  HEAP8[$info + 52 >> 0] = 1;
  $5 = $info + 16 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if (!$6) {
   HEAP32[$5 >> 2] = $dst_ptr;
   HEAP32[$info + 24 >> 2] = $path_below;
   HEAP32[$info + 36 >> 2] = 1;
   if (!(($path_below | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  if (($6 | 0) != ($dst_ptr | 0)) {
   $25 = $info + 36 | 0;
   HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $16 = $info + 24 | 0;
  $17 = HEAP32[$16 >> 2] | 0;
  if (($17 | 0) == 2) {
   HEAP32[$16 >> 2] = $path_below;
   $22 = $path_below;
  } else $22 = $17;
  if (($22 | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0) HEAP8[$info + 54 >> 0] = 1;
 } while (0);
 return;
}

function ___cxx_global_array_dtor_46($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11540);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11528);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11516);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11504);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11492);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11480);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11468);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11456);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11444);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11432);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11420);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11408);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11396);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11384);
 return;
}

function ___cxx_global_array_dtor($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11368);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11356);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11344);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11332);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11320);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11308);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11296);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11284);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11272);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11260);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11248);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11236);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11224);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11212);
 return;
}

function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $1 = 0, $13 = 0, $5 = 0, $9 = 0, $__loc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 $0 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10384) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 48 >> 2] & 63]($1, 22824, 22856, $__atoms) | 0;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10540) | 0;
 $9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 127]($5) | 0;
 HEAP32[$__decimal_point >> 2] = $9;
 $13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] & 127]($5) | 0;
 HEAP32[$__thousands_sep >> 2] = $13;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 127]($agg$result, $5);
 __ZNSt3__114__shared_count16__release_sharedEv($0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $1 = 0, $13 = 0, $5 = 0, $9 = 0, $__loc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 $0 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10392) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] & 63]($1, 22824, 22856, $__atoms) | 0;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10532) | 0;
 $9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 127]($5) | 0;
 HEAP8[$__decimal_point >> 0] = $9;
 $13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] & 127]($5) | 0;
 HEAP8[$__thousands_sep >> 0] = $13;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 127]($agg$result, $5);
 __ZNSt3__114__shared_count16__release_sharedEv($0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $6 = 0;
 do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
   $6 = $info + 28 | 0;
   if ((HEAP32[$6 >> 2] | 0) != 1) HEAP32[$6 >> 2] = $path_below;
  }
 } else if (($this | 0) == (HEAP32[$info >> 2] | 0)) {
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $14 = $info + 20 | 0;
   if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    HEAP32[$14 >> 2] = $current_ptr;
    $20 = $info + 40 | 0;
    HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) HEAP8[$info + 54 >> 0] = 1;
    HEAP32[$info + 44 >> 2] = 4;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $13 = 0, $14 = 0, $25 = 0, $28 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$05 = $s;
  $7 = $0;
  $8 = $1;
  while (1) {
   $9 = ___uremdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $13 = $$05 + -1 | 0;
   HEAP8[$13 >> 0] = $9 | 48;
   $14 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0;
   if ($8 >>> 0 > 9 | ($8 | 0) == 9 & $7 >>> 0 > 4294967295) {
    $$05 = $13;
    $7 = $14;
    $8 = tempRet0;
   } else {
    $$lcssa20 = $13;
    $28 = $14;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;
  $$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;
  $$01$lcssa$off0 = $0;
 }
 if (!$$01$lcssa$off0) $$1$lcssa = $$0$lcssa; else {
  $$12 = $$0$lcssa;
  $y$03 = $$01$lcssa$off0;
  while (1) {
   $25 = $$12 + -1 | 0;
   HEAP8[$25 >> 0] = ($y$03 >>> 0) % 10 | 0 | 48;
   if ($y$03 >>> 0 < 10) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;
    $y$03 = ($y$03 >>> 0) / 10 | 0;
   }
  }
 }
 return $$1$lcssa | 0;
}

function __ZN6MatrixaSERKS_($this, $obj) {
 $this = $this | 0;
 $obj = $obj | 0;
 var $13 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $26 = 0, $7 = 0, $i$03$us = 0, $j$02$us = 0;
 if (($this | 0) == ($obj | 0)) return $this | 0;
 $2 = HEAP32[$this + 4 >> 2] | 0;
 if (($2 | 0) != (HEAP32[$obj + 4 >> 2] | 0)) {
  $26 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$26 >> 2] = 15089;
  ___cxa_throw($26 | 0, 888, 0);
 }
 $7 = HEAP32[$this + 8 >> 2] | 0;
 if (($7 | 0) != (HEAP32[$obj + 8 >> 2] | 0)) {
  $26 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$26 >> 2] = 15089;
  ___cxa_throw($26 | 0, 888, 0);
 }
 if (($2 | 0) <= 0) return $this | 0;
 $13 = HEAP32[$obj >> 2] | 0;
 if (($7 | 0) <= 0) return $this | 0;
 $14 = HEAP32[$this >> 2] | 0;
 $i$03$us = 0;
 do {
  $18 = HEAP32[$13 + ($i$03$us << 2) >> 2] | 0;
  $21 = HEAP32[$14 + ($i$03$us << 2) >> 2] | 0;
  $j$02$us = 0;
  do {
   HEAPF64[$21 + ($j$02$us << 3) >> 3] = +HEAPF64[$18 + ($j$02$us << 3) >> 3];
   $j$02$us = $j$02$us + 1 | 0;
  } while (($j$02$us | 0) < ($7 | 0));
  $i$03$us = $i$03$us + 1 | 0;
 } while (($i$03$us | 0) < ($2 | 0));
 return $this | 0;
}

function __ZlsRNSt3__113basic_ostreamIcNS_11char_traitsIcEEEER8SolPoint($os, $obj) {
 $os = $os | 0;
 $obj = $obj | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $16 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($os, 15083, 2) | 0;
 $6 = __ZlsRNSt3__113basic_ostreamIcNS_11char_traitsIcEEEERK6Vector(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEd($1, +HEAPF64[$obj + 8 >> 3]) | 0, 15086, 2) | 0, $obj) | 0;
 $11 = __ZNKSt3__18ios_base6getlocEv($6 + (HEAP32[(HEAP32[$6 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 HEAP32[$0 >> 2] = $11;
 $12 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 10392) | 0;
 $16 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 63]($12, 10) | 0;
 __ZNSt3__16localeD2Ev($0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($6, $16) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($6) | 0;
 STACKTOP = sp;
 return $os | 0;
}

function __ZN14NordsieckState4ZNewERK6Matrix($arg) {
 $arg = $arg | 0;
 var $0 = 0, $11 = 0, $12 = 0.0, $13 = 0, $15 = 0.0, $16 = 0, $2 = 0, $4 = 0, $5 = 0, $i$02$us$us = 0, $j$03$us$us = 0, $k$05$us = 0, $j$03$us$us$looptemp = 0;
 $0 = __Znwj(12) | 0;
 __ZN6MatrixC2ERKS_($0, $arg);
 $2 = HEAP32[$arg + 8 >> 2] | 0;
 $4 = HEAP32[$arg + 4 >> 2] | 0;
 $5 = $2 + -1 | 0;
 if (($2 | 0) > 1 & ($4 | 0) > 0) $k$05$us = 0; else return $0 | 0;
 do {
  $j$03$us$us = $5;
  do {
   $j$03$us$us$looptemp = $j$03$us$us;
   $j$03$us$us = $j$03$us$us + -1 | 0;
   $i$02$us$us = 0;
   do {
    $11 = __ZNK6Matrix9ElementAtEii($0, $i$02$us$us, $j$03$us$us$looptemp) | 0;
    $12 = +HEAPF64[$11 >> 3];
    $13 = __ZNK6Matrix9ElementAtEii($0, $i$02$us$us, $j$03$us$us) | 0;
    $15 = $12 + +HEAPF64[$13 >> 3];
    $16 = __ZNK6Matrix9ElementAtEii($0, $i$02$us$us, $j$03$us$us) | 0;
    HEAPF64[$16 >> 3] = $15;
    $i$02$us$us = $i$02$us$us + 1 | 0;
   } while (($i$02$us$us | 0) != ($4 | 0));
  } while (($j$03$us$us | 0) > ($k$05$us | 0));
  $k$05$us = $k$05$us + 1 | 0;
 } while (($k$05$us | 0) != ($5 | 0));
 return $0 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $13 = 0;
  $14 = 0;
 } else {
  if ((HEAP8[$__a >> 0] | 0) == 45) {
   HEAP32[$__err >> 2] = 4;
   $13 = 0;
   $14 = 0;
   break;
  }
  $3 = ___errno_location() | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = 0;
  $6 = _strtoull_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $7 = tempRet0;
  $8 = HEAP32[$3 >> 2] | 0;
  if (!$8) HEAP32[$3 >> 2] = $4;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($8 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $15 = -1;
   $16 = -1;
  } else {
   $15 = $6;
   $16 = $7;
  } else {
   HEAP32[$__err >> 2] = 4;
   $15 = 0;
   $16 = 0;
  }
  $13 = $16;
  $14 = $15;
 } while (0);
 tempRet0 = $13;
 STACKTOP = sp;
 return $14 | 0;
}

function _fflush($f) {
 $f = $f | 0;
 var $$0 = 0, $$01$2 = 0, $$014 = 0, $23 = 0, $27 = 0, $6 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0;
 do if (!$f) {
  if (!(HEAP32[852] | 0)) $27 = 0; else $27 = _fflush(HEAP32[852] | 0) | 0;
  ___lock(3388);
  $$01$2 = HEAP32[846] | 0;
  if (!$$01$2) $r$0$lcssa = $27; else {
   $$014 = $$01$2;
   $r$03 = $27;
   while (1) {
    if ((HEAP32[$$014 + 76 >> 2] | 0) > -1) $23 = ___lockfile($$014) | 0; else $23 = 0;
    if ((HEAP32[$$014 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$014 + 28 >> 2] | 0) >>> 0) $r$1 = ___fflush_unlocked($$014) | 0 | $r$03; else $r$1 = $r$03;
    if ($23) ___unlockfile($$014);
    $$014 = HEAP32[$$014 + 56 >> 2] | 0;
    if (!$$014) {
     $r$0$lcssa = $r$1;
     break;
    } else $r$03 = $r$1;
   }
  }
  ___unlock(3388);
  $$0 = $r$0$lcssa;
 } else {
  if ((HEAP32[$f + 76 >> 2] | 0) <= -1) {
   $$0 = ___fflush_unlocked($f) | 0;
   break;
  }
  $phitmp = (___lockfile($f) | 0) == 0;
  $6 = ___fflush_unlocked($f) | 0;
  if ($phitmp) $$0 = $6; else {
   ___unlockfile($f);
   $$0 = $6;
  }
 } while (0);
 return $$0 | 0;
}

function __ZlsRNSt3__113basic_ostreamIcNS_11char_traitsIcEEEERK6Vector($os, $obj) {
 $os = $os | 0;
 $obj = $obj | 0;
 var $0 = 0, $1 = 0, $13 = 0, $8 = 0, $9 = 0, $i$01 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = $obj + 4 | 0;
 if ((HEAP32[$1 >> 2] | 0) > 0) {
  $i$01 = 0;
  do {
   __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEd($os, +HEAPF64[(HEAP32[$obj >> 2] | 0) + ($i$01 << 3) >> 3]) | 0, 15172, 1) | 0;
   $i$01 = $i$01 + 1 | 0;
  } while (($i$01 | 0) < (HEAP32[$1 >> 2] | 0));
 }
 $8 = __ZNKSt3__18ios_base6getlocEv($os + (HEAP32[(HEAP32[$os >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 HEAP32[$0 >> 2] = $8;
 $9 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 10392) | 0;
 $13 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$9 >> 2] | 0) + 28 >> 2] & 63]($9, 10) | 0;
 __ZNSt3__16localeD2Ev($0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($os, $13) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($os) | 0;
 STACKTOP = sp;
 return $os | 0;
}

function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $$1 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$1 = 0;
 } else {
  if ((HEAP8[$__a >> 0] | 0) == 45) {
   HEAP32[$__err >> 2] = 4;
   $$1 = 0;
   break;
  }
  $3 = ___errno_location() | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = 0;
  $6 = _strtoull_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $7 = tempRet0;
  $8 = HEAP32[$3 >> 2] | 0;
  if (!$8) HEAP32[$3 >> 2] = $4;
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if ($7 >>> 0 > 0 | ($7 | 0) == 0 & $6 >>> 0 > 65535 | ($8 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $$0 = -1;
   break;
  } else {
   $$0 = $6 & 65535;
   break;
  } else {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
  } while (0);
  $$1 = $$0;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $$1 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$1 = 0;
 } else {
  if ((HEAP8[$__a >> 0] | 0) == 45) {
   HEAP32[$__err >> 2] = 4;
   $$1 = 0;
   break;
  }
  $3 = ___errno_location() | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = 0;
  $6 = _strtoull_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $7 = tempRet0;
  $8 = HEAP32[$3 >> 2] | 0;
  if (!$8) HEAP32[$3 >> 2] = $4;
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if ($7 >>> 0 > 0 | ($7 | 0) == 0 & $6 >>> 0 > 4294967295 | ($8 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $$0 = -1;
   break;
  } else {
   $$0 = $6;
   break;
  } else {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
  } while (0);
  $$1 = $$0;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $$1 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$1 = 0;
 } else {
  if ((HEAP8[$__a >> 0] | 0) == 45) {
   HEAP32[$__err >> 2] = 4;
   $$1 = 0;
   break;
  }
  $3 = ___errno_location() | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = 0;
  $6 = _strtoull_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $7 = tempRet0;
  $8 = HEAP32[$3 >> 2] | 0;
  if (!$8) HEAP32[$3 >> 2] = $4;
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if ($7 >>> 0 > 0 | ($7 | 0) == 0 & $6 >>> 0 > 4294967295 | ($8 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $$0 = -1;
   break;
  } else {
   $$0 = $6;
   break;
  } else {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
  } while (0);
  $$1 = $$0;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $18 = 0;
  $19 = 0;
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  $4 = _strtoll_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $5 = tempRet0;
  $6 = HEAP32[$1 >> 2] | 0;
  if (!$6) HEAP32[$1 >> 2] = $2;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($6 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $15 = ($5 | 0) > 0 | ($5 | 0) == 0 & $4 >>> 0 > 0;
   $20 = $15 ? -1 : 0;
   $21 = $15 ? 2147483647 : -2147483648;
  } else {
   $20 = $4;
   $21 = $5;
  } else {
   HEAP32[$__err >> 2] = 4;
   $20 = 0;
   $21 = 0;
  }
  $18 = $21;
  $19 = $20;
 }
 tempRet0 = $18;
 STACKTOP = sp;
 return $19 | 0;
}

function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp, $__len, $__signd, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__signd = $__signd | 0;
 $__flags = $__flags | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$1$lcssa = 0, $6 = 0;
 if (!($__flags & 2048)) $$0 = $__fmtp; else {
  HEAP8[$__fmtp >> 0] = 43;
  $$0 = $__fmtp + 1 | 0;
 }
 if (!($__flags & 512)) {
  $$01 = $__len;
  $$1 = $$0;
 } else {
  HEAP8[$$0 >> 0] = 35;
  $$01 = $__len;
  $$1 = $$0 + 1 | 0;
 }
 while (1) {
  $6 = HEAP8[$$01 >> 0] | 0;
  if (!($6 << 24 >> 24)) {
   $$1$lcssa = $$1;
   break;
  }
  HEAP8[$$1 >> 0] = $6;
  $$01 = $$01 + 1 | 0;
  $$1 = $$1 + 1 | 0;
 }
 L10 : do switch ($__flags & 74 | 0) {
 case 64:
  {
   HEAP8[$$1$lcssa >> 0] = 111;
   break;
  }
 case 8:
  {
   if (!($__flags & 16384)) {
    HEAP8[$$1$lcssa >> 0] = 120;
    break L10;
   } else {
    HEAP8[$$1$lcssa >> 0] = 88;
    break L10;
   }
   break;
  }
 default:
  if ($__signd) {
   HEAP8[$$1$lcssa >> 0] = 100;
   break L10;
  } else {
   HEAP8[$$1$lcssa >> 0] = 117;
   break L10;
  }
 } while (0);
 return;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $$0 = 0, $$2 = 0, $2 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 if (($this | 0) == ($thrown_type | 0)) $$2 = 1; else if (!$thrown_type) $$2 = 0; else {
  $2 = ___dynamic_cast($thrown_type, 776, 792, 0) | 0;
  if (!$2) $$2 = 0; else {
   dest = $info;
   stop = dest + 56 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP32[$info >> 2] = $2;
   HEAP32[$info + 8 >> 2] = $this;
   HEAP32[$info + 12 >> 2] = -1;
   HEAP32[$info + 48 >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 63]($2, $info, HEAP32[$adjustedPtr >> 2] | 0, 1);
   if ((HEAP32[$info + 24 >> 2] | 0) == 1) {
    HEAP32[$adjustedPtr >> 2] = HEAP32[$info + 16 >> 2];
    $$0 = 1;
   } else $$0 = 0;
   $$2 = $$0;
  }
 }
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZN6Matrix8IdentityEii($agg$result, $m, $n) {
 $agg$result = $agg$result | 0;
 $m = $m | 0;
 $n = $n | 0;
 var $12 = 0, $15 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i$02$us = 0, $j$01$us = 0;
 HEAP32[$agg$result + 4 >> 2] = $m;
 HEAP32[$agg$result + 8 >> 2] = $n;
 $3 = __Znaj($m >>> 0 > 1073741823 ? -1 : $m << 2) | 0;
 HEAP32[$agg$result >> 2] = $3;
 $4 = ($m | 0) > 0;
 if (!$4) return;
 $5 = $n >>> 0 > 536870911 ? -1 : $n << 3;
 $6 = __Znaj($5) | 0;
 HEAP32[$3 >> 2] = $6;
 if (($m | 0) == 1) if (($n | 0) > 0) $i$02$us = 0; else return; else {
  $17 = 1;
  do {
   $15 = __Znaj($5) | 0;
   HEAP32[$3 + ($17 << 2) >> 2] = $15;
   $17 = $17 + 1 | 0;
  } while (($17 | 0) != ($m | 0));
  if ($4 & ($n | 0) > 0) $i$02$us = 0; else return;
 }
 do {
  $12 = HEAP32[$3 + ($i$02$us << 2) >> 2] | 0;
  $j$01$us = 0;
  do {
   HEAPF64[$12 + ($j$01$us << 3) >> 3] = ($i$02$us | 0) == ($j$01$us | 0) ? 1.0 : 0.0;
   $j$01$us = $j$01$us + 1 | 0;
  } while (($j$01$us | 0) != ($n | 0));
  $i$02$us = $i$02$us + 1 | 0;
 } while (($i$02$us | 0) != ($m | 0));
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $5 = 0, $6 = 0, $9 = 0, $p$0 = 0;
 L1 : do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $5 = HEAP32[$this + 12 >> 2] | 0;
  $6 = $this + 16 + ($5 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this + 16 | 0, $info, $adjustedPtr, $path_below);
  if (($5 | 0) > 1) {
   $9 = $info + 54 | 0;
   $p$0 = $this + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0, $info, $adjustedPtr, $path_below);
    if (HEAP8[$9 >> 0] | 0) break L1;
    $p$0 = $p$0 + 8 | 0;
   } while ($p$0 >>> 0 < $6 >>> 0);
  }
 } while (0);
 return;
}

function _strlen($s) {
 $s = $s | 0;
 var $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn$15 = 0, $0 = 0, $18 = 0, $21 = 0, $5 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0;
 $0 = $s;
 L1 : do if (!($0 & 3)) {
  $$01$lcssa = $s;
  label = 4;
 } else {
  $$014 = $s;
  $21 = $0;
  while (1) {
   if (!(HEAP8[$$014 >> 0] | 0)) {
    $$pn = $21;
    break L1;
   }
   $5 = $$014 + 1 | 0;
   $21 = $5;
   if (!($21 & 3)) {
    $$01$lcssa = $5;
    label = 4;
    break;
   } else $$014 = $5;
  }
 } while (0);
 if ((label | 0) == 4) {
  $w$0 = $$01$lcssa;
  while (1) {
   $9 = HEAP32[$w$0 >> 2] | 0;
   if (!(($9 & -2139062144 ^ -2139062144) & $9 + -16843009)) $w$0 = $w$0 + 4 | 0; else {
    $$lcssa20 = $9;
    $w$0$lcssa = $w$0;
    break;
   }
  }
  if (!(($$lcssa20 & 255) << 24 >> 24)) $$1$lcssa = $w$0$lcssa; else {
   $$pn$15 = $w$0$lcssa;
   while (1) {
    $18 = $$pn$15 + 1 | 0;
    if (!(HEAP8[$18 >> 0] | 0)) {
     $$1$lcssa = $18;
     break;
    } else $$pn$15 = $18;
   }
  }
  $$pn = $$1$lcssa;
 }
 return $$pn - $0 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $st, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $5 = 0, $n$0 = 0, $p$0 = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmp = sp;
 HEAP32[$to_nxt >> 2] = $to;
 $2 = _uselocale(HEAP32[$this + 8 >> 2] | 0) | 0;
 $3 = _wcrtomb($tmp, 0, $st) | 0;
 if ($2) _uselocale($2) | 0;
 L4 : do switch ($3 | 0) {
 case 0:
 case -1:
  {
   $$0 = 2;
   break;
  }
 default:
  {
   $5 = $3 + -1 | 0;
   if ($5 >>> 0 > ($to_end - (HEAP32[$to_nxt >> 2] | 0) | 0) >>> 0) $$0 = 1; else {
    $n$0 = $5;
    $p$0 = $tmp;
    while (1) {
     if (!$n$0) {
      $$0 = 0;
      break L4;
     }
     $12 = HEAP8[$p$0 >> 0] | 0;
     $13 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $13 + 1;
     HEAP8[$13 >> 0] = $12;
     $n$0 = $n$0 + -1 | 0;
     $p$0 = $p$0 + 1 | 0;
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $0 = 0, $19 = 0, $2 = 0, $__cap$0 = 0, $__p$0 = 0, $__sz$0 = 0, label = 0;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) != 0;
 if ($2) {
  $__cap$0 = (HEAP32[$this >> 2] & -2) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 1;
  $__sz$0 = ($0 & 255) >>> 1;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0);
  if (!(HEAP8[$this >> 0] & 1)) label = 7; else label = 8;
 } else if ($2) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$this >> 0] = ($__sz$0 << 1) + 2;
  $$pn = $this + 4 | 0;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$this + 8 >> 2] | 0;
  HEAP32[$this + 4 >> 2] = $__sz$0 + 1;
  $$pn = $19;
 }
 $__p$0 = $$pn + ($__sz$0 << 2) | 0;
 HEAP32[$__p$0 >> 2] = $__c;
 HEAP32[$__p$0 + 4 >> 2] = 0;
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $10 = 0, $11 = 0, $27 = 0, $7 = 0, $8 = 0, $__s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__s = sp;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $this);
 L1 : do if (HEAP8[$__s >> 0] | 0) {
  $7 = HEAP32[$this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  $8 = $7;
  do if ($7) {
   $10 = $8 + 24 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$8 + 28 >> 2] | 0)) if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$7 >> 2] | 0) + 52 >> 2] & 63]($8, $__c & 255) | 0) == -1) break; else break L1; else {
    HEAP32[$10 >> 2] = $11 + 1;
    HEAP8[$11 >> 0] = $__c;
    break L1;
   }
  } while (0);
  $27 = $this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 16 | 0;
  HEAP32[$27 >> 2] = HEAP32[$27 >> 2] | 1;
 } while (0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $12 = 0, $18 = 0, $2 = 0, $3 = 0, $__p$0 = 0, $__p$0$ph = 0;
 $0 = $__first;
 $2 = $__last - $0 | 0;
 $3 = $2 >> 2;
 if ($3 >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($3 >>> 0 < 2) {
  HEAP8[$this >> 0] = $2 >>> 1;
  $__p$0$ph = $this + 4 | 0;
 } else {
  $10 = $3 + 4 & -4;
  $12 = __Znwj($10 << 2) | 0;
  HEAP32[$this + 8 >> 2] = $12;
  HEAP32[$this >> 2] = $10 | 1;
  HEAP32[$this + 4 >> 2] = $3;
  $__p$0$ph = $12;
 }
 $18 = ($__last - $0 | 0) >>> 2;
 $$0 = $__first;
 $__p$0 = $__p$0$ph;
 while (1) {
  if (($$0 | 0) == ($__last | 0)) break;
  HEAP32[$__p$0 >> 2] = HEAP32[$$0 >> 2];
  $$0 = $$0 + 4 | 0;
  $__p$0 = $__p$0 + 4 | 0;
 }
 HEAP32[$__p$0$ph + ($18 << 2) >> 2] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $1 = 0, $15 = 0, $16 = 0, $21 = 0, $27 = 0, $28 = 0, $4 = 0, $8 = 0;
 if ($__n) {
  $1 = HEAP8[$this >> 0] | 0;
  if (!($1 & 1)) {
   $16 = 10;
   $8 = $1;
  } else {
   $4 = HEAP32[$this >> 2] | 0;
   $16 = ($4 & -2) + -1 | 0;
   $8 = $4 & 255;
  }
  if (!($8 & 1)) $15 = ($8 & 255) >>> 1; else $15 = HEAP32[$this + 4 >> 2] | 0;
  if (($16 - $15 | 0) >>> 0 < $__n >>> 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $16, $__n - $16 + $15 | 0, $15, $15, 0, 0);
   $21 = HEAP8[$this >> 0] | 0;
  } else $21 = $8;
  if (!($21 & 1)) $27 = $this + 1 | 0; else $27 = HEAP32[$this + 8 >> 2] | 0;
  _memset($27 + $15 | 0, $__c | 0, $__n | 0) | 0;
  $28 = $15 + $__n | 0;
  if (!(HEAP8[$this >> 0] & 1)) HEAP8[$this >> 0] = $28 << 1; else HEAP32[$this + 4 >> 2] = $28;
  HEAP8[$27 + $28 >> 0] = 0;
 }
 return $this | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $st, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $$04 = 0, $$15 = 0, $$pn = 0, $0 = 0, $1 = 0, $7 = 0, $8 = 0, $nbytes$0 = 0, $nbytes$0$lcssa = 0, $nwchar_t$0 = 0;
 $0 = $frm_end;
 $1 = $this + 8 | 0;
 $$04 = $frm;
 $nbytes$0 = 0;
 $nwchar_t$0 = 0;
 L1 : while (1) {
  if (($$04 | 0) == ($frm_end | 0) | $nwchar_t$0 >>> 0 >= $mx >>> 0) {
   $nbytes$0$lcssa = $nbytes$0;
   break;
  }
  $7 = _uselocale(HEAP32[$1 >> 2] | 0) | 0;
  $8 = _mbrlen($$04, $0 - $$04 | 0, $st) | 0;
  if ($7) _uselocale($7) | 0;
  switch ($8 | 0) {
  case -2:
  case -1:
   {
    $nbytes$0$lcssa = $nbytes$0;
    break L1;
    break;
   }
  case 0:
   {
    $$15 = $$04 + 1 | 0;
    $$pn = 1;
    break;
   }
  default:
   {
    $$15 = $$04 + $8 | 0;
    $$pn = $8;
   }
  }
  $$04 = $$15;
  $nbytes$0 = $$pn + $nbytes$0 | 0;
  $nwchar_t$0 = $nwchar_t$0 + 1 | 0;
 }
 return $nbytes$0$lcssa | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $0 = 0, $19 = 0, $2 = 0, $__cap$0 = 0, $__p$0 = 0, $__sz$0 = 0, label = 0;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) != 0;
 if ($2) {
  $__cap$0 = (HEAP32[$this >> 2] & -2) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 10;
  $__sz$0 = ($0 & 255) >>> 1;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0);
  if (!(HEAP8[$this >> 0] & 1)) label = 7; else label = 8;
 } else if ($2) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$this >> 0] = ($__sz$0 << 1) + 2;
  $$pn = $this + 1 | 0;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$this + 8 >> 2] | 0;
  HEAP32[$this + 4 >> 2] = $__sz$0 + 1;
  $$pn = $19;
 }
 $__p$0 = $$pn + $__sz$0 | 0;
 HEAP8[$__p$0 >> 0] = $__c;
 HEAP8[$__p$0 + 1 >> 0] = 0;
 return;
}

function __ZN6MatrixC2ERKS_($this, $obj) {
 $this = $this | 0;
 $obj = $obj | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $19 = 0, $20 = 0, $4 = 0, $7 = 0, $9 = 0, $i$02 = 0, $j$01 = 0;
 $1 = HEAP32[$obj + 4 >> 2] | 0;
 HEAP32[$this + 4 >> 2] = $1;
 $4 = HEAP32[$obj + 8 >> 2] | 0;
 HEAP32[$this + 8 >> 2] = $4;
 $7 = __Znaj($1 >>> 0 > 1073741823 ? -1 : $1 << 2) | 0;
 HEAP32[$this >> 2] = $7;
 if (($1 | 0) <= 0) return;
 $9 = $4 >>> 0 > 536870911 ? -1 : $4 << 3;
 $10 = ($4 | 0) > 0;
 $13 = $7;
 $i$02 = 0;
 while (1) {
  $11 = __Znaj($9) | 0;
  HEAP32[$13 + ($i$02 << 2) >> 2] = $11;
  if ($10) {
   $16 = HEAP32[(HEAP32[$obj >> 2] | 0) + ($i$02 << 2) >> 2] | 0;
   $19 = HEAP32[(HEAP32[$this >> 2] | 0) + ($i$02 << 2) >> 2] | 0;
   $j$01 = 0;
   do {
    HEAPF64[$19 + ($j$01 << 3) >> 3] = +HEAPF64[$16 + ($j$01 << 3) >> 3];
    $j$01 = $j$01 + 1 | 0;
   } while (($j$01 | 0) < ($4 | 0));
  }
  $20 = $i$02 + 1 | 0;
  if (($20 | 0) >= ($1 | 0)) break;
  $13 = HEAP32[$this >> 2] | 0;
  $i$02 = $20;
 }
 return;
}

function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this | 0;
 var $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__extbe = 0, $__extbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__extbuf = sp + 8 | 0;
 $__extbe = sp;
 $0 = $this + 36 | 0;
 $1 = $this + 40 | 0;
 $2 = $__extbuf + 8 | 0;
 $3 = $__extbuf;
 $4 = $this + 32 | 0;
 L1 : while (1) {
  $5 = HEAP32[$0 >> 2] | 0;
  $10 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 63]($5, HEAP32[$1 >> 2] | 0, $__extbuf, $2, $__extbe) | 0;
  $12 = (HEAP32[$__extbe >> 2] | 0) - $3 | 0;
  if ((_fwrite($__extbuf, 1, $12, HEAP32[$4 >> 2] | 0) | 0) != ($12 | 0)) {
   $$2 = -1;
   break;
  }
  switch ($10 | 0) {
  case 1:
   break;
  case 2:
   {
    $$2 = -1;
    break L1;
    break;
   }
  default:
   {
    label = 4;
    break L1;
   }
  }
 }
 if ((label | 0) == 4) $$2 = ((_fflush(HEAP32[$4 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this | 0;
 var $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__extbe = 0, $__extbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__extbuf = sp + 8 | 0;
 $__extbe = sp;
 $0 = $this + 36 | 0;
 $1 = $this + 40 | 0;
 $2 = $__extbuf + 8 | 0;
 $3 = $__extbuf;
 $4 = $this + 32 | 0;
 L1 : while (1) {
  $5 = HEAP32[$0 >> 2] | 0;
  $10 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 63]($5, HEAP32[$1 >> 2] | 0, $__extbuf, $2, $__extbe) | 0;
  $12 = (HEAP32[$__extbe >> 2] | 0) - $3 | 0;
  if ((_fwrite($__extbuf, 1, $12, HEAP32[$4 >> 2] | 0) | 0) != ($12 | 0)) {
   $$2 = -1;
   break;
  }
  switch ($10 | 0) {
  case 1:
   break;
  case 2:
   {
    $$2 = -1;
    break L1;
    break;
   }
  default:
   {
    label = 4;
    break L1;
   }
  }
 }
 if ((label | 0) == 4) $$2 = ((_fflush(HEAP32[$4 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $10 = 0, $14 = 0, $27 = 0, $3 = 0, $6 = 0, $9 = 0;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $6 = 10;
  $9 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $6 = ($3 & -2) + -1 | 0;
  $9 = $3 & 255;
 }
 $10 = ($9 & 1) == 0;
 do if ($6 >>> 0 < $__n >>> 0) {
  if ($10) $27 = ($9 & 255) >>> 1; else $27 = HEAP32[$this + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $6, $__n - $6 | 0, $27, 0, $27, $__n, $__s);
 } else {
  if ($10) $14 = $this + 1 | 0; else $14 = HEAP32[$this + 8 >> 2] | 0;
  _memmove($14 | 0, $__s | 0, $__n | 0) | 0;
  HEAP8[$14 + $__n >> 0] = 0;
  if (!(HEAP8[$this >> 0] & 1)) {
   HEAP8[$this >> 0] = $__n << 1;
   break;
  } else {
   HEAP32[$this + 4 >> 2] = $__n;
   break;
  }
 } while (0);
 return $this | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $10 = 0, $14 = 0, $27 = 0, $3 = 0, $6 = 0, $9 = 0;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $6 = 1;
  $9 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $6 = ($3 & -2) + -1 | 0;
  $9 = $3 & 255;
 }
 $10 = ($9 & 1) == 0;
 do if ($6 >>> 0 < $__n >>> 0) {
  if ($10) $27 = ($9 & 255) >>> 1; else $27 = HEAP32[$this + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $6, $__n - $6 | 0, $27, 0, $27, $__n, $__s);
 } else {
  if ($10) $14 = $this + 4 | 0; else $14 = HEAP32[$this + 8 >> 2] | 0;
  _wmemmove($14, $__s, $__n) | 0;
  HEAP32[$14 + ($__n << 2) >> 2] = 0;
  if (!(HEAP8[$this >> 0] & 1)) {
   HEAP8[$this >> 0] = $__n << 1;
   break;
  } else {
   HEAP32[$this + 4 >> 2] = $__n;
   break;
  }
 } while (0);
 return $this | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $15 = 0, $2 = 0, $9 = 0, $__p$0 = 0, $__p$0$ph = 0;
 $0 = $__first;
 $2 = $__last - $0 | 0;
 if ($2 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($2 >>> 0 < 11) {
  HEAP8[$this >> 0] = $2 << 1;
  $__p$0$ph = $this + 1 | 0;
 } else {
  $9 = $2 + 16 & -16;
  $10 = __Znwj($9) | 0;
  HEAP32[$this + 8 >> 2] = $10;
  HEAP32[$this >> 2] = $9 | 1;
  HEAP32[$this + 4 >> 2] = $2;
  $__p$0$ph = $10;
 }
 $15 = $__last - $0 | 0;
 $$0 = $__first;
 $__p$0 = $__p$0$ph;
 while (1) {
  if (($$0 | 0) == ($__last | 0)) break;
  HEAP8[$__p$0 >> 0] = HEAP8[$$0 >> 0] | 0;
  $$0 = $$0 + 1 | 0;
  $__p$0 = $__p$0 + 1 | 0;
 }
 HEAP8[$__p$0$ph + $15 >> 0] = 0;
 return;
}

function _pad($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $$0$lcssa6 = 0, $$02 = 0, $10 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0, $7 = 0, $9 = 0, $pad = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $pad = sp;
 do if (($w | 0) > ($l | 0) & ($fl & 73728 | 0) == 0) {
  $3 = $w - $l | 0;
  _memset($pad | 0, $c | 0, ($3 >>> 0 > 256 ? 256 : $3) | 0) | 0;
  $7 = HEAP32[$f >> 2] | 0;
  $9 = ($7 & 32 | 0) == 0;
  if ($3 >>> 0 > 255) {
   $10 = $w - $l | 0;
   $$02 = $3;
   $17 = $7;
   $18 = $9;
   while (1) {
    if ($18) {
     ___fwritex($pad, 256, $f) | 0;
     $14 = HEAP32[$f >> 2] | 0;
    } else $14 = $17;
    $$02 = $$02 + -256 | 0;
    $18 = ($14 & 32 | 0) == 0;
    if ($$02 >>> 0 <= 255) break; else $17 = $14;
   }
   if ($18) $$0$lcssa6 = $10 & 255; else break;
  } else if ($9) $$0$lcssa6 = $3; else break;
  ___fwritex($pad, $$0$lcssa6, $f) | 0;
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNK6VectormlEd($agg$result, $this, $m) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $m = +$m;
 var $1 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $i$01 = 0, $i$01$i = 0, label = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 HEAP32[$agg$result + 4 >> 2] = $1;
 $4 = __Znaj($1 >>> 0 > 536870911 ? -1 : $1 << 3) | 0;
 HEAP32[$agg$result >> 2] = $4;
 $5 = ($1 | 0) > 0;
 if (!$5) return;
 $6 = HEAP32[$this >> 2] | 0;
 $i$01$i = 0;
 do {
  if (($1 | 0) <= ($i$01$i | 0)) {
   label = 4;
   break;
  }
  HEAPF64[$4 + ($i$01$i << 3) >> 3] = +HEAPF64[$6 + ($i$01$i << 3) >> 3];
  $i$01$i = $i$01$i + 1 | 0;
 } while (($i$01$i | 0) < ($1 | 0));
 if ((label | 0) == 4) {
  $8 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$8 >> 2] = 0;
  ___cxa_throw($8 | 0, 936, 0);
 }
 if ($5) $i$01 = 0; else return;
 do {
  $14 = $4 + ($i$01 << 3) | 0;
  HEAPF64[$14 >> 3] = +HEAPF64[$14 >> 3] * $m;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) < ($1 | 0));
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] & 127]($1) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $11 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $5 + 288 | 0, $__ct, $__err, 0) | 0) - $5 | 0;
 if (($11 | 0) < 288) HEAP32[$__m >> 2] = (($11 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] & 127]($1) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $11 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $5 + 288 | 0, $__ct, $__err, 0) | 0) - $5 | 0;
 if (($11 | 0) < 288) HEAP32[$__m >> 2] = (($11 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result, $__iob, $__atoms, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $1 = 0, $5 = 0, $9 = 0, $__loc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 $0 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10384) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 48 >> 2] & 63]($1, 22824, 22850, $__atoms) | 0;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10540) | 0;
 $9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] & 127]($5) | 0;
 HEAP32[$__thousands_sep >> 2] = $9;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 127]($agg$result, $5);
 __ZNSt3__114__shared_count16__release_sharedEv($0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result, $__iob, $__atoms, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $1 = 0, $5 = 0, $9 = 0, $__loc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 $0 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10392) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] & 63]($1, 22824, 22850, $__atoms) | 0;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10532) | 0;
 $9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] & 127]($5) | 0;
 HEAP8[$__thousands_sep >> 0] = $9;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 127]($agg$result, $5);
 __ZNSt3__114__shared_count16__release_sharedEv($0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 10384) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $$byval_copy, $__err, $3);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 10384) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $$byval_copy, $__err, $3);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 10392) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $$byval_copy, $__err, $3);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 10392) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $$byval_copy, $__err, $3);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $4 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $10 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $4, $4 + 168 | 0, $__ct, $__err, 0) | 0) - $4 | 0;
 if (($10 | 0) < 168) HEAP32[$__w >> 2] = (($10 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $4 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$1 >> 2] >> 2] & 127]($1) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $10 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $4, $4 + 168 | 0, $__ct, $__err, 0) | 0) - $4 | 0;
 if (($10 | 0) < 168) HEAP32[$__w >> 2] = (($10 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 10384) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $$byval_copy, $__err, $3);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 10392) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $$byval_copy, $__err, $3);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, $rem) | 0;
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
 $10$1 = tempRet0;
 STACKTOP = __stackBase__;
 return (tempRet0 = $10$1, $10$0) | 0;
}

function _fputc($c, $f) {
 $c = $c | 0;
 $f = $f | 0;
 var $$0 = 0, $10 = 0, $22 = 0, $23 = 0, $31 = 0, $9 = 0, label = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($f) | 0)) label = 3; else {
  if ((HEAP8[$f + 75 >> 0] | 0) == ($c | 0)) label = 10; else {
   $22 = $f + 20 | 0;
   $23 = HEAP32[$22 >> 2] | 0;
   if ($23 >>> 0 < (HEAP32[$f + 16 >> 2] | 0) >>> 0) {
    HEAP32[$22 >> 2] = $23 + 1;
    HEAP8[$23 >> 0] = $c;
    $31 = $c & 255;
   } else label = 10;
  }
  if ((label | 0) == 10) $31 = ___overflow($f, $c) | 0;
  ___unlockfile($f);
  $$0 = $31;
 }
 do if ((label | 0) == 3) {
  if ((HEAP8[$f + 75 >> 0] | 0) != ($c | 0)) {
   $9 = $f + 20 | 0;
   $10 = HEAP32[$9 >> 2] | 0;
   if ($10 >>> 0 < (HEAP32[$f + 16 >> 2] | 0) >>> 0) {
    HEAP32[$9 >> 2] = $10 + 1;
    HEAP8[$10 >> 0] = $c;
    $$0 = $c & 255;
    break;
   }
  }
  $$0 = ___overflow($f, $c) | 0;
 } while (0);
 return $$0 | 0;
}

function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $$0 = 0, $1 = 0.0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $5 = 0, $8 = 0.0, $9 = 0, $y$0 = 0.0;
 if (($n | 0) > 1023) {
  $1 = $x * 8988465674311579538646525.0e283;
  $2 = $n + -1023 | 0;
  if (($2 | 0) > 1023) {
   $5 = $n + -2046 | 0;
   $$0 = ($5 | 0) > 1023 ? 1023 : $5;
   $y$0 = $1 * 8988465674311579538646525.0e283;
  } else {
   $$0 = $2;
   $y$0 = $1;
  }
 } else if (($n | 0) < -1022) {
  $8 = $x * 2.2250738585072014e-308;
  $9 = $n + 1022 | 0;
  if (($9 | 0) < -1022) {
   $12 = $n + 2044 | 0;
   $$0 = ($12 | 0) < -1022 ? -1022 : $12;
   $y$0 = $8 * 2.2250738585072014e-308;
  } else {
   $$0 = $9;
   $y$0 = $8;
  }
 } else {
  $$0 = $n;
  $y$0 = $x;
 }
 $15 = _bitshift64Shl($$0 + 1023 | 0, 0, 52) | 0;
 $16 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = $15;
 HEAP32[tempDoublePtr + 4 >> 2] = $16;
 return +($y$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $$0 = 0, $45 = 0;
 do if (!$s) $$0 = 1; else {
  if ($wc >>> 0 < 128) {
   HEAP8[$s >> 0] = $wc;
   $$0 = 1;
   break;
  }
  if ($wc >>> 0 < 2048) {
   HEAP8[$s >> 0] = $wc >>> 6 | 192;
   HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
   $$0 = 2;
   break;
  }
  if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
   HEAP8[$s >> 0] = $wc >>> 12 | 224;
   HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
   $$0 = 3;
   break;
  }
  if (($wc + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$s >> 0] = $wc >>> 18 | 240;
   HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
   $$0 = 4;
   break;
  } else {
   $45 = ___errno_location() | 0;
   HEAP32[$45 >> 2] = 84;
   $$0 = -1;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $5 = 0, $9 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $this + 4 | 0;
 $3 = $__v + 4 | 0;
 $5 = (HEAP32[$1 >> 2] | 0) - $0 | 0;
 $9 = (HEAP32[$3 >> 2] | 0) + (0 - ($5 >> 2) << 2) | 0;
 HEAP32[$3 >> 2] = $9;
 _memcpy($9 | 0, $0 | 0, $5 | 0) | 0;
 $10 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = $10;
 $12 = $__v + 8 | 0;
 $13 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$12 >> 2] = $13;
 $15 = $this + 8 | 0;
 $16 = $__v + 12 | 0;
 $17 = HEAP32[$15 >> 2] | 0;
 HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$16 >> 2] = $17;
 HEAP32[$__v >> 2] = HEAP32[$3 >> 2];
 return;
}

function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $0 = 0, $10 = 0, $12 = 0, $2 = 0, $20 = 0, $4 = 0, $5 = 0;
 $0 = $__b + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) != 147;
 $4 = HEAP32[$__b >> 2] | 0;
 $5 = (HEAP32[$__e >> 2] | 0) - $4 | 0;
 $$ = $5 >>> 0 < 2147483647 ? $5 << 1 : -1;
 $10 = (HEAP32[$__n >> 2] | 0) - $4 >> 2;
 $12 = _realloc($2 ? $4 : 0, $$) | 0;
 if (!$12) __ZSt17__throw_bad_allocv();
 if ($2) {
  HEAP32[$__b >> 2] = $12;
  $20 = $12;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $12;
  if (!$$pr) $20 = $12; else {
   FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 255]($$pr);
   $20 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$0 >> 2] = 158;
 HEAP32[$__n >> 2] = $20 + ($10 << 2);
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + ($$ >>> 2 << 2);
 return;
}

function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $0 = 0, $10 = 0, $12 = 0, $2 = 0, $20 = 0, $4 = 0, $5 = 0;
 $0 = $__b + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) != 147;
 $4 = HEAP32[$__b >> 2] | 0;
 $5 = (HEAP32[$__e >> 2] | 0) - $4 | 0;
 $$ = $5 >>> 0 < 2147483647 ? $5 << 1 : -1;
 $10 = (HEAP32[$__n >> 2] | 0) - $4 >> 2;
 $12 = _realloc($2 ? $4 : 0, $$) | 0;
 if (!$12) __ZSt17__throw_bad_allocv();
 if ($2) {
  HEAP32[$__b >> 2] = $12;
  $20 = $12;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $12;
  if (!$$pr) $20 = $12; else {
   FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 255]($$pr);
   $20 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$0 >> 2] = 158;
 HEAP32[$__n >> 2] = $20 + ($10 << 2);
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + ($$ >>> 2 << 2);
 return;
}

function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this, $__wb, $__we, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__wb = $__wb | 0;
 $__we = $__we | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $1 = 0, $10 = 0, $11 = 0, $8 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $__nar = sp + 16 | 0;
 $__ne = sp + 12 | 0;
 $mb = sp;
 $__nb = sp + 8 | 0;
 HEAP32[$__ne >> 2] = $__nar + 100;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $1 = $mb;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$__nb >> 2] = $__nar;
 $8 = (HEAP32[$__we >> 2] | 0) - $__wb >> 2;
 $10 = _uselocale(HEAP32[$this >> 2] | 0) | 0;
 $11 = _mbsrtowcs($__wb, $__nb, $8, $mb) | 0;
 if ($10) _uselocale($10) | 0;
 HEAP32[$__we >> 2] = $__wb + ($11 << 2);
 STACKTOP = sp;
 return;
}

function __ZN6VectoraSERKS_($this, $obj) {
 $this = $this | 0;
 $obj = $obj | 0;
 var $16 = 0, $2 = 0, $7 = 0, $9 = 0, $i$01 = 0, label = 0;
 if (($this | 0) == ($obj | 0)) return $this | 0;
 $2 = HEAP32[$this + 4 >> 2] | 0;
 if (($2 | 0) != (HEAP32[$obj + 4 >> 2] | 0)) {
  $16 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$16 >> 2] = 15131;
  ___cxa_throw($16 | 0, 888, 0);
 }
 if (($2 | 0) <= 0) return $this | 0;
 $7 = HEAP32[$obj >> 2] | 0;
 $i$01 = 0;
 while (1) {
  if (($2 | 0) <= ($i$01 | 0)) {
   label = 6;
   break;
  }
  HEAPF64[(HEAP32[$this >> 2] | 0) + ($i$01 << 3) >> 3] = +HEAPF64[$7 + ($i$01 << 3) >> 3];
  $i$01 = $i$01 + 1 | 0;
  if (($i$01 | 0) >= ($2 | 0)) {
   label = 9;
   break;
  }
 }
 if ((label | 0) == 6) {
  $9 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$9 >> 2] = 0;
  ___cxa_throw($9 | 0, 936, 0);
 } else if ((label | 0) == 9) return $this | 0;
 return 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__tm, 10960, 10992) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__tm, 24233, 24241) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZN14NordsieckState7RescaleERK6Matrixd($arg, $r) {
 $arg = $arg | 0;
 $r = +$r;
 var $0 = 0, $11 = 0.0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $R$02 = 0.0, $i$01 = 0, $j$03 = 0;
 $0 = __Znwj(12) | 0;
 __ZN6MatrixC2ERKS_($0, $arg);
 $2 = HEAP32[$0 + 8 >> 2] | 0;
 if (($2 | 0) <= 1) return $0 | 0;
 $4 = $0 + 4 | 0;
 $6 = HEAP32[$4 >> 2] | 0;
 $R$02 = 1.0;
 $j$03 = 1;
 while (1) {
  $R$02 = $R$02 * $r;
  if (($6 | 0) > 0) {
   $i$01 = 0;
   do {
    $9 = __ZNK6Matrix9ElementAtEii($0, $i$01, $j$03) | 0;
    $11 = $R$02 * +HEAPF64[$9 >> 3];
    $12 = __ZNK6Matrix9ElementAtEii($0, $i$01, $j$03) | 0;
    HEAPF64[$12 >> 3] = $11;
    $i$01 = $i$01 + 1 | 0;
    $14 = HEAP32[$4 >> 2] | 0;
   } while (($i$01 | 0) < ($14 | 0));
   $16 = $14;
  } else $16 = $6;
  $j$03 = $j$03 + 1 | 0;
  if (($j$03 | 0) == ($2 | 0)) break; else $6 = $16;
 }
 return $0 | 0;
}

function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $0 = 0, $10 = 0, $12 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0;
 $0 = $__b + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) != 147;
 $4 = HEAP32[$__b >> 2] | 0;
 $5 = (HEAP32[$__e >> 2] | 0) - $4 | 0;
 $$ = $5 >>> 0 < 2147483647 ? $5 << 1 : -1;
 $10 = (HEAP32[$__n >> 2] | 0) - $4 | 0;
 $12 = _realloc($2 ? $4 : 0, $$) | 0;
 if (!$12) __ZSt17__throw_bad_allocv();
 if ($2) {
  HEAP32[$__b >> 2] = $12;
  $19 = $12;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $12;
  if (!$$pr) $19 = $12; else {
   FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 255]($$pr);
   $19 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$0 >> 2] = 158;
 HEAP32[$__n >> 2] = $19 + $10;
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + $$;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $__t$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) {
  if (($2 | 0) < 69) $__t$0 = $2 + 2e3 | 0; else $__t$0 = ($2 + -69 | 0) >>> 0 < 31 ? $2 + 1900 | 0 : $2;
  HEAP32[$__y >> 2] = $__t$0 + -1900;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $__t$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) {
  if (($2 | 0) < 69) $__t$0 = $2 + 2e3 | 0; else $__t$0 = ($2 + -69 | 0) >>> 0 < 31 ? $2 + 1900 | 0 : $2;
  HEAP32[$__y >> 2] = $__t$0 + -1900;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy$1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy$1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy$1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _strerror($e) {
 $e = $e | 0;
 var $$lcssa = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 $i$03 = 0;
 while (1) {
  if ((HEAPU8[17801 + $i$03 >> 0] | 0) == ($e | 0)) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $i$03 = $i$03 + 1 | 0;
  if (($i$03 | 0) == 87) {
   $i$12 = 87;
   $s$01 = 17889;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 2) if (!$i$03$lcssa) $s$0$lcssa = 17889; else {
  $i$12 = $i$03$lcssa;
  $s$01 = 17889;
  label = 5;
 }
 if ((label | 0) == 5) while (1) {
  label = 0;
  $s$1 = $s$01;
  while (1) {
   $9 = $s$1 + 1 | 0;
   if (!(HEAP8[$s$1 >> 0] | 0)) {
    $$lcssa = $9;
    break;
   } else $s$1 = $9;
  }
  $i$12 = $i$12 + -1 | 0;
  if (!$i$12) {
   $s$0$lcssa = $$lcssa;
   break;
  } else {
   $s$01 = $$lcssa;
   label = 5;
  }
 }
 return $s$0$lcssa | 0;
}

function ___overflow($f, $_c) {
 $f = $f | 0;
 $_c = $_c | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $6 = 0, $7 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = sp;
 $0 = $_c & 255;
 HEAP8[$c >> 0] = $0;
 $1 = $f + 16 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) if (!(___towrite($f) | 0)) {
  $9 = HEAP32[$1 >> 2] | 0;
  label = 4;
 } else $$0 = -1; else {
  $9 = $2;
  label = 4;
 }
 do if ((label | 0) == 4) {
  $6 = $f + 20 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  if ($7 >>> 0 < $9 >>> 0) {
   $10 = $_c & 255;
   if (($10 | 0) != (HEAP8[$f + 75 >> 0] | 0)) {
    HEAP32[$6 >> 2] = $7 + 1;
    HEAP8[$7 >> 0] = $0;
    $$0 = $10;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 127]($f, $c, 1) | 0) == 1) $$0 = HEAPU8[$c >> 0] | 0; else $$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this | 0;
 var $9 = 0, $__i$0$i$i$i = 0;
 if (!(HEAP8[2720] | 0)) if (___cxa_guard_acquire(2720) | 0) {
  if (!(HEAP8[2728] | 0)) if (___cxa_guard_acquire(2728) | 0) {
   $9 = 13292;
   do {
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$9 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    $9 = $9 + 12 | 0;
   } while (($9 | 0) != 13580);
   ___cxa_atexit(155, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2728);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(13292, 13580) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(13304, 13592) | 0;
  HEAP32[3401] = 13292;
  ___cxa_guard_release(2720);
 }
 return HEAP32[3401] | 0;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $7 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $4 = $2 & 2047;
 switch ($4 | 0) {
 case 0:
  {
   if ($x != 0.0) {
    $7 = +_frexp($x * 18446744073709551616.0, $e);
    $$01 = $7;
    $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
   } else {
    $$01 = $x;
    $storemerge = 0;
   }
   HEAP32[$e >> 2] = $storemerge;
   $$0 = $$01;
   break;
  }
 case 2047:
  {
   $$0 = $x;
   break;
  }
 default:
  {
   HEAP32[$e >> 2] = $4 + -1022;
   HEAP32[tempDoublePtr >> 2] = $0;
   HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$$0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $11 = 0, $3 = 0, $__i$0 = 0, $__i$0$lcssa = 0, $storemerge = 0;
 $0 = $this + 12 | 0;
 $1 = $this + 16 | 0;
 $$0 = $__s;
 $__i$0 = 0;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $3 = HEAP32[$0 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $3 + 1;
   $storemerge = HEAP8[$3 >> 0] | 0;
  } else {
   $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 127]($this) | 0;
   if (($11 | 0) == -1) {
    $__i$0$lcssa = $__i$0;
    break;
   }
   $storemerge = $11 & 255;
  }
  HEAP8[$$0 >> 0] = $storemerge;
  $$0 = $$0 + 1 | 0;
  $__i$0 = $__i$0 + 1 | 0;
 }
 return $__i$0$lcssa | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this | 0;
 var $9 = 0, $__i$0$i$i$i = 0;
 if (!(HEAP8[2704] | 0)) if (___cxa_guard_acquire(2704) | 0) {
  if (!(HEAP8[2712] | 0)) if (___cxa_guard_acquire(2712) | 0) {
   $9 = 13e3;
   do {
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$9 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    $9 = $9 + 12 | 0;
   } while (($9 | 0) != 13288);
   ___cxa_atexit(154, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2712);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13e3, 24539) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13012, 24542) | 0;
  HEAP32[3322] = 13e3;
  ___cxa_guard_release(2704);
 }
 return HEAP32[3322] | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $11 = 0, $3 = 0, $__i$0 = 0, $__i$0$lcssa = 0, $storemerge = 0;
 $0 = $this + 12 | 0;
 $1 = $this + 16 | 0;
 $$0 = $__s;
 $__i$0 = 0;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $3 = HEAP32[$0 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $3 + 4;
   $storemerge = HEAP32[$3 >> 2] | 0;
  } else {
   $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 127]($this) | 0;
   if (($11 | 0) == -1) {
    $__i$0$lcssa = $__i$0;
    break;
   } else $storemerge = $11;
  }
  HEAP32[$$0 >> 2] = $storemerge;
  $$0 = $$0 + 4 | 0;
  $__i$0 = $__i$0 + 1 | 0;
 }
 return $__i$0$lcssa | 0;
}

function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb, $__ne, $__iob) {
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__iob = $__iob | 0;
 var $$0 = 0, $3 = 0, label = 0;
 L1 : do switch (HEAP32[$__iob + 4 >> 2] & 176 | 0) {
 case 16:
  {
   $3 = HEAP8[$__nb >> 0] | 0;
   switch ($3 << 24 >> 24) {
   case 43:
   case 45:
    {
     $$0 = $__nb + 1 | 0;
     break L1;
     break;
    }
   default:
    {}
   }
   if (($__ne - $__nb | 0) > 1 & $3 << 24 >> 24 == 48) {
    switch (HEAP8[$__nb + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      label = 7;
      break L1;
     }
    }
    $$0 = $__nb + 2 | 0;
   } else label = 7;
   break;
  }
 case 32:
  {
   $$0 = $__ne;
   break;
  }
 default:
  label = 7;
 } while (0);
 if ((label | 0) == 7) $$0 = $__nb;
 return $$0 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 + -1 | 0) >>> 0 < 12 & ($3 & 4 | 0) == 0) HEAP32[$__h >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 + -1 | 0) >>> 0 < 12 & ($3 & 4 | 0) == 0) HEAP32[$__h >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 + -1 | 0) >>> 0 < 31 & ($3 & 4 | 0) == 0) HEAP32[$__d >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 3) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 366 & ($3 & 4 | 0) == 0) HEAP32[$__d >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 + -1 | 0) >>> 0 < 31 & ($3 & 4 | 0) == 0) HEAP32[$__d >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 3) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 366 & ($3 & 4 | 0) == 0) HEAP32[$__d >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 13 & ($3 & 4 | 0) == 0) HEAP32[$__m >> 2] = $2 + -1; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 13 & ($3 & 4 | 0) == 0) HEAP32[$__m >> 2] = $2 + -1; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 1) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 7 & ($3 & 4 | 0) == 0) HEAP32[$__w >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__s, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 61 & ($3 & 4 | 0) == 0) HEAP32[$__s >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 60 & ($3 & 4 | 0) == 0) HEAP32[$__m >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 1) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 7 & ($3 & 4 | 0) == 0) HEAP32[$__w >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__s, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 61 & ($3 & 4 | 0) == 0) HEAP32[$__s >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 60 & ($3 & 4 | 0) == 0) HEAP32[$__m >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 24 & ($3 & 4 | 0) == 0) HEAP32[$__h >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 24 & ($3 & 4 | 0) == 0) HEAP32[$__h >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this | 0;
 var $14 = 0, $24 = 0, $__s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__s = sp;
 if (HEAP32[$this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0) {
  __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($__s, $this);
  if (HEAP8[$__s >> 0] | 0) {
   $14 = HEAP32[$this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] & 127]($14) | 0) == -1) {
    $24 = $this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 16 | 0;
    HEAP32[$24 >> 2] = HEAP32[$24 >> 2] | 1;
   }
  }
  __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 }
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this | 0;
 var $14 = 0, $24 = 0, $__s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__s = sp;
 if (HEAP32[$this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $this);
  if (HEAP8[$__s >> 0] | 0) {
   $14 = HEAP32[$this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] & 127]($14) | 0) == -1) {
    $24 = $this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 16 | 0;
    HEAP32[$24 >> 2] = HEAP32[$24 >> 2] | 1;
   }
  }
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 }
 STACKTOP = sp;
 return $this | 0;
}

function _ungetc($c, $f) {
 $c = $c | 0;
 $f = $f | 0;
 var $$1 = 0, $10 = 0, $11 = 0, $16 = 0, $19 = 0, label = 0;
 do if (($c | 0) == -1) $$1 = -1; else {
  if ((HEAP32[$f + 76 >> 2] | 0) > -1) $16 = ___lockfile($f) | 0; else $16 = 0;
  if (!(HEAP32[$f + 8 >> 2] | 0)) {
   if (!(___toread($f) | 0)) label = 6;
  } else label = 6;
  if ((label | 0) == 6) {
   $10 = $f + 4 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   if ($11 >>> 0 > ((HEAP32[$f + 44 >> 2] | 0) + -8 | 0) >>> 0) {
    $19 = $11 + -1 | 0;
    HEAP32[$10 >> 2] = $19;
    HEAP8[$19 >> 0] = $c;
    HEAP32[$f >> 2] = HEAP32[$f >> 2] & -17;
    if (!$16) {
     $$1 = $c;
     break;
    }
    ___unlockfile($f);
    $$1 = $c;
    break;
   }
  }
  if (!$16) $$1 = -1; else {
   ___unlockfile($f);
   $$1 = -1;
  }
 } while (0);
 return $$1 | 0;
}

function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $$1 = 0.0, $1 = 0, $2 = 0, $4 = 0.0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$1 = 0.0;
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  $4 = +_strtold_l($__a, $__p2, __ZNSt3__16__clocEv() | 0);
  $5 = HEAP32[$1 >> 2] | 0;
  if (!$5) HEAP32[$1 >> 2] = $2;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($5 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $$0 = $4;
  } else $$0 = $4; else {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;
 return +$$1;
}

function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $$1 = 0.0, $1 = 0, $2 = 0, $4 = 0.0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$1 = 0.0;
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  $4 = +_strtold_l($__a, $__p2, __ZNSt3__16__clocEv() | 0);
  $5 = HEAP32[$1 >> 2] | 0;
  if (!$5) HEAP32[$1 >> 2] = $2;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($5 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $$0 = $4;
  } else $$0 = $4; else {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;
 return +$$1;
}

function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$02$lcssa = 0, $2 = 0, $3 = 0, label = 0;
 $$01 = $__lo2;
 $$02 = $__lo1;
 while (1) {
  if (($$01 | 0) == ($__hi2 | 0)) {
   $$02$lcssa = $$02;
   label = 7;
   break;
  }
  if (($$02 | 0) == ($__hi1 | 0)) {
   $$0 = -1;
   break;
  }
  $2 = HEAP8[$$02 >> 0] | 0;
  $3 = HEAP8[$$01 >> 0] | 0;
  if ($2 << 24 >> 24 < $3 << 24 >> 24) {
   $$0 = -1;
   break;
  }
  if ($3 << 24 >> 24 < $2 << 24 >> 24) {
   $$0 = 1;
   break;
  }
  $$01 = $$01 + 1 | 0;
  $$02 = $$02 + 1 | 0;
 }
 if ((label | 0) == 7) $$0 = ($$02$lcssa | 0) != ($__hi1 | 0) & 1;
 return $$0 | 0;
}

function __ZN6VectorC2ERKS_($this, $obj) {
 $this = $this | 0;
 $obj = $obj | 0;
 var $0 = 0, $1 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $i$01 = 0, label = 0;
 $0 = $obj + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$this + 4 >> 2] = $1;
 $4 = __Znaj($1 >>> 0 > 536870911 ? -1 : $1 << 3) | 0;
 HEAP32[$this >> 2] = $4;
 if (($1 | 0) <= 0) return;
 $6 = HEAP32[$0 >> 2] | 0;
 $7 = HEAP32[$obj >> 2] | 0;
 $i$01 = 0;
 while (1) {
  if (($6 | 0) <= ($i$01 | 0)) {
   label = 5;
   break;
  }
  HEAPF64[$4 + ($i$01 << 3) >> 3] = +HEAPF64[$7 + ($i$01 << 3) >> 3];
  $i$01 = $i$01 + 1 | 0;
  if (($i$01 | 0) >= ($1 | 0)) {
   label = 3;
   break;
  }
 }
 if ((label | 0) == 3) return; else if ((label | 0) == 5) {
  $9 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$9 >> 2] = 0;
  ___cxa_throw($9 | 0, 936, 0);
 }
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $12 = 0, $15 = 0, $20 = 0, $3 = 0, $9 = 0, $mem$1 = 0;
 if (!$oldmem) {
  $mem$1 = _malloc($bytes) | 0;
  return $mem$1 | 0;
 }
 if ($bytes >>> 0 > 4294967231) {
  $3 = ___errno_location() | 0;
  HEAP32[$3 >> 2] = 12;
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $9 = _try_realloc_chunk($oldmem + -8 | 0, $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8) | 0;
 if ($9) {
  $mem$1 = $9 + 8 | 0;
  return $mem$1 | 0;
 }
 $12 = _malloc($bytes) | 0;
 if (!$12) {
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $15 = HEAP32[$oldmem + -4 >> 2] | 0;
 $20 = ($15 & -8) - (($15 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($12 | 0, $oldmem | 0, ($20 >>> 0 < $bytes >>> 0 ? $20 : $bytes) | 0) | 0;
 _free($oldmem);
 $mem$1 = $12;
 return $mem$1 | 0;
}

function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $$1 = 0.0, $1 = 0, $2 = 0, $4 = 0.0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$1 = 0.0;
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  $4 = +_strtold_l($__a, $__p2, __ZNSt3__16__clocEv() | 0);
  $5 = HEAP32[$1 >> 2] | 0;
  if (!$5) HEAP32[$1 >> 2] = $2;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) {
   if (($5 | 0) == 34) HEAP32[$__err >> 2] = 4;
   $$0 = $4;
  } else {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;
 return +$$1;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $3 = 0, $6 = 0, $__i$0 = 0, $__i$0$lcssa = 0;
 $0 = $this + 24 | 0;
 $1 = $this + 28 | 0;
 $$0 = $__s;
 $__i$0 = 0;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $3 = HEAP32[$0 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   $6 = HEAP32[$$0 >> 2] | 0;
   HEAP32[$0 >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = $6;
  } else if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 63]($this, HEAP32[$$0 >> 2] | 0) | 0) == -1) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $$0 = $$0 + 4 | 0;
  $__i$0 = $__i$0 + 1 | 0;
 }
 return $__i$0$lcssa | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $3 = 0, $6 = 0, $__i$0 = 0, $__i$0$lcssa = 0;
 $0 = $this + 24 | 0;
 $1 = $this + 28 | 0;
 $$0 = $__s;
 $__i$0 = 0;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $3 = HEAP32[$0 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   $6 = HEAP8[$$0 >> 0] | 0;
   HEAP32[$0 >> 2] = $3 + 1;
   HEAP8[$3 >> 0] = $6;
  } else if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 63]($this, HEAPU8[$$0 >> 0] | 0) | 0) == -1) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $$0 = $$0 + 1 | 0;
  $__i$0 = $__i$0 + 1 | 0;
 }
 return $__i$0$lcssa | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $17 = 0, $23 = 0, $29 = 0, $34 = 0, $5 = 0;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $5 = $1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (HEAP32[$5 + 24 >> 2] | 0) if (!(HEAP32[$5 + 16 >> 2] | 0)) if (HEAP32[$5 + 4 >> 2] & 8192) if (!(__ZSt18uncaught_exceptionv() | 0)) {
  $17 = HEAP32[$0 >> 2] | 0;
  $23 = HEAP32[$17 + (HEAP32[(HEAP32[$17 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 24 >> 2] & 127]($23) | 0) == -1) {
   $29 = HEAP32[$0 >> 2] | 0;
   $34 = $29 + (HEAP32[(HEAP32[$29 >> 2] | 0) + -12 >> 2] | 0) + 16 | 0;
   HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1;
  }
 }
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $17 = 0, $23 = 0, $29 = 0, $34 = 0, $5 = 0;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $5 = $1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (HEAP32[$5 + 24 >> 2] | 0) if (!(HEAP32[$5 + 16 >> 2] | 0)) if (HEAP32[$5 + 4 >> 2] & 8192) if (!(__ZSt18uncaught_exceptionv() | 0)) {
  $17 = HEAP32[$0 >> 2] | 0;
  $23 = HEAP32[$17 + (HEAP32[(HEAP32[$17 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 24 >> 2] & 127]($23) | 0) == -1) {
   $29 = HEAP32[$0 >> 2] | 0;
   $34 = $29 + (HEAP32[(HEAP32[$29 >> 2] | 0) + -12 >> 2] | 0) + 16 | 0;
   HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1;
  }
 }
 return;
}

function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$02$lcssa = 0, $2 = 0, $3 = 0, label = 0;
 $$01 = $__lo2;
 $$02 = $__lo1;
 while (1) {
  if (($$01 | 0) == ($__hi2 | 0)) {
   $$02$lcssa = $$02;
   label = 7;
   break;
  }
  if (($$02 | 0) == ($__hi1 | 0)) {
   $$0 = -1;
   break;
  }
  $2 = HEAP32[$$02 >> 2] | 0;
  $3 = HEAP32[$$01 >> 2] | 0;
  if (($2 | 0) < ($3 | 0)) {
   $$0 = -1;
   break;
  }
  if (($3 | 0) < ($2 | 0)) {
   $$0 = 1;
   break;
  }
  $$01 = $$01 + 4 | 0;
  $$02 = $$02 + 4 | 0;
 }
 if ((label | 0) == 7) $$0 = ($$02$lcssa | 0) != ($__hi1 | 0) & 1;
 return $$0 | 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 >> 8;
 if (!($1 & 1)) $offset_to_base$0 = $2; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $2 >> 2] | 0;
 $8 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 63]($8, $info, $dst_ptr, $current_ptr + $offset_to_base$0 | 0, ($1 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
 return;
}

function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $1 = 0, $13 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this >> 2] = 8736;
 HEAP32[$this + 32 >> 2] = $__fp;
 __ZNSt3__16localeC2ERKS0_($0, $this + 4 | 0);
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
 $6 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 10460) | 0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[$this + 36 >> 2] = $6;
 HEAP32[$this + 40 >> 2] = $__st;
 $13 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 127]($6) | 0) & 1;
 HEAP8[$this + 44 >> 0] = $13;
 STACKTOP = sp;
 return;
}

function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $1 = 0, $13 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this >> 2] = 8864;
 HEAP32[$this + 32 >> 2] = $__fp;
 __ZNSt3__16localeC2ERKS0_($0, $this + 4 | 0);
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
 $6 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 10452) | 0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[$this + 36 >> 2] = $6;
 HEAP32[$this + 40 >> 2] = $__st;
 $13 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 127]($6) | 0) & 1;
 HEAP8[$this + 44 >> 0] = $13;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $6 = 0, $9 = 0;
 $0 = $info + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (!$1) {
  HEAP32[$0 >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
 } else {
  if (($1 | 0) != ($adjustedPtr | 0)) {
   $9 = $info + 36 | 0;
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
   HEAP32[$info + 24 >> 2] = 2;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $6 = $info + 24 | 0;
  if ((HEAP32[$6 >> 2] | 0) == 2) HEAP32[$6 >> 2] = $path_below;
 } while (0);
 return;
}

function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $9 = 0, label = 0;
 $0 = $f + 20 | 0;
 $2 = $f + 28 | 0;
 if ((HEAP32[$0 >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 127]($f, 0, 0) | 0;
  if (!(HEAP32[$0 >> 2] | 0)) $$0 = -1; else label = 3;
 } else label = 3;
 if ((label | 0) == 3) {
  $9 = $f + 4 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $11 = $f + 8 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  if ($10 >>> 0 < $12 >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 40 >> 2] & 127]($f, $10 - $12 | 0, 1) | 0;
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) HEAP32[$__y >> 2] = $2 + -1900;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) HEAP32[$__y >> 2] = $2 + -1900;
 STACKTOP = sp;
 return;
}

function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 return _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, 0) | 0) ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
}

function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this, $__nb, $__ne, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $0 = 0, $1 = 0, $9 = 0, $fmt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $fmt = sp;
 HEAP8[$fmt >> 0] = 37;
 $0 = $fmt + 1 | 0;
 HEAP8[$0 >> 0] = $__fmt;
 $1 = $fmt + 2 | 0;
 HEAP8[$1 >> 0] = $__mod;
 HEAP8[$fmt + 3 >> 0] = 0;
 if ($__mod << 24 >> 24) {
  HEAP8[$0 >> 0] = $__mod;
  HEAP8[$1 >> 0] = $__fmt;
 }
 $9 = $__nb + (_strftime_l($__nb | 0, (HEAP32[$__ne >> 2] | 0) - $__nb | 0, $fmt | 0, $__tm | 0, HEAP32[$this >> 2] | 0) | 0) | 0;
 HEAP32[$__ne >> 2] = $9;
 STACKTOP = sp;
 return;
}

function _vasprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $2 = 0, $5 = 0, $9 = 0, $ap2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap2 = sp;
 $0 = _malloc(240) | 0;
 do if (!$0) $$0 = -1; else {
  HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
  $2 = _vsnprintf($0, 240, $fmt, $ap2) | 0;
  if ($2 >>> 0 < 240) {
   $5 = _realloc($0, $2 + 1 | 0) | 0;
   HEAP32[$s >> 2] = ($5 | 0) != 0 ? $5 : $0;
   $$0 = $2;
   break;
  }
  _free($0);
  if (($2 | 0) < 0) $$0 = -1; else {
   $9 = $2 + 1 | 0;
   $10 = _malloc($9) | 0;
   HEAP32[$s >> 2] = $10;
   if (!$10) $$0 = -1; else $$0 = _vsnprintf($10, $9, $fmt, $ap) | 0;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $4 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $4 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 63]($4, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
 }
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 >> 8;
 if (!($1 & 1)) $offset_to_base$0 = $2; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $2 >> 2] | 0;
 $8 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 24 >> 2] & 63]($8, $info, $current_ptr + $offset_to_base$0 | 0, ($1 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
 return;
}

function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $id) {
 $this = $this | 0;
 $f = $f | 0;
 $id = $id | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $10 = 0, $11 = 0, $3 = 0;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = $this + 8 | 0;
 $3 = HEAP32[$0 >> 2] | 0;
 if ((HEAP32[$this + 12 >> 2] | 0) - $3 >> 2 >>> 0 > $id >>> 0) {
  $$pre$phiZ2D = $0;
  $10 = $3;
 } else {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($0, $id + 1 | 0);
  $$pre$phiZ2D = $0;
  $10 = HEAP32[$0 >> 2] | 0;
 }
 $11 = HEAP32[$10 + ($id << 2) >> 2] | 0;
 if ($11) __ZNSt3__114__shared_count16__release_sharedEv($11) | 0;
 HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + ($id << 2) >> 2] = $f;
 return;
}

function _strtox_246($s, $p, $prec) {
 $s = $s | 0;
 $p = $p | 0;
 $prec = $prec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $4 = 0.0, $f = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f = sp;
 dest = $f;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $f + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 $1 = $f + 8 | 0;
 HEAP32[$1 >> 2] = -1;
 HEAP32[$f + 44 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 ___shlim($f, 0);
 $4 = +___floatscan($f, $prec, 1);
 $10 = (HEAP32[$0 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) + (HEAP32[$f + 108 >> 2] | 0) | 0;
 if ($p) HEAP32[$p >> 2] = ($10 | 0) != 0 ? $s + $10 | 0 : $s;
 STACKTOP = sp;
 return +$4;
}

function _getc($f) {
 $f = $f | 0;
 var $$0 = 0, $14 = 0, $15 = 0, $23 = 0, $5 = 0, $6 = 0, label = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($f) | 0)) label = 3; else {
  $14 = $f + 4 | 0;
  $15 = HEAP32[$14 >> 2] | 0;
  if ($15 >>> 0 < (HEAP32[$f + 8 >> 2] | 0) >>> 0) {
   HEAP32[$14 >> 2] = $15 + 1;
   $23 = HEAPU8[$15 >> 0] | 0;
  } else $23 = ___uflow($f) | 0;
  ___unlockfile($f);
  $$0 = $23;
 }
 do if ((label | 0) == 3) {
  $5 = $f + 4 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if ($6 >>> 0 < (HEAP32[$f + 8 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $6 + 1;
   $$0 = HEAPU8[$6 >> 0] | 0;
   break;
  } else {
   $$0 = ___uflow($f) | 0;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNK6VectorplERKS_($agg$result, $this, $obj) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $obj = $obj | 0;
 var $1 = 0, $10 = 0, $11 = 0, $4 = 0, $8 = 0, $i$01 = 0;
 $1 = HEAP32[$obj + 4 >> 2] | 0;
 HEAP32[$agg$result + 4 >> 2] = $1;
 $4 = __Znaj($1 >>> 0 > 536870911 ? -1 : $1 << 3) | 0;
 HEAP32[$agg$result >> 2] = $4;
 if (($1 | 0) > 0) _memset($4 | 0, 0, $1 << 3 | 0) | 0;
 $8 = HEAP32[$this + 4 >> 2] | 0;
 if (($8 | 0) <= 0) return;
 $10 = HEAP32[$this >> 2] | 0;
 $11 = HEAP32[$obj >> 2] | 0;
 $i$01 = 0;
 do {
  HEAPF64[$4 + ($i$01 << 3) >> 3] = +HEAPF64[$10 + ($i$01 << 3) >> 3] + +HEAPF64[$11 + ($i$01 << 3) >> 3];
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) < ($8 | 0));
 return;
}

function __ZNK6VectormiERKS_($agg$result, $this, $obj) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $obj = $obj | 0;
 var $1 = 0, $10 = 0, $11 = 0, $4 = 0, $8 = 0, $i$01 = 0;
 $1 = HEAP32[$obj + 4 >> 2] | 0;
 HEAP32[$agg$result + 4 >> 2] = $1;
 $4 = __Znaj($1 >>> 0 > 536870911 ? -1 : $1 << 3) | 0;
 HEAP32[$agg$result >> 2] = $4;
 if (($1 | 0) > 0) _memset($4 | 0, 0, $1 << 3 | 0) | 0;
 $8 = HEAP32[$this + 4 >> 2] | 0;
 if (($8 | 0) <= 0) return;
 $10 = HEAP32[$this >> 2] | 0;
 $11 = HEAP32[$obj >> 2] | 0;
 $i$01 = 0;
 do {
  HEAPF64[$4 + ($i$01 << 3) >> 3] = +HEAPF64[$10 + ($i$01 << 3) >> 3] - +HEAPF64[$11 + ($i$01 << 3) >> 3];
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) < ($8 | 0));
 return;
}

function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $3 = 0, $8 = 0, $9 = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $8 = 0; else {
  $3 = $__a + 112 | 0;
  if ($__cap >>> 0 < 29 & (HEAP8[$3 >> 0] | 0) == 0) {
   HEAP8[$3 >> 0] = 1;
   $8 = $__a;
   break;
  } else {
   $8 = __Znwj($__cap << 2) | 0;
   break;
  }
 } while (0);
 HEAP32[$this >> 2] = $8;
 $9 = $8 + ($__start << 2) | 0;
 HEAP32[$this + 8 >> 2] = $9;
 HEAP32[$this + 4 >> 2] = $9;
 HEAP32[$this + 12 >> 2] = $8 + ($__cap << 2);
 return;
}

function __ZN10emscripten8internal13MethodInvokerIM4GearF8SolPointvES3_PS2_JEE6invokeERKS5_S6_($method, $wireThis) {
 $method = $method | 0;
 $wireThis = $wireThis | 0;
 var $$field = 0, $$field2 = 0, $0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $$field = HEAP32[$method >> 2] | 0;
 $$field2 = HEAP32[$method + 4 >> 2] | 0;
 $2 = $wireThis + ($$field2 >> 1) | 0;
 if (!($$field2 & 1)) $9 = $$field; else $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + $$field >> 2] | 0;
 FUNCTION_TABLE_vii[$9 & 127]($0, $2);
 $10 = __Znwj(16) | 0;
 __ZN6VectorC2ERKS_($10, $0);
 HEAPF64[$10 + 8 >> 3] = +HEAPF64[$0 + 8 >> 3];
 __ZN6VectorD2Ev($0);
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this, $__sz) {
 $this = $this | 0;
 $__sz = $__sz | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = HEAP32[$this >> 2] | 0;
 $4 = $1 - $2 >> 2;
 $6 = $2;
 $7 = $1;
 L1 : do if ($4 >>> 0 < $__sz >>> 0) __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this, $__sz - $4 | 0); else if ($4 >>> 0 > $__sz >>> 0) {
  $10 = $6 + ($__sz << 2) | 0;
  $11 = $7;
  while (1) {
   if (($11 | 0) == ($10 | 0)) break L1;
   $13 = $11 + -4 | 0;
   HEAP32[$0 >> 2] = $13;
   $11 = $13;
  }
 } while (0);
 return;
}

function __ZN6MatrixD2Ev($this) {
 $this = $this | 0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $6 = 0, $7 = 0, $i$01 = 0;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 if (($1 | 0) > 0) {
  $12 = $1;
  $6 = $3;
  $i$01 = 0;
  while (1) {
   $7 = HEAP32[$6 + ($i$01 << 2) >> 2] | 0;
   if (!$7) {
    $11 = $12;
    $13 = $6;
   } else {
    __ZdaPv($7);
    $11 = HEAP32[$0 >> 2] | 0;
    $13 = HEAP32[$this >> 2] | 0;
   }
   $i$01 = $i$01 + 1 | 0;
   if (($i$01 | 0) >= ($11 | 0)) {
    $$lcssa = $13;
    break;
   } else {
    $12 = $11;
    $6 = $13;
   }
  }
 } else $$lcssa = $3;
 if (!$$lcssa) return;
 __ZdaPv($$lcssa);
 return;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 >> 8;
 if (!($1 & 1)) $offset_to_base$0 = $2; else $offset_to_base$0 = HEAP32[(HEAP32[$adjustedPtr >> 2] | 0) + $2 >> 2] | 0;
 $8 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 63]($8, $info, $adjustedPtr + $offset_to_base$0 | 0, ($1 & 2 | 0) != 0 ? $path_below : 2);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $0 = 0, $2 = 0, $7 = 0;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) == 0;
 if ($2) $7 = ($0 & 255) >>> 1; else $7 = HEAP32[$this + 4 >> 2] | 0;
 do if ($7 >>> 0 < $__n >>> 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $__n - $7 | 0, $__c) | 0; else if ($2) {
  HEAP8[$this + 1 + $__n >> 0] = 0;
  HEAP8[$this >> 0] = $__n << 1;
  break;
 } else {
  HEAP8[(HEAP32[$this + 8 >> 2] | 0) + $__n >> 0] = 0;
  HEAP32[$this + 4 >> 2] = $__n;
  break;
 } while (0);
 return;
}

function ___toread($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $15 = 0, $2 = 0, $21 = 0, $6 = 0, $8 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = $f + 20 | 0;
 $8 = $f + 44 | 0;
 if ((HEAP32[$6 >> 2] | 0) >>> 0 > (HEAP32[$8 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 127]($f, 0, 0) | 0;
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$f + 28 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 $15 = HEAP32[$f >> 2] | 0;
 if (!($15 & 20)) {
  $21 = HEAP32[$8 >> 2] | 0;
  HEAP32[$f + 8 >> 2] = $21;
  HEAP32[$f + 4 >> 2] = $21;
  $$0 = 0;
 } else if (!($15 & 4)) $$0 = -1; else {
  HEAP32[$f >> 2] = $15 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this >> 2] = 8800;
 HEAP32[$this + 32 >> 2] = $__fp;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP32[$this + 48 >> 2] = -1;
 HEAP8[$this + 52 >> 0] = 0;
 __ZNSt3__16localeC2ERKS0_($0, $this + 4 | 0);
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
 __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this, $1);
 __ZNSt3__16localeD2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this >> 2] = 8928;
 HEAP32[$this + 32 >> 2] = $__fp;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP32[$this + 48 >> 2] = -1;
 HEAP8[$this + 52 >> 0] = 0;
 __ZNSt3__16localeC2ERKS0_($0, $this + 4 | 0);
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
 __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this, $1);
 __ZNSt3__16localeD2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal13MethodInvokerIM8SolPointF6VectorvES3_PS2_JEE6invokeERKS5_S6_($method, $wireThis) {
 $method = $method | 0;
 $wireThis = $wireThis | 0;
 var $$field = 0, $$field2 = 0, $0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $$field = HEAP32[$method >> 2] | 0;
 $$field2 = HEAP32[$method + 4 >> 2] | 0;
 $2 = $wireThis + ($$field2 >> 1) | 0;
 if (!($$field2 & 1)) $9 = $$field; else $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + $$field >> 2] | 0;
 FUNCTION_TABLE_vii[$9 & 127]($0, $2);
 $10 = __Znwj(8) | 0;
 __ZN6VectorC2ERKS_($10, $0);
 __ZN6VectorD2Ev($0);
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $6 = 0, $7 = 0, $__p$0 = 0;
 if ($__sz >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__sz >>> 0 < 11) {
  HEAP8[$this >> 0] = $__sz << 1;
  $__p$0 = $this + 1 | 0;
 } else {
  $6 = $__sz + 16 & -16;
  $7 = __Znwj($6) | 0;
  HEAP32[$this + 8 >> 2] = $7;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy($__p$0 | 0, $__s | 0, $__sz | 0) | 0;
 HEAP8[$__p$0 + $__sz >> 0] = 0;
 return;
}

function __ZNK6Vector13LInfinityNormEv($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $4 = 0.0, $6 = 0.0, $8 = 0, $i$02 = 0, $max$0$lcssa = 0.0, $max$01 = 0.0, $max$1 = 0.0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 if (($1 | 0) <= 0) {
  $max$0$lcssa = 0.0;
  $4 = +Math_abs(+$max$0$lcssa);
  return +$4;
 }
 $3 = HEAP32[$this >> 2] | 0;
 $i$02 = 0;
 $max$01 = 0.0;
 while (1) {
  $6 = +HEAPF64[$3 + ($i$02 << 3) >> 3];
  $8 = +Math_abs(+$6) > $max$01;
  $max$1 = $8 ? $6 : $max$01;
  $i$02 = $i$02 + 1 | 0;
  if (($i$02 | 0) >= ($1 | 0)) {
   $max$0$lcssa = $max$1;
   break;
  } else $max$01 = $max$1;
 }
 $4 = +Math_abs(+$max$0$lcssa);
 return +$4;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $6 = 0, $8 = 0, $__p$0 = 0;
 if ($__sz >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__sz >>> 0 < 2) {
  HEAP8[$this >> 0] = $__sz << 1;
  $__p$0 = $this + 4 | 0;
 } else {
  $6 = $__sz + 4 & -4;
  $8 = __Znwj($6 << 2) | 0;
  HEAP32[$this + 8 >> 2] = $8;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $8;
 }
 _wmemcpy($__p$0, $__s, $__sz) | 0;
 HEAP32[$__p$0 + ($__sz << 2) >> 2] = 0;
 return;
}

function ___stdio_seek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $5 = 0, $ret = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $ret = sp + 20 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = 0;
 HEAP32[$vararg_buffer + 8 >> 2] = $off;
 HEAP32[$vararg_buffer + 12 >> 2] = $ret;
 HEAP32[$vararg_buffer + 16 >> 2] = $whence;
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$ret >> 2] = -1;
  $5 = -1;
 } else $5 = HEAP32[$ret >> 2] | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $6 = 0, $7 = 0, $__p$0 = 0;
 if ($__n >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__n >>> 0 < 11) {
  HEAP8[$this >> 0] = $__n << 1;
  $__p$0 = $this + 1 | 0;
 } else {
  $6 = $__n + 16 & -16;
  $7 = __Znwj($6) | 0;
  HEAP32[$this + 8 >> 2] = $7;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__n;
  $__p$0 = $7;
 }
 _memset($__p$0 | 0, $__c | 0, $__n | 0) | 0;
 HEAP8[$__p$0 + $__n >> 0] = 0;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $6 = 0, $8 = 0, $__p$0 = 0;
 if ($__n >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__n >>> 0 < 2) {
  HEAP8[$this >> 0] = $__n << 1;
  $__p$0 = $this + 4 | 0;
 } else {
  $6 = $__n + 4 & -4;
  $8 = __Znwj($6 << 2) | 0;
  HEAP32[$this + 8 >> 2] = $8;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__n;
  $__p$0 = $8;
 }
 _wmemset($__p$0, $__c, $__n) | 0;
 HEAP32[$__p$0 + ($__n << 2) >> 2] = 0;
 return;
}

function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$01 = 0, $__i$0 = 0;
 L1 : do if (!(HEAP8[$this + 44 >> 0] | 0)) {
  $$01 = $__s;
  $__i$0 = 0;
  while (1) {
   if (($__i$0 | 0) >= ($__n | 0)) {
    $$0 = $__i$0;
    break L1;
   }
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 63]($this, HEAP32[$$01 >> 2] | 0) | 0) == -1) {
    $$0 = $__i$0;
    break L1;
   }
   $$01 = $$01 + 4 | 0;
   $__i$0 = $__i$0 + 1 | 0;
  }
 } else $$0 = _fwrite($__s, 4, $__n, HEAP32[$this + 32 >> 2] | 0) | 0; while (0);
 return $$0 | 0;
}

function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$01 = 0, $__i$0 = 0;
 L1 : do if (!(HEAP8[$this + 44 >> 0] | 0)) {
  $$01 = $__s;
  $__i$0 = 0;
  while (1) {
   if (($__i$0 | 0) >= ($__n | 0)) {
    $$0 = $__i$0;
    break L1;
   }
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 63]($this, HEAPU8[$$01 >> 0] | 0) | 0) == -1) {
    $$0 = $__i$0;
    break L1;
   }
   $$01 = $$01 + 1 | 0;
   $__i$0 = $__i$0 + 1 | 0;
  }
 } else $$0 = _fwrite($__s, 1, $__n, HEAP32[$this + 32 >> 2] | 0) | 0; while (0);
 return $$0 | 0;
}

function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $3 = 0, $i$0 = 0;
 HEAP32[$this >> 2] = 10368;
 $0 = $this + 8 | 0;
 $1 = $this + 12 | 0;
 $i$0 = 0;
 while (1) {
  $3 = HEAP32[$0 >> 2] | 0;
  if ($i$0 >>> 0 >= (HEAP32[$1 >> 2] | 0) - $3 >> 2 >>> 0) break;
  $10 = HEAP32[$3 + ($i$0 << 2) >> 2] | 0;
  if ($10) __ZNSt3__114__shared_count16__release_sharedEv($10) | 0;
  $i$0 = $i$0 + 1 | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 144 | 0);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 return;
}

function _strtox($s, $p, $base, $0, $1) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0, $8 = 0, $f = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f = sp;
 HEAP32[$f >> 2] = 0;
 $2 = $f + 4 | 0;
 HEAP32[$2 >> 2] = $s;
 HEAP32[$f + 44 >> 2] = $s;
 $6 = $f + 8 | 0;
 HEAP32[$6 >> 2] = ($s | 0) < 0 ? -1 : $s + 2147483647 | 0;
 HEAP32[$f + 76 >> 2] = -1;
 ___shlim($f, 0);
 $8 = ___intscan($f, $base, 1, $0, $1) | 0;
 if ($p) HEAP32[$p >> 2] = $s + ((HEAP32[$2 >> 2] | 0) + (HEAP32[$f + 108 >> 2] | 0) - (HEAP32[$6 >> 2] | 0));
 STACKTOP = sp;
 return $8 | 0;
}

function __ZN10emscripten8internal13MethodInvokerIM6VectorFdiEdPS2_JiEE6invokeERKS4_S5_i($method, $wireThis, $args) {
 $method = $method | 0;
 $wireThis = $wireThis | 0;
 $args = $args | 0;
 var $$field = 0, $$field2 = 0, $1 = 0, $8 = 0, $9 = 0.0;
 $$field = HEAP32[$method >> 2] | 0;
 $$field2 = HEAP32[$method + 4 >> 2] | 0;
 $1 = $wireThis + ($$field2 >> 1) | 0;
 if (!($$field2 & 1)) {
  $8 = $$field;
  $9 = +FUNCTION_TABLE_dii[$8 & 63]($1, $args);
  return +$9;
 } else {
  $8 = HEAP32[(HEAP32[$1 >> 2] | 0) + $$field >> 2] | 0;
  $9 = +FUNCTION_TABLE_dii[$8 & 63]($1, $args);
  return +$9;
 }
 return +(0.0);
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $4 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $4 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] & 63]($4, $info, $adjustedPtr, $path_below);
 }
 return;
}

function __ZN6MatrixC2Eii($this, $m, $n) {
 $this = $this | 0;
 $m = $m | 0;
 $n = $n | 0;
 var $$pre = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0;
 HEAP32[$this + 4 >> 2] = $m;
 HEAP32[$this + 8 >> 2] = $n;
 $3 = __Znaj($m >>> 0 > 1073741823 ? -1 : $m << 2) | 0;
 HEAP32[$this >> 2] = $3;
 if (($m | 0) <= 0) return;
 $5 = $n >>> 0 > 536870911 ? -1 : $n << 3;
 $6 = __Znaj($5) | 0;
 HEAP32[$3 >> 2] = $6;
 if (($m | 0) == 1) return; else $9 = 1;
 do {
  $$pre = HEAP32[$this >> 2] | 0;
  $7 = __Znaj($5) | 0;
  HEAP32[$$pre + ($9 << 2) >> 2] = $7;
  $9 = $9 + 1 | 0;
 } while (($9 | 0) != ($m | 0));
 return;
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $6 = 0, $7 = 0;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 if ($0 << 24 >> 24 == 0 ? 1 : $0 << 24 >> 24 != $1 << 24 >> 24) {
  $$lcssa = $0;
  $$lcssa2 = $1;
 } else {
  $$014 = $l;
  $$05 = $r;
  do {
   $$014 = $$014 + 1 | 0;
   $$05 = $$05 + 1 | 0;
   $6 = HEAP8[$$014 >> 0] | 0;
   $7 = HEAP8[$$05 >> 0] | 0;
  } while (!($6 << 24 >> 24 == 0 ? 1 : $6 << 24 >> 24 != $7 << 24 >> 24));
  $$lcssa = $6;
  $$lcssa2 = $7;
 }
 return ($$lcssa & 255) - ($$lcssa2 & 255) | 0;
}

function _wmemmove($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $5 = 0;
 $5 = ($n | 0) == 0;
 if ($d - $s >> 2 >>> 0 < $n >>> 0) {
  if (!$5) {
   $$in = $n;
   do {
    $$in = $$in + -1 | 0;
    HEAP32[$d + ($$in << 2) >> 2] = HEAP32[$s + ($$in << 2) >> 2];
   } while (($$in | 0) != 0);
  }
 } else if (!$5) {
  $$025 = $s;
  $$07 = $d;
  $$16 = $n;
  while (1) {
   $$16 = $$16 + -1 | 0;
   HEAP32[$$07 >> 2] = HEAP32[$$025 >> 2];
   if (!$$16) break; else {
    $$025 = $$025 + 4 | 0;
    $$07 = $$07 + 4 | 0;
   }
  }
 }
 return $d | 0;
}

function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $0 = 0, $1 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10460) | 0;
 $1 = $this + 36 | 0;
 HEAP32[$1 >> 2] = $0;
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 127]($0) | 0;
 $6 = $this + 44 | 0;
 HEAP32[$6 >> 2] = $5;
 $7 = HEAP32[$1 >> 2] | 0;
 $13 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] & 127]($7) | 0) & 1;
 HEAP8[$this + 53 >> 0] = $13;
 if ((HEAP32[$6 >> 2] | 0) > 8) {}
 return;
}

function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $0 = 0, $1 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10452) | 0;
 $1 = $this + 36 | 0;
 HEAP32[$1 >> 2] = $0;
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 127]($0) | 0;
 $6 = $this + 44 | 0;
 HEAP32[$6 >> 2] = $5;
 $7 = HEAP32[$1 >> 2] | 0;
 $13 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] & 127]($7) | 0) & 1;
 HEAP8[$this + 53 >> 0] = $13;
 if ((HEAP32[$6 >> 2] | 0) > 8) {}
 return;
}

function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this, $low, $high, $vec) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $vec = $vec | 0;
 var $$0 = 0, $$01 = 0, $11 = 0, $2 = 0, $4 = 0, $5 = 0;
 $2 = ($high - $low | 0) >>> 2;
 $$0 = $vec;
 $$01 = $low;
 while (1) {
  if (($$01 | 0) == ($high | 0)) break;
  $4 = HEAP32[$$01 >> 2] | 0;
  if ($4 >>> 0 < 128) {
   $5 = ___ctype_b_loc() | 0;
   $11 = HEAPU16[(HEAP32[$5 >> 2] | 0) + ($4 << 1) >> 1] | 0;
  } else $11 = 0;
  HEAP16[$$0 >> 1] = $11;
  $$0 = $$0 + 2 | 0;
  $$01 = $$01 + 4 | 0;
 }
 return $low + ($2 << 2) | 0;
}

function __ZN10emscripten8internal13MethodInvokerIM6VectorFRdidES3_PS2_JidEE6invokeERKS5_S6_id($method, $wireThis, $args, $args1) {
 $method = $method | 0;
 $wireThis = $wireThis | 0;
 $args = $args | 0;
 $args1 = +$args1;
 var $$field = 0, $$field2 = 0, $1 = 0, $8 = 0, $9 = 0;
 $$field = HEAP32[$method >> 2] | 0;
 $$field2 = HEAP32[$method + 4 >> 2] | 0;
 $1 = $wireThis + ($$field2 >> 1) | 0;
 if (!($$field2 & 1)) $8 = $$field; else $8 = HEAP32[(HEAP32[$1 >> 2] | 0) + $$field >> 2] | 0;
 $9 = FUNCTION_TABLE_iiid[$8 & 63]($1, $args, $args1) | 0;
 return +(+HEAPF64[$9 >> 3]);
}

function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag, $arg, $func) {
 $flag = $flag | 0;
 $arg = $arg | 0;
 $func = $func | 0;
 _pthread_mutex_lock(13908) | 0;
 while (1) {
  if ((HEAP32[$flag >> 2] | 0) != 1) break;
  _pthread_cond_wait(13936, 13908) | 0;
 }
 if (!(HEAP32[$flag >> 2] | 0)) {
  HEAP32[$flag >> 2] = 1;
  _pthread_mutex_unlock(13908) | 0;
  FUNCTION_TABLE_vi[$func & 255]($arg);
  _pthread_mutex_lock(13908) | 0;
  HEAP32[$flag >> 2] = -1;
  _pthread_mutex_unlock(13908) | 0;
  _pthread_cond_broadcast(13936) | 0;
 } else _pthread_mutex_unlock(13908) | 0;
 return;
}

function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $9 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $this + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 while (1) {
  if (($3 | 0) == ($1 | 0)) break;
  $5 = $3 + -4 | 0;
  HEAP32[$2 >> 2] = $5;
  $3 = $5;
 }
 $6 = HEAP32[$this >> 2] | 0;
 do if ($6) {
  $9 = HEAP32[$this + 16 >> 2] | 0;
  if (($9 | 0) == ($6 | 0)) {
   HEAP8[$9 + 112 >> 0] = 0;
   break;
  } else {
   __ZdlPv($6);
   break;
  }
 } while (0);
 return;
}

function __ZN10emscripten8internal13MethodInvokerIM8SolPointFdvEdPS2_JEE6invokeERKS4_S5_($method, $wireThis) {
 $method = $method | 0;
 $wireThis = $wireThis | 0;
 var $$field = 0, $$field2 = 0, $1 = 0, $8 = 0, $9 = 0.0;
 $$field = HEAP32[$method >> 2] | 0;
 $$field2 = HEAP32[$method + 4 >> 2] | 0;
 $1 = $wireThis + ($$field2 >> 1) | 0;
 if (!($$field2 & 1)) {
  $8 = $$field;
  $9 = +FUNCTION_TABLE_di[$8 & 63]($1);
  return +$9;
 } else {
  $8 = HEAP32[(HEAP32[$1 >> 2] | 0) + $$field >> 2] | 0;
  $9 = +FUNCTION_TABLE_di[$8 & 63]($1);
  return +$9;
 }
 return +(0.0);
}

function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0 = 0, $$0$lcssa = 0, $1 = 0, $2 = 0;
 $$0 = $low;
 while (1) {
  if (($$0 | 0) == ($high | 0)) {
   $$0$lcssa = $high;
   break;
  }
  $1 = HEAP32[$$0 >> 2] | 0;
  if ($1 >>> 0 >= 128) {
   $$0$lcssa = $$0;
   break;
  }
  $2 = ___ctype_b_loc() | 0;
  if (!((HEAP16[(HEAP32[$2 >> 2] | 0) + ($1 << 1) >> 1] & $m) << 16 >> 16)) {
   $$0$lcssa = $$0;
   break;
  }
  $$0 = $$0 + 4 | 0;
 }
 return $$0$lcssa | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i$i = 0, $1 = 0;
 if ($__n >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
 $1 = $this + 128 | 0;
 if ($__n >>> 0 < 29 & (HEAP8[$1 >> 0] | 0) == 0) {
  HEAP8[$1 >> 0] = 1;
  $$0$i$i = $this + 16 | 0;
 } else $$0$i$i = __Znwj($__n << 2) | 0;
 HEAP32[$this + 4 >> 2] = $$0$i$i;
 HEAP32[$this >> 2] = $$0$i$i;
 HEAP32[$this + 8 >> 2] = $$0$i$i + ($__n << 2);
 return;
}

function ___stdout_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $vararg_buffer = sp;
 HEAP32[$f + 36 >> 2] = 48;
 if (!(HEAP32[$f >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = 21505;
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 12;
  if (___syscall54(54, $vararg_buffer | 0) | 0) HEAP8[$f + 75 >> 0] = -1;
 }
 $9 = ___stdio_write($f, $buf, $len) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZN10emscripten8internal12GetterPolicyIM7OptionsKFdvEE3getIS2_EEdRKS4_RKT_($context, $ptr) {
 $context = $context | 0;
 $ptr = $ptr | 0;
 var $$field = 0, $$field2 = 0, $1 = 0, $8 = 0, $9 = 0.0;
 $$field = HEAP32[$context >> 2] | 0;
 $$field2 = HEAP32[$context + 4 >> 2] | 0;
 $1 = $ptr + ($$field2 >> 1) | 0;
 if (!($$field2 & 1)) {
  $8 = $$field;
  $9 = +FUNCTION_TABLE_di[$8 & 63]($1);
  return +$9;
 } else {
  $8 = HEAP32[(HEAP32[$1 >> 2] | 0) + $$field >> 2] | 0;
  $9 = +FUNCTION_TABLE_di[$8 & 63]($1);
  return +$9;
 }
 return +(0.0);
}

function __ZN6Matrix9GetColumnEi($agg$result, $this, $n) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $n = $n | 0;
 var $0 = 0, $8 = 0.0, $9 = 0, $i$01 = 0;
 $0 = $this + 4 | 0;
 __ZN6VectorC2Ei($agg$result, HEAP32[$0 >> 2] | 0);
 if ((HEAP32[$0 >> 2] | 0) <= 0) return;
 $i$01 = 0;
 do {
  $8 = +HEAPF64[(HEAP32[(HEAP32[$this >> 2] | 0) + ($i$01 << 2) >> 2] | 0) + ($n << 3) >> 3];
  $9 = __ZNK6VectorixEi($agg$result, $i$01) | 0;
  HEAPF64[$9 >> 3] = $8;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) < (HEAP32[$0 >> 2] | 0));
 return;
}

function __Znwj($size) {
 $size = $size | 0;
 var $$lcssa = 0, $$size = 0, $1 = 0, $3 = 0, $5 = 0, label = 0;
 $$size = ($size | 0) == 0 ? 1 : $size;
 while (1) {
  $1 = _malloc($$size) | 0;
  if ($1) {
   $$lcssa = $1;
   label = 6;
   break;
  }
  $3 = __ZSt15get_new_handlerv() | 0;
  if (!$3) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$3 & 63]();
 }
 if ((label | 0) == 5) {
  $5 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$5 >> 2] = 3156;
  ___cxa_throw($5 | 0, 744, 42);
 } else if ((label | 0) == 6) return $$lcssa | 0;
 return 0;
}

function __ZN4Gear9PredictorEv($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0;
 $0 = $this + 80 | 0;
 $2 = __ZN14NordsieckState4ZNewERK6Matrix(HEAP32[$0 >> 2] | 0) | 0;
 $3 = HEAP32[$0 >> 2] | 0;
 if ($3) {
  __ZN6MatrixD2Ev($3);
  __ZdlPv($3);
 }
 HEAP32[$0 >> 2] = 0;
 $5 = $this + 144 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if ($6) {
  __ZN6VectorD2Ev($6);
  __ZdlPv($6);
 }
 HEAP32[$5 >> 2] = 0;
 HEAP32[$0 >> 2] = $2;
 $8 = __Znwj(8) | 0;
 __ZN6Matrix9GetColumnEi($8, $2, 0);
 HEAP32[$5 >> 2] = $8;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below);
 return;
}

function __ZN10emscripten8internal12SetterPolicyIM7OptionsFvdEE3setIS2_EEvRKS4_RT_d($context, $ptr, $wt) {
 $context = $context | 0;
 $ptr = $ptr | 0;
 $wt = +$wt;
 var $$field = 0, $$field2 = 0, $1 = 0, $8 = 0;
 $$field = HEAP32[$context >> 2] | 0;
 $$field2 = HEAP32[$context + 4 >> 2] | 0;
 $1 = $ptr + ($$field2 >> 1) | 0;
 if (!($$field2 & 1)) {
  $8 = $$field;
  FUNCTION_TABLE_vid[$8 & 63]($1, $wt);
  return;
 } else {
  $8 = HEAP32[(HEAP32[$1 >> 2] | 0) + $$field >> 2] | 0;
  FUNCTION_TABLE_vid[$8 & 63]($1, $wt);
  return;
 }
}

function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0 = 0, $$0$lcssa = 0, $1 = 0, $2 = 0;
 $$0 = $low;
 while (1) {
  if (($$0 | 0) == ($high | 0)) {
   $$0$lcssa = $high;
   break;
  }
  $1 = HEAP32[$$0 >> 2] | 0;
  if ($1 >>> 0 < 128) {
   $2 = ___ctype_b_loc() | 0;
   if ((HEAP16[(HEAP32[$2 >> 2] | 0) + ($1 << 1) >> 1] & $m) << 16 >> 16) {
    $$0$lcssa = $$0;
    break;
   }
  }
  $$0 = $$0 + 4 | 0;
 }
 return $$0$lcssa | 0;
}

function _fwrite($src, $size, $nmemb, $f) {
 $src = $src | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $0 = 0, $10 = 0, $6 = 0, $7 = 0, $phitmp = 0;
 $0 = Math_imul($nmemb, $size) | 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $6 = ___fwritex($src, $0, $f) | 0;
  if ($phitmp) $7 = $6; else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else $7 = ___fwritex($src, $0, $f) | 0;
 if (($7 | 0) == ($0 | 0)) $10 = $nmemb; else $10 = ($7 >>> 0) / ($size >>> 0) | 0;
 return $10 | 0;
}

function ___string_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $11 = 0, $2 = 0, $3 = 0, $k$0 = 0, $k$0$len = 0;
 $0 = $f + 84 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $len + 256 | 0;
 $3 = _memchr($1, 0, $2) | 0;
 $k$0 = ($3 | 0) == 0 ? $2 : $3 - $1 | 0;
 $k$0$len = $k$0 >>> 0 < $len >>> 0 ? $k$0 : $len;
 _memcpy($buf | 0, $1 | 0, $k$0$len | 0) | 0;
 HEAP32[$f + 4 >> 2] = $1 + $k$0$len;
 $11 = $1 + $k$0 | 0;
 HEAP32[$f + 8 >> 2] = $11;
 HEAP32[$0 >> 2] = $11;
 return $k$0$len | 0;
}

function _calloc($n_elements, $elem_size) {
 $n_elements = $n_elements | 0;
 $elem_size = $elem_size | 0;
 var $1 = 0, $6 = 0, $req$0 = 0;
 if (!$n_elements) $req$0 = 0; else {
  $1 = Math_imul($elem_size, $n_elements) | 0;
  if (($elem_size | $n_elements) >>> 0 > 65535) $req$0 = (($1 >>> 0) / ($n_elements >>> 0) | 0 | 0) == ($elem_size | 0) ? $1 : -1; else $req$0 = $1;
 }
 $6 = _malloc($req$0) | 0;
 if (!$6) return $6 | 0;
 if (!(HEAP32[$6 + -4 >> 2] & 3)) return $6 | 0;
 _memset($6 | 0, 0, $req$0 | 0) | 0;
 return $6 | 0;
}

function __ZN10emscripten8internal13MethodInvokerIM8SolPointFvvEvPS2_JEE6invokeERKS4_S5_($method, $wireThis) {
 $method = $method | 0;
 $wireThis = $wireThis | 0;
 var $$field = 0, $$field2 = 0, $1 = 0, $8 = 0;
 $$field = HEAP32[$method >> 2] | 0;
 $$field2 = HEAP32[$method + 4 >> 2] | 0;
 $1 = $wireThis + ($$field2 >> 1) | 0;
 if (!($$field2 & 1)) {
  $8 = $$field;
  FUNCTION_TABLE_vi[$8 & 255]($1);
  return;
 } else {
  $8 = HEAP32[(HEAP32[$1 >> 2] | 0) + $$field >> 2] | 0;
  FUNCTION_TABLE_vi[$8 & 255]($1);
  return;
 }
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}

function __ZN10emscripten8internal13MethodInvokerIM6VectorFvvEvPS2_JEE6invokeERKS4_S5_($method, $wireThis) {
 $method = $method | 0;
 $wireThis = $wireThis | 0;
 var $$field = 0, $$field2 = 0, $1 = 0, $8 = 0;
 $$field = HEAP32[$method >> 2] | 0;
 $$field2 = HEAP32[$method + 4 >> 2] | 0;
 $1 = $wireThis + ($$field2 >> 1) | 0;
 if (!($$field2 & 1)) {
  $8 = $$field;
  FUNCTION_TABLE_vi[$8 & 255]($1);
  return;
 } else {
  $8 = HEAP32[(HEAP32[$1 >> 2] | 0) + $$field >> 2] | 0;
  FUNCTION_TABLE_vi[$8 & 255]($1);
  return;
 }
}

function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $5 = 0, $9 = 0;
 $2 = ($high - $low | 0) >>> 2;
 $$0 = $low;
 while (1) {
  if (($$0 | 0) == ($high | 0)) break;
  $4 = HEAP32[$$0 >> 2] | 0;
  if ($4 >>> 0 < 128) {
   $5 = ___ctype_toupper_loc() | 0;
   $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + ($4 << 2) >> 2] | 0;
  } else $9 = $4;
  HEAP32[$$0 >> 2] = $9;
  $$0 = $$0 + 4 | 0;
 }
 return $low + ($2 << 2) | 0;
}

function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $5 = 0, $9 = 0;
 $2 = ($high - $low | 0) >>> 2;
 $$0 = $low;
 while (1) {
  if (($$0 | 0) == ($high | 0)) break;
  $4 = HEAP32[$$0 >> 2] | 0;
  if ($4 >>> 0 < 128) {
   $5 = ___ctype_tolower_loc() | 0;
   $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + ($4 << 2) >> 2] | 0;
  } else $9 = $4;
  HEAP32[$$0 >> 2] = $9;
  $$0 = $$0 + 4 | 0;
 }
 return $low + ($2 << 2) | 0;
}

function __ZNSt3__18ios_base4initEPv($this, $sb) {
 $this = $this | 0;
 $sb = $sb | 0;
 var $8 = 0, dest = 0, stop = 0;
 HEAP32[$this + 24 >> 2] = $sb;
 HEAP32[$this + 16 >> 2] = ($sb | 0) == 0 & 1;
 HEAP32[$this + 20 >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 4098;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 6;
 $8 = $this + 28 | 0;
 dest = $this + 32 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__16localeC2Ev($8);
 return;
}

function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $$0 = 0, $$01 = 0, $2 = 0, $4 = 0;
 $2 = ($high - $low | 0) >>> 2;
 $$0 = $dest;
 $$01 = $low;
 while (1) {
  if (($$01 | 0) == ($high | 0)) break;
  $4 = HEAP32[$$01 >> 2] | 0;
  HEAP8[$$0 >> 0] = $4 >>> 0 < 128 ? $4 & 255 : $dfault;
  $$0 = $$0 + 1 | 0;
  $$01 = $$01 + 4 | 0;
 }
 return $low + ($2 << 2) | 0;
}

function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, $5 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 do if ($0) {
  $2 = $this + 4 | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  while (1) {
   if (($3 | 0) == ($0 | 0)) break;
   $5 = $3 + -4 | 0;
   HEAP32[$2 >> 2] = $5;
   $3 = $5;
  }
  if (($this + 16 | 0) == ($0 | 0)) {
   HEAP8[$this + 128 >> 0] = 0;
   break;
  } else {
   __ZdlPv($0);
   break;
  }
 } while (0);
 return;
}

function __ZN14NordsieckStateD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0) {
  __ZN6MatrixD2Ev($0);
  __ZdlPv($0);
 }
 HEAP32[$this >> 2] = 0;
 $2 = $this + 64 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  __ZN6VectorD2Ev($3);
  __ZdlPv($3);
 }
 HEAP32[$2 >> 2] = 0;
 $5 = $this + 68 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (!$6) {
  HEAP32[$5 >> 2] = 0;
  return;
 }
 __ZN6VectorD2Ev($6);
 __ZdlPv($6);
 HEAP32[$5 >> 2] = 0;
 return;
}

function ___towrite($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $13 = 0, $2 = 0, $6 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = HEAP32[$f >> 2] | 0;
 if (!($6 & 8)) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $13 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $13;
  HEAP32[$f + 20 >> 2] = $13;
  HEAP32[$f + 16 >> 2] = $13 + (HEAP32[$f + 48 >> 2] | 0);
  $$0 = 0;
 } else {
  HEAP32[$f >> 2] = $6 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZN6Matrix7SolveGEERK6Vector($agg$result, $this, $v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = HEAP32[$this >> 2] | 0;
 __ZN6VectorC2ERKS_($0, $v);
 $2 = __ZN6Matrix5SolveEPPd6Vector($1, $0) | 0;
 __ZN6VectorD2Ev($0);
 __ZN6VectorC2EPKdi($agg$result, $2, HEAP32[$v + 4 >> 2] | 0);
 if (!$2) {
  STACKTOP = sp;
  return;
 }
 __ZdaPv($2);
 STACKTOP = sp;
 return;
}

function _vsscanf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $4 = 0, $f = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f = sp;
 dest = $f;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$f + 32 >> 2] = 69;
 HEAP32[$f + 44 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 HEAP32[$f + 84 >> 2] = $s;
 $4 = _vfscanf($f, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 if (!(HEAP8[$__str >> 0] & 1)) {
  HEAP32[$this >> 2] = HEAP32[$__str >> 2];
  HEAP32[$this + 4 >> 2] = HEAP32[$__str + 4 >> 2];
  HEAP32[$this + 8 >> 2] = HEAP32[$__str + 8 >> 2];
 } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, HEAP32[$__str + 8 >> 2] | 0, HEAP32[$__str + 4 >> 2] | 0);
 return;
}

function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0 = 0, $1 = 0, $3 = 0, $8 = 0;
 $$0 = $low;
 while (1) {
  if (($$0 | 0) == ($high | 0)) break;
  $1 = HEAP8[$$0 >> 0] | 0;
  if ($1 << 24 >> 24 > -1) {
   $3 = ___ctype_toupper_loc() | 0;
   $8 = HEAP32[(HEAP32[$3 >> 2] | 0) + ($1 << 24 >> 24 << 2) >> 2] & 255;
  } else $8 = $1;
  HEAP8[$$0 >> 0] = $8;
  $$0 = $$0 + 1 | 0;
 }
 return $high | 0;
}

function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0 = 0, $1 = 0, $3 = 0, $8 = 0;
 $$0 = $low;
 while (1) {
  if (($$0 | 0) == ($high | 0)) break;
  $1 = HEAP8[$$0 >> 0] | 0;
  if ($1 << 24 >> 24 > -1) {
   $3 = ___ctype_tolower_loc() | 0;
   $8 = HEAP32[(HEAP32[$3 >> 2] | 0) + ($1 << 24 >> 24 << 2) >> 2] & 255;
  } else $8 = $1;
  HEAP8[$$0 >> 0] = $8;
  $$0 = $$0 + 1 | 0;
 }
 return $high | 0;
}

function ___cxa_can_catch($catchType, $excpType, $thrown) {
 $catchType = $catchType | 0;
 $excpType = $excpType | 0;
 $thrown = $thrown | 0;
 var $4 = 0, $temp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $temp = sp;
 HEAP32[$temp >> 2] = HEAP32[$thrown >> 2];
 $4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$catchType >> 2] | 0) + 16 >> 2] & 127]($catchType, $excpType, $temp) | 0;
 if ($4) HEAP32[$thrown >> 2] = HEAP32[$temp >> 2];
 STACKTOP = sp;
 return $4 & 1 | 0;
}

function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s, $__n, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = _uselocale($__l) | 0;
 $1 = _vsnprintf($__s, $__n, $__format, $__va) | 0;
 if ($0) _uselocale($0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $3 = 0, $4 = 0, $__h$0 = 0, $__h$0$lcssa = 0, $__p$0 = 0;
 $__h$0 = 0;
 $__p$0 = $__lo;
 while (1) {
  if (($__p$0 | 0) == ($__hi | 0)) {
   $__h$0$lcssa = $__h$0;
   break;
  }
  $3 = (HEAP32[$__p$0 >> 2] | 0) + ($__h$0 << 4) | 0;
  $4 = $3 & -268435456;
  $__h$0 = ($4 >>> 24 | $4) ^ $3;
  $__p$0 = $__p$0 + 4 | 0;
 }
 return $__h$0$lcssa | 0;
}

function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $4 = 0, $5 = 0, $__h$0 = 0, $__h$0$lcssa = 0, $__p$0 = 0;
 $__h$0 = 0;
 $__p$0 = $__lo;
 while (1) {
  if (($__p$0 | 0) == ($__hi | 0)) {
   $__h$0$lcssa = $__h$0;
   break;
  }
  $4 = (HEAP8[$__p$0 >> 0] | 0) + ($__h$0 << 4) | 0;
  $5 = $4 & -268435456;
  $__h$0 = ($5 >>> 24 | $5) ^ $4;
  $__p$0 = $__p$0 + 1 | 0;
 }
 return $__h$0$lcssa | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this + 128 >> 0] = 0;
 if ($__n) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this, $__n);
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this, $__n);
 }
 return;
}

function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0];
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0;
 $0 = $this + 8 | 0;
 $2 = _uselocale(HEAP32[$0 >> 2] | 0) | 0;
 $3 = _mbtowc(0, 0, 4) | 0;
 if ($2) _uselocale($2) | 0;
 if (!$3) {
  $6 = HEAP32[$0 >> 2] | 0;
  if (!$6) $$0 = 1; else {
   $8 = _uselocale($6) | 0;
   if (!$8) $$0 = 0; else {
    _uselocale($8) | 0;
    $$0 = 0;
   }
  }
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp | 0;
 var $$field = 0, $$field2 = 0, $0 = 0, $10 = 0, $3 = 0;
 $0 = $__vp + 4 | 0;
 $$field = HEAP32[$0 >> 2] | 0;
 $$field2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = (HEAP32[$__vp >> 2] | 0) + ($$field2 >> 1) | 0;
 if (!($$field2 & 1)) $10 = $$field; else $10 = HEAP32[(HEAP32[$3 >> 2] | 0) + $$field >> 2] | 0;
 FUNCTION_TABLE_vi[$10 & 255]($3);
 return;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($this, $__os) {
 $this = $this | 0;
 $__os = $__os | 0;
 var $4 = 0, $9 = 0;
 HEAP8[$this >> 0] = 0;
 HEAP32[$this + 4 >> 2] = $__os;
 $4 = $__os + (HEAP32[(HEAP32[$__os >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (!(HEAP32[$4 + 16 >> 2] | 0)) {
  $9 = HEAP32[$4 + 72 >> 2] | 0;
  if ($9) __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($9) | 0;
  HEAP8[$this >> 0] = 1;
 }
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this, $__os) {
 $this = $this | 0;
 $__os = $__os | 0;
 var $4 = 0, $9 = 0;
 HEAP8[$this >> 0] = 0;
 HEAP32[$this + 4 >> 2] = $__os;
 $4 = $__os + (HEAP32[(HEAP32[$__os >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (!(HEAP32[$4 + 16 >> 2] | 0)) {
  $9 = HEAP32[$4 + 72 >> 2] | 0;
  if ($9) __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($9) | 0;
  HEAP8[$this >> 0] = 1;
 }
 return;
}

function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $$0 = 0, $$01 = 0, $1 = 0;
 $$0 = $dest;
 $$01 = $low;
 while (1) {
  if (($$01 | 0) == ($high | 0)) break;
  $1 = HEAP8[$$01 >> 0] | 0;
  HEAP8[$$0 >> 0] = $1 << 24 >> 24 > -1 ? $1 : $dfault;
  $$0 = $$0 + 1 | 0;
  $$01 = $$01 + 1 | 0;
 }
 return $high | 0;
}

function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = _uselocale($__l) | 0;
 $1 = _vasprintf($__s, $__format, $__va) | 0;
 if ($0) _uselocale($0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this, $ev) {
 $this = $this | 0;
 $ev = $ev | 0;
 var $2 = 0, $3 = 0, $5 = 0, $i$0 = 0;
 $2 = $this + 32 | 0;
 $3 = $this + 36 | 0;
 $i$0 = HEAP32[$this + 40 >> 2] | 0;
 while (1) {
  if (!$i$0) break;
  $5 = $i$0 + -1 | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$2 >> 2] | 0) + ($5 << 2) >> 2] & 63]($ev, $this, HEAP32[(HEAP32[$3 >> 2] | 0) + ($5 << 2) >> 2] | 0);
  $i$0 = $5;
 }
 return;
}

function __ZN10emscripten8internal12operator_newI7OptionsJEEEPT_DpOT0_() {
 var $0 = 0;
 $0 = __Znwj(72) | 0;
 HEAPF64[$0 >> 3] = 0.0;
 HEAPF64[$0 + 8 >> 3] = 1.0e-08;
 HEAPF64[$0 + 16 >> 3] = 1.0e-06;
 HEAPF64[$0 + 32 >> 3] = 1797693134862315708145274.0e284;
 HEAPF64[$0 + 40 >> 3] = 0.0;
 HEAPF64[$0 + 48 >> 3] = 1.1;
 HEAPF64[$0 + 56 >> 3] = .9;
 HEAPF64[$0 + 24 >> 3] = 0.0;
 HEAP32[$0 + 68 >> 2] = 5;
 HEAP32[$0 + 64 >> 2] = 0;
 return $0 | 0;
}

function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = _uselocale($__l) | 0;
 $1 = _vsscanf($__s, $__format, $__va) | 0;
 if ($0) _uselocale($0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below);
 return;
}

function __ZN10emscripten8internal7InvokerIP8SolPointJOdO6VectorEE6invokeEPFS3_S4_S6_EdPS5_($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = +$args;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = sp + 8 | 0;
 HEAPF64[$0 >> 3] = $args;
 __ZN6VectorC2ERKS_($1, $args1);
 $2 = FUNCTION_TABLE_iii[$fn & 63]($0, $1) | 0;
 __ZN6VectorD2Ev($1);
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $10 = 0, $3 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 127]($this) | 0;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10460) | 0;
 HEAP32[$this + 36 >> 2] = $3;
 $10 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 127]($3) | 0) & 1;
 HEAP8[$this + 44 >> 0] = $10;
 return;
}

function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $10 = 0, $3 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 127]($this) | 0;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 10452) | 0;
 HEAP32[$this + 36 >> 2] = $3;
 $10 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 127]($3) | 0) & 1;
 HEAP8[$this + 44 >> 0] = $10;
 return;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function __ZN10emscripten8internal12operator_newI8SolPointJd6VectorEEEPT_DpOT0_($args, $args1) {
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $2 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = __Znwj(16) | 0;
 $2 = +HEAPF64[$args >> 3];
 __ZN6VectorC2ERKS_($0, $args1);
 __ZN6VectorC2ERKS_($1, $0);
 HEAPF64[$1 + 8 >> 3] = $2;
 __ZN6VectorD2Ev($0);
 STACKTOP = sp;
 return $1 | 0;
}

function __Z1FdPdS_($t, $x, $res) {
 $t = +$t;
 $x = $x | 0;
 $res = $res | 0;
 var $11 = 0.0, $2 = 0, $5 = 0;
 $2 = $x + 8 | 0;
 $5 = $x + 16 | 0;
 HEAPF64[$res >> 3] = +HEAPF64[$2 >> 3] * 100.0 * +HEAPF64[$5 >> 3] - +HEAPF64[$x >> 3] * .1;
 $11 = +HEAPF64[$2 >> 3];
 HEAPF64[$res + 8 >> 3] = +HEAPF64[$x >> 3] * .1 - $11 * 100.0 * +HEAPF64[$5 >> 3] - $11 * 1.0e3;
 HEAPF64[$res + 16 >> 3] = +HEAPF64[$2 >> 3] * 1.0e3;
 return;
}

function __ZNSt3__18numpunctIwEC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $4 = 0, $__i$0$i$i = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 10596;
 HEAP32[$this + 8 >> 2] = 46;
 HEAP32[$this + 12 >> 2] = 44;
 $4 = $this + 16 | 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$4 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZN6VectorC2EPKdi($this, $arr, $n) {
 $this = $this | 0;
 $arr = $arr | 0;
 $n = $n | 0;
 var $2 = 0, $i$01 = 0;
 HEAP32[$this + 4 >> 2] = $n;
 $2 = __Znaj($n >>> 0 > 536870911 ? -1 : $n << 3) | 0;
 HEAP32[$this >> 2] = $2;
 if (($n | 0) > 0) $i$01 = 0; else return;
 do {
  HEAPF64[$2 + ($i$01 << 3) >> 3] = +HEAPF64[$arr + ($i$01 << 3) >> 3];
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != ($n | 0));
 return;
}

function __ZNSt3__18numpunctIcEC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $4 = 0, $__i$0$i$i = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 10556;
 HEAP8[$this + 8 >> 0] = 46;
 HEAP8[$this + 9 >> 0] = 44;
 $4 = $this + 12 | 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$4 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10emscripten8internal14raw_destructorI4GearEEvPT_($ptr) {
 $ptr = $ptr | 0;
 var $5 = 0, $8 = 0;
 if (!$ptr) return;
 if (+HEAPF64[$ptr + 32 >> 3] > 0.0) {
  $5 = HEAP32[$ptr + 156 >> 2] | 0;
  if ($5) {
   __ZN6VectorD2Ev($5);
   __ZdlPv($5);
  }
  $8 = HEAP32[$ptr + 160 >> 2] | 0;
  if ($8) {
   __ZN6VectorD2Ev($8);
   __ZdlPv($8);
  }
 }
 __ZN14NordsieckStateD2Ev($ptr + 80 | 0);
 __ZdlPv($ptr);
 return;
}

function _copysign($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $6 = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $6 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $1 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = $0;
 HEAP32[tempDoublePtr + 4 >> 2] = $6;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this | 0;
 var $__p$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p$i = sp;
 if ((HEAP32[$this >> 2] | 0) != -1) {
  HEAP32[$__p$i >> 2] = $this;
  HEAP32[$__p$i + 4 >> 2] = 148;
  HEAP32[$__p$i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this, $__p$i, 149);
 }
 STACKTOP = sp;
 return (HEAP32[$this + 4 >> 2] | 0) + -1 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $agg$result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $9 = $agg$result + 8 | 0;
 HEAP32[$9 >> 2] = -1;
 HEAP32[$9 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $agg$result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $9 = $agg$result + 8 | 0;
 HEAP32[$9 >> 2] = -1;
 HEAP32[$9 + 4 >> 2] = -1;
 return;
}

function __ZSt9terminatev() {
 var $0 = 0, $17 = 0, $2 = 0, $5 = 0;
 $0 = ___cxa_get_globals_fast() | 0;
 if ($0) {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2) {
   $5 = $2 + 48 | 0;
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) __ZSt11__terminatePFvvE(HEAP32[$2 + 12 >> 2] | 0);
  }
 }
 $17 = HEAP32[786] | 0;
 HEAP32[786] = $17 + 0;
 __ZSt11__terminatePFvvE($17);
}

function ___uflow($f) {
 $f = $f | 0;
 var $$0 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = sp;
 if (!(HEAP32[$f + 8 >> 2] | 0)) if (!(___toread($f) | 0)) label = 3; else $$0 = -1; else label = 3;
 if ((label | 0) == 3) if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 127]($f, $c, 1) | 0) == 1) $$0 = HEAPU8[$c >> 0] | 0; else $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__15ctypeIcEC2EPKtbj($this, $tab, $del, $refs) {
 $this = $this | 0;
 $tab = $tab | 0;
 $del = $del | 0;
 $refs = $refs | 0;
 var $2 = 0, $6 = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 10408;
 $2 = $this + 8 | 0;
 HEAP32[$2 >> 2] = $tab;
 HEAP8[$this + 12 >> 0] = $del & 1;
 if (!$tab) {
  $6 = ___ctype_b_loc() | 0;
  HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
 }
 return;
}

function __ZNK6Matrix9ElementAtEii($this, $m, $n) {
 $this = $this | 0;
 $m = $m | 0;
 $n = $n | 0;
 var $10 = 0;
 if ((HEAP32[$this + 4 >> 2] | 0) >= ($m | 0)) if ((HEAP32[$this + 8 >> 2] | 0) >= ($n | 0)) return (HEAP32[(HEAP32[$this >> 2] | 0) + ($m << 2) >> 2] | 0) + ($n << 3) | 0;
 $10 = ___cxa_allocate_exception(4) | 0;
 HEAP32[$10 >> 2] = 0;
 ___cxa_throw($10 | 0, 936, 0);
 return 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0 = 0, $0 = 0, $1 = 0;
 $0 = $this + 4 | 0;
 $$0 = $__n;
 $1 = HEAP32[$0 >> 2] | 0;
 do {
  HEAP32[$1 >> 2] = 0;
  $1 = (HEAP32[$0 >> 2] | 0) + 4 | 0;
  HEAP32[$0 >> 2] = $1;
  $$0 = $$0 + -1 | 0;
 } while (($$0 | 0) != 0);
 return;
}

function __ZN6VectorC2Eid($this, $n, $val) {
 $this = $this | 0;
 $n = $n | 0;
 $val = +$val;
 var $2 = 0, $i$01 = 0;
 HEAP32[$this + 4 >> 2] = $n;
 $2 = __Znaj($n >>> 0 > 536870911 ? -1 : $n << 3) | 0;
 HEAP32[$this >> 2] = $2;
 if (($n | 0) > 0) $i$01 = 0; else return;
 do {
  HEAPF64[$2 + ($i$01 << 3) >> 3] = $val;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != ($n | 0));
 return;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}

function _newlocale($mask, $name, $base) {
 $mask = $mask | 0;
 $name = $name | 0;
 $base = $base | 0;
 var $$01 = 0, label = 0;
 if (!(HEAP8[$name >> 0] | 0)) label = 4; else if (!(_strcmp($name, 24211) | 0)) label = 4; else if (!(_strcmp($name, 17795) | 0)) label = 4; else $$01 = 0;
 if ((label | 0) == 4) if (!$base) $$01 = _calloc(1, 4) | 0; else $$01 = $base;
 return $$01 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0;
 $2 = $agg$result;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $7 = $agg$result + 8 | 0;
 HEAP32[$7 >> 2] = -1;
 HEAP32[$7 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0;
 $2 = $agg$result;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $7 = $agg$result + 8 | 0;
 HEAP32[$7 >> 2] = -1;
 HEAP32[$7 + 4 >> 2] = -1;
 return;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}

function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $$0 = 0, $$01 = 0;
 $$0 = $dest;
 $$01 = $low;
 while (1) {
  if (($$01 | 0) == ($high | 0)) break;
  HEAP8[$$0 >> 0] = HEAP8[$$01 >> 0] | 0;
  $$0 = $$0 + 1 | 0;
  $$01 = $$01 + 1 | 0;
 }
 return $high | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this | 0;
 var $$0 = 0, $5 = 0, $6 = 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 127]($this) | 0) == -1) $$0 = -1; else {
  $5 = $this + 12 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $6 + 4;
  $$0 = HEAP32[$6 >> 2] | 0;
 }
 return $$0 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this | 0;
 var $$0 = 0, $5 = 0, $6 = 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 127]($this) | 0) == -1) $$0 = -1; else {
  $5 = $this + 12 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $6 + 1;
  $$0 = HEAPU8[$6 >> 0] | 0;
 }
 return $$0 | 0;
}

function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $$0 = 0, $$01 = 0;
 $$0 = $dest;
 $$01 = $low;
 while (1) {
  if (($$01 | 0) == ($high | 0)) break;
  HEAP32[$$0 >> 2] = HEAP8[$$01 >> 0];
  $$0 = $$0 + 4 | 0;
  $$01 = $$01 + 1 | 0;
 }
 return $high | 0;
}

function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi);
 return;
}

function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi);
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 HEAP32[$this >> 2] = 9056;
 __ZNSt3__16localeC2Ev($this + 4 | 0);
 $1 = $this + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 HEAP32[$this >> 2] = 8992;
 __ZNSt3__16localeC2Ev($this + 4 | 0);
 $1 = $this + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 return;
}

function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this | 0;
 if (!(HEAP8[2744] | 0)) if (___cxa_guard_acquire(2744) | 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(13656, 13620, _wcslen(13620) | 0);
  ___cxa_atexit(157, 13656, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2744);
 }
 return 13656;
}

function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this | 0;
 if (!(HEAP8[2792] | 0)) if (___cxa_guard_acquire(2792) | 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(13896, 13848, _wcslen(13848) | 0);
  ___cxa_atexit(157, 13896, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2792);
 }
 return 13896;
}

function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this | 0;
 if (!(HEAP8[2776] | 0)) if (___cxa_guard_acquire(2776) | 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(13824, 13740, _wcslen(13740) | 0);
  ___cxa_atexit(157, 13824, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2776);
 }
 return 13824;
}

function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this | 0;
 if (!(HEAP8[2760] | 0)) if (___cxa_guard_acquire(2760) | 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(13716, 13680, _wcslen(13680) | 0);
  ___cxa_atexit(157, 13716, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2760);
 }
 return 13716;
}

function _wmemcpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$014 = 0, $$023 = 0, $$05 = 0;
 if ($n) {
  $$014 = $n;
  $$023 = $s;
  $$05 = $d;
  while (1) {
   $$014 = $$014 + -1 | 0;
   HEAP32[$$05 >> 2] = HEAP32[$$023 >> 2];
   if (!$$014) break; else {
    $$023 = $$023 + 4 | 0;
    $$05 = $$05 + 4 | 0;
   }
  }
 }
 return $d | 0;
}

function ___shlim($f, $lim) {
 $f = $f | 0;
 $lim = $lim | 0;
 var $2 = 0, $4 = 0, $5 = 0;
 HEAP32[$f + 104 >> 2] = $lim;
 $2 = HEAP32[$f + 8 >> 2] | 0;
 $4 = HEAP32[$f + 4 >> 2] | 0;
 $5 = $2 - $4 | 0;
 HEAP32[$f + 108 >> 2] = $5;
 if (($lim | 0) != 0 & ($5 | 0) > ($lim | 0)) HEAP32[$f + 100 >> 2] = $4 + $lim; else HEAP32[$f + 100 >> 2] = $2;
 return;
}

function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(7784) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(7952) | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(8124) | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(8292) | 0;
 return;
}

function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 9280;
 __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this, 0);
 __ZNSt3__16localeD2Ev($this + 28 | 0);
 _free(HEAP32[$this + 32 >> 2] | 0);
 _free(HEAP32[$this + 36 >> 2] | 0);
 _free(HEAP32[$this + 48 >> 2] | 0);
 _free(HEAP32[$this + 60 >> 2] | 0);
 return;
}

function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $8 = 0;
 $8 = _catopen((HEAP8[$__nm >> 0] & 1) == 0 ? $__nm + 1 | 0 : HEAP32[$__nm + 8 >> 2] | 0, 1) | 0;
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $8 = 0;
 $8 = _catopen((HEAP8[$__nm >> 0] & 1) == 0 ? $__nm + 1 | 0 : HEAP32[$__nm + 8 >> 2] | 0, 1) | 0;
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $2 = 0, $3 = 0, $4 = 0, $l$ = 0;
 $2 = $f + 20 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = (HEAP32[$f + 16 >> 2] | 0) - $3 | 0;
 $l$ = $4 >>> 0 > $l >>> 0 ? $l : $4;
 _memcpy($3 | 0, $s | 0, $l$ | 0) | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $l$;
 return $l | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this | 0;
 if (!(HEAP8[2784] | 0)) if (___cxa_guard_acquire(2784) | 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(13836, 24584, 11);
  ___cxa_atexit(156, 13836, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2784);
 }
 return 13836;
}

function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this | 0;
 if (!(HEAP8[2768] | 0)) if (___cxa_guard_acquire(2768) | 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(13728, 24563, 20);
  ___cxa_atexit(156, 13728, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2768);
 }
 return 13728;
}

function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this | 0;
 if (!(HEAP8[2736] | 0)) if (___cxa_guard_acquire(2736) | 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(13608, 24545, 8);
  ___cxa_atexit(156, 13608, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2736);
 }
 return 13608;
}

function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this | 0;
 if (!(HEAP8[2752] | 0)) if (___cxa_guard_acquire(2752) | 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(13668, 24554, 8);
  ___cxa_atexit(156, 13668, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2752);
 }
 return 13668;
}

function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $1 = 0;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $1 + -1;
 if (!$1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 8 >> 2] & 255]($this);
  $$0 = 1;
 } else $$0 = 0;
 return $$0 | 0;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10emscripten8internal7InvokerIP4GearJdR6VectorjR7OptionsEE6invokeEPFS3_dS5_jS7_EdPS4_jPS6_($fn, $args, $args1, $args2, $args3) {
 $fn = $fn | 0;
 $args = +$args;
 $args1 = $args1 | 0;
 $args2 = $args2 | 0;
 $args3 = $args3 | 0;
 return FUNCTION_TABLE_idiii[$fn & 63]($args, $args1, $args2, $args3) | 0;
}

function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function dynCall_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function __ZN10emscripten8internal7InvokerIP6VectorJOiEE6invokeEPFS3_S4_Ei($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $args;
 $1 = FUNCTION_TABLE_ii[$fn & 127]($0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _abort_message($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $list = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $list = sp;
 HEAP32[$list >> 2] = $varargs;
 $0 = HEAP32[853] | 0;
 _vfprintf($0, $format, $list) | 0;
 _fputc(10, $0) | 0;
 _abort();
}

function _snprintf($s, $n, $fmt, $varargs) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsnprintf($s, $n, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob | 0;
 var $$0 = 0;
 switch (HEAP32[$iob + 4 >> 2] & 74 | 0) {
 case 64:
  {
   $$0 = 8;
   break;
  }
 case 8:
  {
   $$0 = 16;
   break;
  }
 case 0:
  {
   $$0 = 0;
   break;
  }
 default:
  $$0 = 10;
 }
 return $$0 | 0;
}

function ___stdio_close($f) {
 $f = $f | 0;
 var $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
 $3 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 return __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 return __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0;
}

function __ZNK6VectorixEi($this, $i) {
 $this = $this | 0;
 $i = $i | 0;
 var $5 = 0;
 if ((HEAP32[$this + 4 >> 2] | 0) > ($i | 0)) return (HEAP32[$this >> 2] | 0) + ($i << 3) | 0; else {
  $5 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$5 >> 2] = 0;
  ___cxa_throw($5 | 0, 936, 0);
 }
 return 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $5 = 0;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 if (!$1) $5 = 1; else {
  $3 = _uselocale($1) | 0;
  if (!$3) $5 = 4; else {
   _uselocale($3) | 0;
   $5 = 4;
  }
 }
 return $5 | 0;
}

function __ZNKSt3__15ctypeIwE5do_isEtw($this, $m, $c) {
 $this = $this | 0;
 $m = $m | 0;
 $c = $c | 0;
 var $0 = 0, $6 = 0;
 if ($c >>> 0 < 128) {
  $0 = ___ctype_b_loc() | 0;
  $6 = (HEAP16[(HEAP32[$0 >> 2] | 0) + ($c << 1) >> 1] & $m) << 16 >> 16 != 0;
 } else $6 = 0;
 return $6 | 0;
}

function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function _sscanf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsscanf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}

function __ZNKSt3__15ctypeIcE10do_tolowerEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $1 = 0, $6 = 0;
 if ($c << 24 >> 24 > -1) {
  $1 = ___ctype_tolower_loc() | 0;
  $6 = HEAP32[(HEAP32[$1 >> 2] | 0) + ($c << 24 >> 24 << 2) >> 2] & 255;
 } else $6 = $c;
 return $6 | 0;
}

function _wmemset($d, $c, $n) {
 $d = $d | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$012 = 0, $$03 = 0;
 if ($n) {
  $$012 = $n;
  $$03 = $d;
  while (1) {
   $$012 = $$012 + -1 | 0;
   HEAP32[$$03 >> 2] = $c;
   if (!$$012) break; else $$03 = $$03 + 4 | 0;
  }
 }
 return $d | 0;
}

function __ZNKSt3__15ctypeIcE10do_toupperEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $1 = 0, $6 = 0;
 if ($c << 24 >> 24 > -1) {
  $1 = ___ctype_toupper_loc() | 0;
  $6 = HEAP32[(HEAP32[$1 >> 2] | 0) + (($c & 255) << 2) >> 2] & 255;
 } else $6 = $c;
 return $6 | 0;
}

function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_once(3352, 43) | 0)) {
  $3 = _pthread_getspecific(HEAP32[837] | 0) | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else _abort_message(16937, sp);
 return 0;
}

function __ZN10emscripten8internal7InvokerIP4GearJdR6VectorR7OptionsEE6invokeEPFS3_dS5_S7_EdPS4_PS6_($fn, $args, $args1, $args2) {
 $fn = $fn | 0;
 $args = +$args;
 $args1 = $args1 | 0;
 $args2 = $args2 | 0;
 return FUNCTION_TABLE_idii[$fn & 63]($args, $args1, $args2) | 0;
}

function jsCall_iiiiiiiii_19(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(19, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_18(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(18, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_17(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(17, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_16(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(16, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_15(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(15, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_14(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(14, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_13(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(13, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_12(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(12, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_11(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(11, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_10(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(10, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function jsCall_iiiiiiiii_9(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(9, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_8(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(8, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_7(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(7, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_6(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(6, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_5(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(5, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_4(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(4, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_3(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(3, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_2(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(2, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_1(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(1, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function jsCall_iiiiiiiii_0(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall_iiiiiiiii(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function __ZN6VectorC2Ei($this, $n) {
 $this = $this | 0;
 $n = $n | 0;
 var $2 = 0;
 HEAP32[$this + 4 >> 2] = $n;
 $2 = __Znaj($n >>> 0 > 536870911 ? -1 : $n << 3) | 0;
 HEAP32[$this >> 2] = $2;
 if (($n | 0) <= 0) return;
 _memset($2 | 0, 0, $n << 3 | 0) | 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(10272) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(10236) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(10200) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(10164) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9872) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9840) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9808) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9716) | 0);
 return;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $end = $end | 0;
 $mx = $mx | 0;
 var $3 = 0;
 $3 = $end - $frm | 0;
 return ($3 >>> 0 < $mx >>> 0 ? $3 : $mx) | 0;
}

function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9624) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9564) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9504) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9432) | 0);
 return;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 HEAP32[$this >> 2] = 10476;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) != (__ZNSt3__16__clocEv() | 0)) _freelocale(HEAP32[$0 >> 2] | 0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _free($p);
 if (!(_pthread_setspecific(HEAP32[837] | 0, 0) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(17091, sp);
}

function __ZNKSt3__15ctypeIwE10do_toupperEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $0 = 0, $4 = 0;
 if ($c >>> 0 < 128) {
  $0 = ___ctype_toupper_loc() | 0;
  $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($c << 2) >> 2] | 0;
 } else $4 = $c;
 return $4 | 0;
}

function __ZNKSt3__15ctypeIwE10do_tolowerEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $0 = 0, $4 = 0;
 if ($c >>> 0 < 128) {
  $0 = ___ctype_tolower_loc() | 0;
  $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($c << 2) >> 2] | 0;
 } else $4 = $c;
 return $4 | 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, _wcslen($__s) | 0) | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this, $__s, _strlen($__s) | 0) | 0;
}

function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 127](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function __ZN4Gear9FactorialEi($arg) {
 $arg = $arg | 0;
 var $$0 = 0.0;
 if (($arg | 0) < 0) {
  $$0 = -1.0;
  return +$$0;
 }
 if (!$arg) {
  $$0 = 1.0;
  return +$$0;
 } else return +(+($arg | 0) * +__ZN4Gear9FactorialEi($arg + -1 | 0));
 return +(0.0);
}

function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
}

function __ZNKSt3__16locale9use_facetERNS0_2idE($this, $x) {
 $this = $this | 0;
 $x = $x | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = __ZNSt3__16locale2id5__getEv($x) | 0;
 return HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + ($1 << 2) >> 2] | 0;
}

function dynCall_iiiiiid(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return FUNCTION_TABLE_iiiiiid[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result, 11188, _wcslen(11188) | 0);
 return;
}

function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result, 11168, _wcslen(11168) | 0);
 return;
}

function __Z9GetSolverdR6VectorjR7Options($t0, $x0, $f, $opts) {
 $t0 = +$t0;
 $x0 = $x0 | 0;
 $f = $f | 0;
 $opts = $opts | 0;
 var $0 = 0;
 $0 = __Znwj(192) | 0;
 __ZN4GearC2EdR6VectorPFvdPdS2_ER7Options($0, $t0, $x0, $f, $opts);
 return $0 | 0;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_iiiiiiii_19(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(19, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_18(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(18, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_17(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(17, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_16(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(16, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_15(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(15, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_14(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(14, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_13(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(13, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_12(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(12, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_11(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(11, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_10(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(10, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_9(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(9, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_8(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(8, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_7(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(7, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_6(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(6, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_5(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(5, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_4(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(4, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_3(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(3, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_2(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(2, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_1(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(1, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function jsCall_iiiiiiii_0(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return jsCall_iiiiiiii(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result, 1, 45);
 return;
}

function __ZNKSt3__18ios_base6getlocEv($this) {
 $this = $this | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 __ZNSt3__16localeC2ERKS0_($0, $this + 28 | 0);
 STACKTOP = sp;
 return HEAP32[$0 >> 2] | 0;
}

function __ZNSt3__16locale8__globalEv() {
 if (!(HEAP8[2632] | 0)) if (___cxa_guard_acquire(2632) | 0) {
  __ZNSt3__16locale5__imp11make_globalEv() | 0;
  HEAP32[2791] = 11160;
  ___cxa_guard_release(2632);
 }
 return HEAP32[2791] | 0;
}

function __ZNSt3__16locale7classicEv() {
 if (!(HEAP8[2464] | 0)) if (___cxa_guard_acquire(2464) | 0) {
  __ZNSt3__16locale5__imp12make_classicEv() | 0;
  HEAP32[2789] = 11152;
  ___cxa_guard_release(2464);
 }
 return HEAP32[2789] | 0;
}

function __Z15ChemistrySolverdR6VectorR7Options($t0, $x0, $opts) {
 $t0 = +$t0;
 $x0 = $x0 | 0;
 $opts = $opts | 0;
 var $0 = 0;
 $0 = __Znwj(192) | 0;
 __ZN4GearC2EdR6VectorPFvdPdS2_ER7Options($0, $t0, $x0, 43, $opts);
 return $0 | 0;
}

function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result, $this + 16 | 0);
 return;
}

function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result, $this + 12 | 0);
 return;
}

function __Z14GetLotkaSolverdR6VectorR7Options($t0, $x0, $opts) {
 $t0 = +$t0;
 $x0 = $x0 | 0;
 $opts = $opts | 0;
 var $0 = 0;
 $0 = __Znwj(192) | 0;
 __ZN4GearC2EdR6VectorPFvdPdS2_ER7Options($0, $t0, $x0, 42, $opts);
 return $0 | 0;
}

function __ZNSt3__16localeC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 $0 = __ZNSt3__16locale8__globalEv() | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$this >> 2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(10516) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(10524) | 0);
 return;
}

function __ZNSt3__16__clocEv() {
 var $4 = 0;
 if (!(HEAP8[2144] | 0)) if (___cxa_guard_acquire(2144) | 0) {
  $4 = _newlocale(2147483647, 24211, 0) | 0;
  HEAP32[2739] = $4;
  ___cxa_guard_release(2144);
 }
 return HEAP32[2739] | 0;
}

function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 24318, 5);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(10460) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(10452) | 0);
 return;
}

function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 24313, 4);
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $0 = $0 | 0;
 return ($this | 0) == ($thrown_type | 0) | 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(10128) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(10064) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9936) | 0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_key_create(3348, 143) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(17041, sp);
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(1e4) | 0);
 return;
}

function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0;
 $0 = __ZNSt3__16locale7classicEv() | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[2790] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return 11160;
}

function dynCall_iiiiid(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return FUNCTION_TABLE_iiiiid[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function dynCall_iidiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iidiii[index & 63](a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function ___strdup($s) {
 $s = $s | 0;
 var $$0 = 0, $1 = 0, $2 = 0;
 $1 = (_strlen($s) | 0) + 1 | 0;
 $2 = _malloc($1) | 0;
 if (!$2) $$0 = 0; else {
  _memcpy($2 | 0, $s | 0, $1 | 0) | 0;
  $$0 = $2;
 }
 return $$0 | 0;
}

function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(10540) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(10532) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(10352) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(10312) | 0);
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9360) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9320) | 0);
 return;
}

function jsCall_iiiiiii_19(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(19, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_18(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(18, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_17(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(17, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_16(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(16, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_15(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(15, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_14(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(14, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_13(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(13, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_12(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(12, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_11(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(11, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_10(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(10, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(10384) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(10392) | 0);
 return;
}

function jsCall_iiiiiii_9(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(9, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_8(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(8, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_7(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(7, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_6(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(6, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_5(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(5, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_4(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(4, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_3(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(3, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_2(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(2, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_1(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(1, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiii_0(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return jsCall_iiiiiii(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function jsCall_iiiiiid_19(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(19, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_18(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(18, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_17(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(17, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_16(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(16, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_15(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(15, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_14(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(14, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_13(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(13, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_12(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(12, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_11(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(11, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_10(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(10, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_9(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(9, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_8(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(8, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_7(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(7, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_6(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(6, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_5(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(5, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_4(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(4, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_3(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(3, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_2(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(2, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_1(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(1, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function jsCall_iiiiiid_0(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return jsCall_iiiiiid(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function _wcslen($s) {
 $s = $s | 0;
 var $$0 = 0, $$0$lcssa = 0;
 $$0 = $s;
 while (1) if (!(HEAP32[$$0 >> 2] | 0)) {
  $$0$lcssa = $$0;
  break;
 } else $$0 = $$0 + 4 | 0;
 return $$0$lcssa - $s >> 2 | 0;
}

function __ZN6Vector10SetElementEid($this, $i, $val) {
 $this = $this | 0;
 $i = $i | 0;
 $val = +$val;
 var $1 = 0;
 $1 = (HEAP32[$this >> 2] | 0) + ($i << 3) | 0;
 HEAPF64[$1 >> 3] = $val;
 return $1 | 0;
}

function jsCall_viiiiii_19(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(19, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_18(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(18, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_17(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(17, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_16(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(16, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_15(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(15, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_14(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(14, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_13(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(13, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_12(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(12, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_11(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(11, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_10(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(10, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function __ZNSt3__16localeC2ERKS0_($this, $l) {
 $this = $this | 0;
 $l = $l | 0;
 var $0 = 0;
 $0 = HEAP32[$l >> 2] | 0;
 HEAP32[$this >> 2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 return;
}

function jsCall_viiiiii_9(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(9, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_8(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(8, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_7(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(7, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_6(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(6, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_5(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(5, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_4(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(4, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_3(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(3, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_2(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(2, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_1(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(1, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function jsCall_viiiiii_0(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall_viiiiii(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function ___syscall_ret($r) {
 $r = $r | 0;
 var $$0 = 0, $2 = 0;
 if ($r >>> 0 > 4294963200) {
  $2 = ___errno_location() | 0;
  HEAP32[$2 >> 2] = 0 - $r;
  $$0 = -1;
 } else $$0 = $r;
 return $$0 | 0;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 4 | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 4 | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 8 | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 8 | 0);
 return;
}

function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 HEAP32[$this >> 2] = 10408;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 if ($1) if (HEAP8[$this + 12 >> 0] | 0) __ZdaPv($1);
 return;
}

function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (($0 | 0) != (__ZNSt3__16__clocEv() | 0)) _freelocale(HEAP32[$this >> 2] | 0);
 return;
}

function dynCall_iidii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iidii[index & 63](a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function dynCall_idiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_idiii[index & 63](+a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __ZN10emscripten8internal12operator_newI6VectorJiEEEPT_DpOT0_($args) {
 $args = $args | 0;
 var $0 = 0;
 $0 = __Znwj(8) | 0;
 __ZN6VectorC2Ei($0, HEAP32[$args >> 2] | 0);
 return $0 | 0;
}

function dynCall_diiid(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +FUNCTION_TABLE_diiid[index & 63](a1 | 0, a2 | 0, a3 | 0, +a4);
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 10596;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 16 | 0);
 return;
}

function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 10556;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 12 | 0);
 return;
}

function jsCall_iiiiii_19(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(19, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_18(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(18, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_17(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(17, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_16(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(16, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_15(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(15, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_14(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(14, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_13(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(13, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_12(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(12, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_11(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(11, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_10(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(10, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_9(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(9, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_8(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(8, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_7(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(7, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_6(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(6, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_5(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(5, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_4(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(4, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_3(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(3, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_2(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(2, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_1(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(1, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iiiiii_0(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iiiiii(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 9056;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 8992;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 __ZdlPv($this);
 return;
}

function ___errno_location() {
 var $$0 = 0, $3 = 0;
 if (!(HEAP32[840] | 0)) $$0 = 3788; else {
  $3 = (_pthread_self() | 0) + 60 | 0;
  $$0 = HEAP32[$3 >> 2] | 0;
 }
 return $$0 | 0;
}

function jsCall_iiiiid_19(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(19, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_18(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(18, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_17(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(17, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_16(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(16, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_15(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(15, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_14(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(14, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_13(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(13, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_12(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(12, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_11(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(11, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_10(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(10, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iidiii_19(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(19, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_18(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(18, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_17(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(17, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_16(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(16, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_15(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(15, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_14(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(14, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_13(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(13, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_12(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(12, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_11(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(11, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_10(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(10, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function __ZSt11__terminatePFvvE($func) {
 $func = $func | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 FUNCTION_TABLE_v[$func & 63]();
 _abort_message(17001, sp);
}

function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0);
 __ZdlPv($this);
 return;
}

function b28(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 abort(28);
 return 0;
}

function jsCall_iiiiid_9(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(9, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_8(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(8, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_7(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(7, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_6(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(6, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_5(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(5, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_4(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(4, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_3(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(3, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_2(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(2, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_1(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(1, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iiiiid_0(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return jsCall_iiiiid(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function jsCall_iidiii_9(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(9, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_8(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(8, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_7(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(7, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_6(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(6, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_5(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(5, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_4(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(4, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_3(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(3, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_2(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(2, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_1(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(1, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function jsCall_iidiii_0(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall_iidiii(0, a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this >> 0] & 1) __ZdlPv(HEAP32[$this + 8 >> 2] | 0);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this >> 0] & 1) __ZdlPv(HEAP32[$this + 8 >> 2] | 0);
 return;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}

function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = $this + 16 | 0;
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 1;
 return;
}

function jsCall_viiiii_19(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(19, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_18(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(18, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_17(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(17, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_16(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(16, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_15(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(15, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_14(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(14, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_13(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(13, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_12(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(12, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_11(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(11, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_10(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(10, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this | 0;
 if ($this) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 4 >> 2] & 255]($this);
 return;
}

function __ZNSt3__18ios_base5clearEj($this, $state) {
 $this = $this | 0;
 $state = $state | 0;
 HEAP32[$this + 16 >> 2] = (HEAP32[$this + 24 >> 2] | 0) == 0 | $state;
 return;
}

function jsCall_viiiii_9(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(9, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_8(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(8, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_7(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(7, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_6(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(6, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_5(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(5, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_4(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(4, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_3(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(3, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_2(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(2, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_1(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(1, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function jsCall_viiiii_0(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall_viiiii(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 127](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function _strtoull_l($s, $p, $base, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $loc = $loc | 0;
 var $0 = 0;
 $0 = _strtoull($s, $p, $base) | 0;
 return $0 | 0;
}

function _uselocale($l) {
 $l = $l | 0;
 var $1 = 0, $2 = 0;
 $1 = (_pthread_self() | 0) + 176 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($l) HEAP32[$1 >> 2] = $l;
 return $2 | 0;
}

function __ZNKSt3__15ctypeIwE9do_narrowEwc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c >>> 0 < 128 ? $c & 255 : $dfault) | 0;
}

function _strtoll_l($s, $p, $base, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $loc = $loc | 0;
 var $0 = 0;
 $0 = _strtoll($s, $p, $base) | 0;
 return $0 | 0;
}

function ___cxa_is_pointer_type($type) {
 $type = $type | 0;
 var $3 = 0;
 if (!$type) $3 = 0; else $3 = (___dynamic_cast($type, 776, 824, 0) | 0) != 0;
 return $3 & 1 | 0;
}

function __ZNKSt3__15ctypeIcE9do_narrowEcc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c << 24 >> 24 > -1 ? $c : $dfault) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[2595] | 0;
 HEAP32[2595] = $0 + 1;
 HEAP32[$this + 4 >> 2] = $0 + 1;
 return;
}

function dynCall_diii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +FUNCTION_TABLE_diii[index & 63](a1 | 0, a2 | 0, a3 | 0);
}

function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = $this + 4 | 0;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 9056;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 8992;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 return;
}

function dynCall_iiid(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return FUNCTION_TABLE_iiid[index & 63](a1 | 0, a2 | 0, +a3) | 0;
}

function dynCall_iidi(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iidi[index & 63](a1 | 0, +a2, a3 | 0) | 0;
}

function dynCall_idii(index, a1, a2, a3) {
 index = index | 0;
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_idii[index & 63](+a1, a2 | 0, a3 | 0) | 0;
}

function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0);
 return;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 63](a1 | 0, a2 | 0, a3 | 0);
}

function b0(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 abort(0);
 return 0;
}

function _strtoll($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox($s, $p, $base, 0, -2147483648) | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal14raw_destructorI8SolPointEEvPT_($ptr) {
 $ptr = $ptr | 0;
 if (!$ptr) return;
 __ZN6VectorD2Ev($ptr);
 __ZdlPv($ptr);
 return;
}

function jsCall_iiiii_19(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(19, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_18(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(18, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_17(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(17, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_16(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(16, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_15(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(15, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_14(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(14, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_13(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(13, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_12(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(12, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_11(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(11, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_10(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(10, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __ZN10emscripten8internal14raw_destructorI6VectorEEvPT_($ptr) {
 $ptr = $ptr | 0;
 if (!$ptr) return;
 __ZN6VectorD2Ev($ptr);
 __ZdlPv($ptr);
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function jsCall_iiiii_9(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(9, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_8(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(8, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_7(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(7, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_6(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(6, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_5(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(5, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_4(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(4, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_3(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(3, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_2(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(2, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_1(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(1, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_0(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN8SolPoint8GetSolveEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZN6VectorC2ERKS_($agg$result, $this);
 return;
}

function dynCall_viid(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 FUNCTION_TABLE_viid[index & 63](a1 | 0, a2 | 0, +a3);
}

function dynCall_vdii(index, a1, a2, a3) {
 index = index | 0;
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_vdii[index & 63](+a1, a2 | 0, a3 | 0);
}

function jsCall_iidii_19(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(19, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_18(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(18, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_17(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(17, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_16(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(16, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_15(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(15, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_14(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(14, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_13(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(13, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_12(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(12, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_11(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(11, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_10(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(10, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_19(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(19, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_18(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(18, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_17(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(17, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_16(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(16, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_15(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(15, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_14(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(14, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_13(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(13, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_12(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(12, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_11(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(11, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_10(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(10, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function _strtoull($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox($s, $p, $base, -1, -1) | 0;
 return $0 | 0;
}

function _isxdigit($c) {
 $c = $c | 0;
 var $4 = 0;
 if (($c + -48 | 0) >>> 0 < 10) $4 = 1; else $4 = (($c | 32) + -97 | 0) >>> 0 < 6;
 return $4 & 1 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0;
}

function jsCall_iidii_9(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(9, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_8(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(8, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_7(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(7, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_6(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(6, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_5(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(5, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_4(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(4, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_3(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(3, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_2(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(2, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_1(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(1, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_iidii_0(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iidii(0, a1 | 0, +a2, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_9(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(9, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_8(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(8, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_7(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(7, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_6(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(6, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_5(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(5, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_4(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(4, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_3(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(3, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_2(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(2, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_1(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(1, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_idiii_0(a1, a2, a3, a4) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_idiii(0, +a1, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}

function jsCall_diiid_19(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(19, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_18(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(18, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_17(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(17, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_16(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(16, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_15(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(15, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_14(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(14, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_13(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(13, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_12(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(12, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_11(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(11, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_10(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(10, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function __ZSt17__throw_bad_allocv() {
 var $0 = 0;
 $0 = ___cxa_allocate_exception(4) | 0;
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw($0 | 0, 744, 42);
}

function __ZN8SolPoint5PrintEv($this) {
 $this = $this | 0;
 __ZlsRNSt3__113basic_ostreamIcNS_11char_traitsIcEEEER8SolPoint(7784, $this) | 0;
 return;
}

function jsCall_viiii_19(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(19, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_18(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(18, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_17(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(17, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_16(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(16, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_15(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(15, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_14(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(14, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_13(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(13, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_12(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(12, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_11(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(11, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_10(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(10, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_diiid_9(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(9, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_8(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(8, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_7(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(7, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_6(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(6, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_5(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(5, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_4(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(4, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_3(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(3, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_2(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(2, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_1(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(1, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_diiid_0(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = +a4;
 return +jsCall_diiid(0, a1 | 0, a2 | 0, a3 | 0, +a4);
}

function jsCall_viiii_9(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(9, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_8(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(8, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_7(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(7, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_6(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(6, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_5(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(5, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_4(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(4, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_3(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(3, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_2(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(2, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_1(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(1, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function jsCall_viiii_0(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall_viiii(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function __ZN6Vector5PrintEv($this) {
 $this = $this | 0;
 __ZlsRNSt3__113basic_ostreamIcNS_11char_traitsIcEEEERK6Vector(7784, $this) | 0;
 return;
}

function _catgets($catd, $set_id, $msg_id, $s) {
 $catd = $catd | 0;
 $set_id = $set_id | 0;
 $msg_id = $msg_id | 0;
 $s = $s | 0;
 return $s | 0;
}

function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 ___assert_fail(17144, 17173, 1164, 17252);
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 63](a1 | 0, a2 | 0) | 0;
}

function __ZNSt3__16localeD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$this >> 2] | 0) | 0;
 return;
}

function __ZN6Vector10GetElementEi($this, $i) {
 $this = $this | 0;
 $i = $i | 0;
 return +(+HEAPF64[(HEAP32[$this >> 2] | 0) + ($i << 3) >> 3]);
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $$0 = 0;
 if (!$s) $$0 = 0; else $$0 = _wcrtomb($s, $wc, 0) | 0;
 return $$0 | 0;
}

function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 ___assert_fail(17273, 17296, 303, 17252);
}

function b6(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(6);
 return 0;
}

function dynCall_dii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +FUNCTION_TABLE_dii[index & 63](a1 | 0, a2 | 0);
}

function b1(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 abort(1);
 return 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN7Options20setRelativeToleranceEd($this, $val) {
 $this = $this | 0;
 $val = +$val;
 HEAPF64[$this + 16 >> 3] = $val;
 return;
}

function _mbrlen($s, $n, $st) {
 $s = $s | 0;
 $n = $n | 0;
 $st = $st | 0;
 return _mbrtowc(0, $s, $n, ($st | 0) != 0 ? $st : 3772) | 0;
}

function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2;
}

function __ZN7Options20setAbsoluteToleranceEd($this, $val) {
 $this = $this | 0;
 $val = +$val;
 HEAPF64[$this + 8 >> 3] = $val;
 return;
}

function __ZN6VectorD2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (!$0) return;
 __ZdaPv($0);
 return;
}

function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__110__stdinbufIwE9__getcharEb($this, 0) | 0;
}

function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__110__stdinbufIcE9__getcharEb($this, 0) | 0;
}

function __ZN10emscripten8internal14raw_destructorI7OptionsEEvPT_($ptr) {
 $ptr = $ptr | 0;
 if (!$ptr) return;
 __ZdlPv($ptr);
 return;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 127](a1 | 0, a2 | 0);
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function __ZN10emscripten8internal7InvokerIP7OptionsJEE6invokeEPFS3_vE($fn) {
 $fn = $fn | 0;
 return FUNCTION_TABLE_i[$fn & 63]() | 0;
}

function b14(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(14);
}

function jsCall_iiii_19(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(19, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_18(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(18, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_17(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(17, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_16(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(16, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_15(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(15, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_14(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(14, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_13(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(13, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_12(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(12, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_11(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(11, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_10(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(10, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__110__stdinbufIwE9__getcharEb($this, 1) | 0;
}

function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__110__stdinbufIcE9__getcharEb($this, 1) | 0;
}

function _mbsinit($st) {
 $st = $st | 0;
 var $4 = 0;
 if (!$st) $4 = 1; else $4 = (HEAP32[$st >> 2] | 0) == 0;
 return $4 & 1 | 0;
}

function __ZN7Options13setOutputStepEd($this, $val) {
 $this = $this | 0;
 $val = +$val;
 HEAPF64[$this + 24 >> 3] = $val;
 return;
}

function jsCall_iiii_9(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(9, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_8(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(8, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_7(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(7, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_6(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(6, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_5(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(5, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_4(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(4, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_3(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(3, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_2(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(2, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_1(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(1, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_0(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(0, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function jsCall_diii_19(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(19, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_18(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(18, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_17(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(17, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_16(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(16, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_15(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(15, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_14(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(14, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_13(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(13, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_12(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(12, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_11(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(11, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_10(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(10, a1 | 0, a2 | 0, a3 | 0);
}

function _do_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 return ___string_read($f, $buf, $len) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function dynCall_vid(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 FUNCTION_TABLE_vid[index & 63](a1 | 0, +a2);
}

function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__16locale5__imp12make_classicEv() {
 __ZNSt3__16locale5__impC2Ej(2472, 1);
 HEAP32[2788] = 2472;
 return 11152;
}

function jsCall_diii_9(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(9, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_8(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(8, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_7(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(7, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_6(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(6, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_5(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(5, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_4(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(4, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_3(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(3, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_2(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(2, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_1(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(1, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_diii_0(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +jsCall_diii(0, a1 | 0, a2 | 0, a3 | 0);
}

function b19(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(19);
 return 0;
}

function jsCall_iiid_19(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(19, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_18(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(18, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_17(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(17, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_16(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(16, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_15(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(15, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_14(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(14, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_13(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(13, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_12(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(12, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_11(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(11, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_10(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(10, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iidi_19(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(19, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_18(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(18, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_17(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(17, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_16(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(16, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_15(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(15, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_14(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(14, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_13(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(13, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_12(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(12, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_11(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(11, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_10(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(10, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_idii_19(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(19, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_18(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(18, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_17(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(17, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_16(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(16, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_15(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(15, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_14(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(14, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_13(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(13, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_12(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(12, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_11(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(11, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_10(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(10, +a1, a2 | 0, a3 | 0) | 0;
}

function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}

function __GLOBAL__I_000101() {
 __ZNSt3__18ios_base4InitC2Ev(0);
 ___cxa_atexit(146, 22299, ___dso_handle | 0) | 0;
 return;
}

function jsCall_iiid_9(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(9, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_8(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(8, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_7(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(7, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_6(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(6, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_5(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(5, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_4(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(4, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_3(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(3, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_2(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(2, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_1(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(1, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iiid_0(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return jsCall_iiid(0, a1 | 0, a2 | 0, +a3) | 0;
}

function jsCall_iidi_9(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(9, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_8(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(8, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_7(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(7, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_6(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(6, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_5(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(5, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_4(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(4, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_3(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(3, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_2(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(2, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_1(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(1, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_iidi_0(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 return jsCall_iidi(0, a1 | 0, +a2, a3 | 0) | 0;
}

function jsCall_idii_9(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(9, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_8(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(8, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_7(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(7, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_6(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(6, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_5(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(5, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_4(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(4, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_3(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(3, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_2(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(2, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_1(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(1, +a1, a2 | 0, a3 | 0) | 0;
}

function jsCall_idii_0(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_idii(0, +a1, a2 | 0, a3 | 0) | 0;
}

function b29(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = +p4;
 abort(29);
 return 0;
}

function b21(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(21);
 return 0;
}

function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function jsCall_viii_19(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(19, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_18(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(18, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_17(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(17, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_16(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(16, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_15(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(15, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_14(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(14, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_13(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(13, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_12(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(12, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_11(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(11, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_10(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(10, a1 | 0, a2 | 0, a3 | 0);
}

function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}

function jsCall_viii_9(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(9, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_8(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(8, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_7(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(7, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_6(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(6, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_5(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(5, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_4(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(4, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_3(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(3, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_2(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(2, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_1(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(1, a1 | 0, a2 | 0, a3 | 0);
}

function jsCall_viii_0(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_viii(0, a1 | 0, a2 | 0, a3 | 0);
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 127](a1 | 0) | 0;
}

function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 12 >> 2] | 0;
}

function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 8 >> 2] | 0;
}

function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 9 >> 0] | 0;
}

function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 8 >> 0] | 0;
}

function jsCall_viid_19(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(19, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_18(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(18, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_17(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(17, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_16(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(16, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_15(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(15, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_14(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(14, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_13(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(13, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_12(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(12, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_11(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(11, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_10(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(10, a1 | 0, a2 | 0, +a3);
}

function jsCall_vdii_19(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(19, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_18(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(18, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_17(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(17, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_16(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(16, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_15(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(15, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_14(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(14, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_13(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(13, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_12(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(12, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_11(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(11, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_10(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(10, +a1, a2 | 0, a3 | 0);
}

function __ZNKSt3__15ctypeIwE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c << 24 >> 24 | 0;
}

function __GLOBAL__sub_I_bind_cpp() {
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(0);
 return;
}

function dynCall_di(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return +FUNCTION_TABLE_di[index & 63](a1 | 0);
}

function b3(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(3);
}

function jsCall_viid_9(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(9, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_8(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(8, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_7(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(7, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_6(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(6, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_5(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(5, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_4(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(4, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_3(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(3, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_2(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(2, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_1(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(1, a1 | 0, a2 | 0, +a3);
}

function jsCall_viid_0(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall_viid(0, a1 | 0, a2 | 0, +a3);
}

function jsCall_vdii_9(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(9, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_8(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(8, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_7(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(7, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_6(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(6, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_5(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(5, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_4(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(4, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_3(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(3, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_2(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(2, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_1(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(1, +a1, a2 | 0, a3 | 0);
}

function jsCall_vdii_0(a1, a2, a3) {
 a1 = +a1;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall_vdii(0, +a1, a2 | 0, a3 | 0);
}

function __ZNK7Options20getRelativeToleranceEv($this) {
 $this = $this | 0;
 return +(+HEAPF64[$this + 16 >> 3]);
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this | 0;
 return -1;
}

function __ZNK7Options20getAbsoluteToleranceEv($this) {
 $this = $this | 0;
 return +(+HEAPF64[$this + 8 >> 3]);
}

function _strtold_l($s, $p, $l) {
 $s = $s | 0;
 $p = $p | 0;
 $l = $l | 0;
 return +(+_strtox_246($s, $p, 2));
}

function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[792] | 0;
 HEAP32[792] = $0 + 0;
 return $0 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0;
}

function b24(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(24);
 return 0;
}

function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function b11(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = +p3;
 abort(11);
 return 0.0;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 255](a1 | 0);
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function b25(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(25);
 return 0;
}

function b13(p0, p1, p2, p3) {
 p0 = +p0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(13);
 return 0;
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNK7Options13getOutputStepEv($this) {
 $this = $this | 0;
 return +(+HEAPF64[$this + 24 >> 3]);
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__18messagesIwE8do_closeEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 return;
}

function __ZNKSt3__18messagesIcE8do_closeEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 return;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZN10emscripten8internal13getActualTypeI8SolPointEEPKvPT_($ptr) {
 $ptr = $ptr | 0;
 return 96;
}

function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function jsCall_iii_19(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(19, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_18(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(18, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_17(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(17, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_16(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(16, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_15(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(15, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_14(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(14, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_13(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(13, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_12(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(12, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_11(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(11, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_10(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(10, a1 | 0, a2 | 0) | 0;
}

function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN10emscripten8internal13getActualTypeI7OptionsEEPKvPT_($ptr) {
 $ptr = $ptr | 0;
 return 88;
}

function _cleanup_125($p) {
 $p = $p | 0;
 if (!(HEAP32[$p + 68 >> 2] | 0)) ___unlockfile($p);
 return;
}

function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4;
}

function __ZNKSt3__15ctypeIcE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c | 0;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function jsCall_iii_9(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(9, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_8(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(8, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_7(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(7, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_6(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(6, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_5(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(5, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_4(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(4, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_3(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(3, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_2(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(2, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_1(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(1, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_0(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(0, a1 | 0, a2 | 0) | 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZN10emscripten8internal13getActualTypeI6VectorEEPKvPT_($ptr) {
 $ptr = $ptr | 0;
 return 8;
}

function jsCall_dii_19(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(19, a1 | 0, a2 | 0);
}

function jsCall_dii_18(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(18, a1 | 0, a2 | 0);
}

function jsCall_dii_17(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(17, a1 | 0, a2 | 0);
}

function jsCall_dii_16(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(16, a1 | 0, a2 | 0);
}

function jsCall_dii_15(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(15, a1 | 0, a2 | 0);
}

function jsCall_dii_14(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(14, a1 | 0, a2 | 0);
}

function jsCall_dii_13(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(13, a1 | 0, a2 | 0);
}

function jsCall_dii_12(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(12, a1 | 0, a2 | 0);
}

function jsCall_dii_11(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(11, a1 | 0, a2 | 0);
}

function jsCall_dii_10(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(10, a1 | 0, a2 | 0);
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZN10emscripten8internal13getActualTypeI4GearEEPKvPT_($ptr) {
 $ptr = $ptr | 0;
 return 48;
}

function __GLOBAL__sub_I_bindings_cpp() {
 __ZN35EmscriptenBindingInitializer_solverC2Ev(0);
 return;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 1;
}

function jsCall_dii_9(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(9, a1 | 0, a2 | 0);
}

function jsCall_dii_8(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(8, a1 | 0, a2 | 0);
}

function jsCall_dii_7(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(7, a1 | 0, a2 | 0);
}

function jsCall_dii_6(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(6, a1 | 0, a2 | 0);
}

function jsCall_dii_5(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(5, a1 | 0, a2 | 0);
}

function jsCall_dii_4(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(4, a1 | 0, a2 | 0);
}

function jsCall_dii_3(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(3, a1 | 0, a2 | 0);
}

function jsCall_dii_2(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(2, a1 | 0, a2 | 0);
}

function jsCall_dii_1(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(1, a1 | 0, a2 | 0);
}

function jsCall_dii_0(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +jsCall_dii(0, a1 | 0, a2 | 0);
}

function _cleanup($p) {
 $p = $p | 0;
 if (!(HEAP32[$p + 68 >> 2] | 0)) ___unlockfile($p);
 return;
}

function b30(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(30);
}

function __ZN8SolPoint7GetTimeEv($this) {
 $this = $this | 0;
 return +(+HEAPF64[$this + 8 >> 3]);
}

function _isspace($c) {
 $c = $c | 0;
 return (($c | 0) == 32 | ($c + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function _isdigit_l($c, $l) {
 $c = $c | 0;
 $l = $l | 0;
 return ($c + -48 | 0) >>> 0 < 10 | 0;
}

function ___getTypeName($ti) {
 $ti = $ti | 0;
 return ___strdup(HEAP32[$ti + 4 >> 2] | 0) | 0;
}

function __ZNSt9bad_allocC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 3156;
 return;
}

function jsCall_vii_19(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(19, a1 | 0, a2 | 0);
}

function jsCall_vii_18(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(18, a1 | 0, a2 | 0);
}

function jsCall_vii_17(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(17, a1 | 0, a2 | 0);
}

function jsCall_vii_16(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(16, a1 | 0, a2 | 0);
}

function jsCall_vii_15(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(15, a1 | 0, a2 | 0);
}

function jsCall_vii_14(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(14, a1 | 0, a2 | 0);
}

function jsCall_vii_13(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(13, a1 | 0, a2 | 0);
}

function jsCall_vii_12(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(12, a1 | 0, a2 | 0);
}

function jsCall_vii_11(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(11, a1 | 0, a2 | 0);
}

function jsCall_vii_10(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(10, a1 | 0, a2 | 0);
}

function b20(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(20);
 return 0.0;
}

function _catopen($name, $oflag) {
 $name = $name | 0;
 $oflag = $oflag | 0;
 return -1 | 0;
}

function jsCall_vii_9(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(9, a1 | 0, a2 | 0);
}

function jsCall_vii_8(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(8, a1 | 0, a2 | 0);
}

function jsCall_vii_7(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(7, a1 | 0, a2 | 0);
}

function jsCall_vii_6(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(6, a1 | 0, a2 | 0);
}

function jsCall_vii_5(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(5, a1 | 0, a2 | 0);
}

function jsCall_vii_4(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(4, a1 | 0, a2 | 0);
}

function jsCall_vii_3(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(3, a1 | 0, a2 | 0);
}

function jsCall_vii_2(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(2, a1 | 0, a2 | 0);
}

function jsCall_vii_1(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(1, a1 | 0, a2 | 0);
}

function jsCall_vii_0(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(0, a1 | 0, a2 | 0);
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 63]() | 0;
}

function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 return;
}

function b9(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(9);
 return 0;
}

function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function b15(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = +p2;
 abort(15);
 return 0;
}

function b12(p0, p1, p2) {
 p0 = +p0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(12);
 return 0;
}

function jsCall_vid_19(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(19, a1 | 0, +a2);
}

function jsCall_vid_18(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(18, a1 | 0, +a2);
}

function jsCall_vid_17(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(17, a1 | 0, +a2);
}

function jsCall_vid_16(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(16, a1 | 0, +a2);
}

function jsCall_vid_15(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(15, a1 | 0, +a2);
}

function jsCall_vid_14(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(14, a1 | 0, +a2);
}

function jsCall_vid_13(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(13, a1 | 0, +a2);
}

function jsCall_vid_12(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(12, a1 | 0, +a2);
}

function jsCall_vid_11(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(11, a1 | 0, +a2);
}

function jsCall_vid_10(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(10, a1 | 0, +a2);
}

function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function b8(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = p2 | 0;
 abort(8);
 return 0;
}

function jsCall_vid_9(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(9, a1 | 0, +a2);
}

function jsCall_vid_8(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(8, a1 | 0, +a2);
}

function jsCall_vid_7(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(7, a1 | 0, +a2);
}

function jsCall_vid_6(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(6, a1 | 0, +a2);
}

function jsCall_vid_5(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(5, a1 | 0, +a2);
}

function jsCall_vid_4(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(4, a1 | 0, +a2);
}

function jsCall_vid_3(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(3, a1 | 0, +a2);
}

function jsCall_vid_2(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(2, a1 | 0, +a2);
}

function jsCall_vid_1(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(1, a1 | 0, +a2);
}

function jsCall_vid_0(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 jsCall_vid(0, a1 | 0, +a2);
}

function _isxdigit_l($c, $l) {
 $c = $c | 0;
 $l = $l | 0;
 return _isxdigit($c) | 0;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9bad_allocD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _copysignl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_copysign($x, $y));
}

function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg | 0;
 return;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 63]();
}

function b26(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(26);
}

function __ZNSt3__110moneypunctIwLb1EED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__110moneypunctIwLb0EED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__110moneypunctIcLb1EED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__110moneypunctIcLb0EED2Ev($this) {
 $this = $this | 0;
 return;
}

function _frexpl($x, $e) {
 $x = +$x;
 $e = $e | 0;
 return +(+_frexp($x, $e));
}

function b17(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = +p2;
 abort(17);
}

function b10(p0, p1, p2) {
 p0 = +p0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(10);
}

function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this | 0;
 return 16986;
}

function jsCall_ii_19(a1) {
 a1 = a1 | 0;
 return jsCall_ii(19, a1 | 0) | 0;
}

function jsCall_ii_18(a1) {
 a1 = a1 | 0;
 return jsCall_ii(18, a1 | 0) | 0;
}

function jsCall_ii_17(a1) {
 a1 = a1 | 0;
 return jsCall_ii(17, a1 | 0) | 0;
}

function jsCall_ii_16(a1) {
 a1 = a1 | 0;
 return jsCall_ii(16, a1 | 0) | 0;
}

function jsCall_ii_15(a1) {
 a1 = a1 | 0;
 return jsCall_ii(15, a1 | 0) | 0;
}

function jsCall_ii_14(a1) {
 a1 = a1 | 0;
 return jsCall_ii(14, a1 | 0) | 0;
}

function jsCall_ii_13(a1) {
 a1 = a1 | 0;
 return jsCall_ii(13, a1 | 0) | 0;
}

function jsCall_ii_12(a1) {
 a1 = a1 | 0;
 return jsCall_ii(12, a1 | 0) | 0;
}

function jsCall_ii_11(a1) {
 a1 = a1 | 0;
 return jsCall_ii(11, a1 | 0) | 0;
}

function jsCall_ii_10(a1) {
 a1 = a1 | 0;
 return jsCall_ii(10, a1 | 0) | 0;
}

function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(22);
 return 0.0;
}

function jsCall_ii_9(a1) {
 a1 = a1 | 0;
 return jsCall_ii(9, a1 | 0) | 0;
}

function jsCall_ii_8(a1) {
 a1 = a1 | 0;
 return jsCall_ii(8, a1 | 0) | 0;
}

function jsCall_ii_7(a1) {
 a1 = a1 | 0;
 return jsCall_ii(7, a1 | 0) | 0;
}

function jsCall_ii_6(a1) {
 a1 = a1 | 0;
 return jsCall_ii(6, a1 | 0) | 0;
}

function jsCall_ii_5(a1) {
 a1 = a1 | 0;
 return jsCall_ii(5, a1 | 0) | 0;
}

function jsCall_ii_4(a1) {
 a1 = a1 | 0;
 return jsCall_ii(4, a1 | 0) | 0;
}

function jsCall_ii_3(a1) {
 a1 = a1 | 0;
 return jsCall_ii(3, a1 | 0) | 0;
}

function jsCall_ii_2(a1) {
 a1 = a1 | 0;
 return jsCall_ii(2, a1 | 0) | 0;
}

function jsCall_ii_1(a1) {
 a1 = a1 | 0;
 return jsCall_ii(1, a1 | 0) | 0;
}

function jsCall_ii_0(a1) {
 a1 = a1 | 0;
 return jsCall_ii(0, a1 | 0) | 0;
}

function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_fmod($x, $y));
}

function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this | 0;
 return;
}

function jsCall_di_19(a1) {
 a1 = a1 | 0;
 return +jsCall_di(19, a1 | 0);
}

function jsCall_di_18(a1) {
 a1 = a1 | 0;
 return +jsCall_di(18, a1 | 0);
}

function jsCall_di_17(a1) {
 a1 = a1 | 0;
 return +jsCall_di(17, a1 | 0);
}

function jsCall_di_16(a1) {
 a1 = a1 | 0;
 return +jsCall_di(16, a1 | 0);
}

function jsCall_di_15(a1) {
 a1 = a1 | 0;
 return +jsCall_di(15, a1 | 0);
}

function jsCall_di_14(a1) {
 a1 = a1 | 0;
 return +jsCall_di(14, a1 | 0);
}

function jsCall_di_13(a1) {
 a1 = a1 | 0;
 return +jsCall_di(13, a1 | 0);
}

function jsCall_di_12(a1) {
 a1 = a1 | 0;
 return +jsCall_di(12, a1 | 0);
}

function jsCall_di_11(a1) {
 a1 = a1 | 0;
 return +jsCall_di(11, a1 | 0);
}

function jsCall_di_10(a1) {
 a1 = a1 | 0;
 return +jsCall_di(10, a1 | 0);
}

function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(18);
 return 0;
}

function __ZNSt3__18messagesIwED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__18messagesIcED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17collateIwED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17collateIcED2Ev($this) {
 $this = $this | 0;
 return;
}

function jsCall_di_9(a1) {
 a1 = a1 | 0;
 return +jsCall_di(9, a1 | 0);
}

function jsCall_di_8(a1) {
 a1 = a1 | 0;
 return +jsCall_di(8, a1 | 0);
}

function jsCall_di_7(a1) {
 a1 = a1 | 0;
 return +jsCall_di(7, a1 | 0);
}

function jsCall_di_6(a1) {
 a1 = a1 | 0;
 return +jsCall_di(6, a1 | 0);
}

function jsCall_di_5(a1) {
 a1 = a1 | 0;
 return +jsCall_di(5, a1 | 0);
}

function jsCall_di_4(a1) {
 a1 = a1 | 0;
 return +jsCall_di(4, a1 | 0);
}

function jsCall_di_3(a1) {
 a1 = a1 | 0;
 return +jsCall_di(3, a1 | 0);
}

function jsCall_di_2(a1) {
 a1 = a1 | 0;
 return +jsCall_di(2, a1 | 0);
}

function jsCall_di_1(a1) {
 a1 = a1 | 0;
 return +jsCall_di(1, a1 | 0);
}

function jsCall_di_0(a1) {
 a1 = a1 | 0;
 return +jsCall_di(0, a1 | 0);
}

function __Znaj($size) {
 $size = $size | 0;
 return __Znwj($size) | 0;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function __ZdaPv($ptr) {
 $ptr = $ptr | 0;
 __ZdlPv($ptr);
 return;
}

function __ZNSt9type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9exceptionD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9bad_allocD2Ev($this) {
 $this = $this | 0;
 return;
}

function jsCall_vi_19(a1) {
 a1 = a1 | 0;
 jsCall_vi(19, a1 | 0);
}

function jsCall_vi_18(a1) {
 a1 = a1 | 0;
 jsCall_vi(18, a1 | 0);
}

function jsCall_vi_17(a1) {
 a1 = a1 | 0;
 jsCall_vi(17, a1 | 0);
}

function jsCall_vi_16(a1) {
 a1 = a1 | 0;
 jsCall_vi(16, a1 | 0);
}

function jsCall_vi_15(a1) {
 a1 = a1 | 0;
 jsCall_vi(15, a1 | 0);
}

function jsCall_vi_14(a1) {
 a1 = a1 | 0;
 jsCall_vi(14, a1 | 0);
}

function jsCall_vi_13(a1) {
 a1 = a1 | 0;
 jsCall_vi(13, a1 | 0);
}

function jsCall_vi_12(a1) {
 a1 = a1 | 0;
 jsCall_vi(12, a1 | 0);
}

function jsCall_vi_11(a1) {
 a1 = a1 | 0;
 jsCall_vi(11, a1 | 0);
}

function jsCall_vi_10(a1) {
 a1 = a1 | 0;
 jsCall_vi(10, a1 | 0);
}

function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 _free($ptr);
 return;
}

function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0 | 0;
 return;
}

function jsCall_vi_9(a1) {
 a1 = a1 | 0;
 jsCall_vi(9, a1 | 0);
}

function jsCall_vi_8(a1) {
 a1 = a1 | 0;
 jsCall_vi(8, a1 | 0);
}

function jsCall_vi_7(a1) {
 a1 = a1 | 0;
 jsCall_vi(7, a1 | 0);
}

function jsCall_vi_6(a1) {
 a1 = a1 | 0;
 jsCall_vi(6, a1 | 0);
}

function jsCall_vi_5(a1) {
 a1 = a1 | 0;
 jsCall_vi(5, a1 | 0);
}

function jsCall_vi_4(a1) {
 a1 = a1 | 0;
 jsCall_vi(4, a1 | 0);
}

function jsCall_vi_3(a1) {
 a1 = a1 | 0;
 jsCall_vi(3, a1 | 0);
}

function jsCall_vi_2(a1) {
 a1 = a1 | 0;
 jsCall_vi(2, a1 | 0);
}

function jsCall_vi_1(a1) {
 a1 = a1 | 0;
 jsCall_vi(1, a1 | 0);
}

function jsCall_vi_0(a1) {
 a1 = a1 | 0;
 jsCall_vi(0, a1 | 0);
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function _freelocale($l) {
 $l = $l | 0;
 _free($l);
 return;
}

function b5(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(5);
}

function _catclose($catd) {
 $catd = $catd | 0;
 return 0;
}

function b2(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 abort(2);
}

function b16(p0) {
 p0 = p0 | 0;
 abort(16);
 return 0.0;
}

function b7(p0) {
 p0 = p0 | 0;
 abort(7);
 return 0;
}

function ___unlockfile($f) {
 $f = $f | 0;
 return;
}

function ___lockfile($f) {
 $f = $f | 0;
 return 0;
}

function jsCall_i_19() {
 return jsCall_i(19) | 0;
}

function jsCall_i_18() {
 return jsCall_i(18) | 0;
}

function jsCall_i_17() {
 return jsCall_i(17) | 0;
}

function jsCall_i_16() {
 return jsCall_i(16) | 0;
}

function jsCall_i_15() {
 return jsCall_i(15) | 0;
}

function jsCall_i_14() {
 return jsCall_i(14) | 0;
}

function jsCall_i_13() {
 return jsCall_i(13) | 0;
}

function jsCall_i_12() {
 return jsCall_i(12) | 0;
}

function jsCall_i_11() {
 return jsCall_i(11) | 0;
}

function jsCall_i_10() {
 return jsCall_i(10) | 0;
}

function __GLOBAL__sub_I_iostream_cpp() {
 return;
}

function jsCall_i_9() {
 return jsCall_i(9) | 0;
}

function jsCall_i_8() {
 return jsCall_i(8) | 0;
}

function jsCall_i_7() {
 return jsCall_i(7) | 0;
}

function jsCall_i_6() {
 return jsCall_i(6) | 0;
}

function jsCall_i_5() {
 return jsCall_i(5) | 0;
}

function jsCall_i_4() {
 return jsCall_i(4) | 0;
}

function jsCall_i_3() {
 return jsCall_i(3) | 0;
}

function jsCall_i_2() {
 return jsCall_i(2) | 0;
}

function jsCall_i_1() {
 return jsCall_i(1) | 0;
}

function jsCall_i_0() {
 return jsCall_i(0) | 0;
}

function ___ctype_toupper_loc() {
 return 3780;
}

function ___ctype_tolower_loc() {
 return 3776;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b4(p0) {
 p0 = p0 | 0;
 abort(4);
}

function ___ctype_b_loc() {
 return 3784;
}

function jsCall_v_19() {
 jsCall_v(19);
}

function jsCall_v_18() {
 jsCall_v(18);
}

function jsCall_v_17() {
 jsCall_v(17);
}

function jsCall_v_16() {
 jsCall_v(16);
}

function jsCall_v_15() {
 jsCall_v(15);
}

function jsCall_v_14() {
 jsCall_v(14);
}

function jsCall_v_13() {
 jsCall_v(13);
}

function jsCall_v_12() {
 jsCall_v(12);
}

function jsCall_v_11() {
 jsCall_v(11);
}

function jsCall_v_10() {
 jsCall_v(10);
}

function b23() {
 abort(23);
 return 0;
}

function jsCall_v_9() {
 jsCall_v(9);
}

function jsCall_v_8() {
 jsCall_v(8);
}

function jsCall_v_7() {
 jsCall_v(7);
}

function jsCall_v_6() {
 jsCall_v(6);
}

function jsCall_v_5() {
 jsCall_v(5);
}

function jsCall_v_4() {
 jsCall_v(4);
}

function jsCall_v_3() {
 jsCall_v(3);
}

function jsCall_v_2() {
 jsCall_v(2);
}

function jsCall_v_1() {
 jsCall_v(1);
}

function jsCall_v_0() {
 jsCall_v(0);
}

function b27() {
 abort(27);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,jsCall_iiiiiiii_0,b0,jsCall_iiiiiiii_1,b0,jsCall_iiiiiiii_2,b0,jsCall_iiiiiiii_3,b0,jsCall_iiiiiiii_4,b0,jsCall_iiiiiiii_5,b0,jsCall_iiiiiiii_6,b0,jsCall_iiiiiiii_7,b0,jsCall_iiiiiiii_8,b0,jsCall_iiiiiiii_9,b0,jsCall_iiiiiiii_10,b0,jsCall_iiiiiiii_11,b0,jsCall_iiiiiiii_12,b0,jsCall_iiiiiiii_13
,b0,jsCall_iiiiiiii_14,b0,jsCall_iiiiiiii_15,b0,jsCall_iiiiiiii_16,b0,jsCall_iiiiiiii_17,b0,jsCall_iiiiiiii_18,b0,jsCall_iiiiiiii_19,b0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iiiiiid = [b1,b1,jsCall_iiiiiid_0,b1,jsCall_iiiiiid_1,b1,jsCall_iiiiiid_2,b1,jsCall_iiiiiid_3,b1,jsCall_iiiiiid_4,b1,jsCall_iiiiiid_5,b1,jsCall_iiiiiid_6,b1,jsCall_iiiiiid_7,b1,jsCall_iiiiiid_8,b1,jsCall_iiiiiid_9,b1,jsCall_iiiiiid_10,b1,jsCall_iiiiiid_11,b1,jsCall_iiiiiid_12,b1,jsCall_iiiiiid_13
,b1,jsCall_iiiiiid_14,b1,jsCall_iiiiiid_15,b1,jsCall_iiiiiid_16,b1,jsCall_iiiiiid_17,b1,jsCall_iiiiiid_18,b1,jsCall_iiiiiid_19,b1,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vid = [b2,b2,jsCall_vid_0,b2,jsCall_vid_1,b2,jsCall_vid_2,b2,jsCall_vid_3,b2,jsCall_vid_4,b2,jsCall_vid_5,b2,jsCall_vid_6,b2,jsCall_vid_7,b2,jsCall_vid_8,b2,jsCall_vid_9,b2,jsCall_vid_10,b2,jsCall_vid_11,b2,jsCall_vid_12,b2,jsCall_vid_13
,b2,jsCall_vid_14,b2,jsCall_vid_15,b2,jsCall_vid_16,b2,jsCall_vid_17,b2,jsCall_vid_18,b2,jsCall_vid_19,b2,__ZN7Options13setOutputStepEd,__ZN7Options20setAbsoluteToleranceEd,__ZN7Options20setRelativeToleranceEd,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_viiiii = [b3,b3,jsCall_viiiii_0,b3,jsCall_viiiii_1,b3,jsCall_viiiii_2,b3,jsCall_viiiii_3,b3,jsCall_viiiii_4,b3,jsCall_viiiii_5,b3,jsCall_viiiii_6,b3,jsCall_viiiii_7,b3,jsCall_viiiii_8,b3,jsCall_viiiii_9,b3,jsCall_viiiii_10,b3,jsCall_viiiii_11,b3,jsCall_viiiii_12,b3,jsCall_viiiii_13
,b3,jsCall_viiiii_14,b3,jsCall_viiiii_15,b3,jsCall_viiiii_16,b3,jsCall_viiiii_17,b3,jsCall_viiiii_18,b3,jsCall_viiiii_19,b3,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vi = [b4,b4,jsCall_vi_0,b4,jsCall_vi_1,b4,jsCall_vi_2,b4,jsCall_vi_3,b4,jsCall_vi_4,b4,jsCall_vi_5,b4,jsCall_vi_6,b4,jsCall_vi_7,b4,jsCall_vi_8,b4,jsCall_vi_9,b4,jsCall_vi_10,b4,jsCall_vi_11,b4,jsCall_vi_12,b4,jsCall_vi_13
,b4,jsCall_vi_14,b4,jsCall_vi_15,b4,jsCall_vi_16,b4,jsCall_vi_17,b4,jsCall_vi_18,b4,jsCall_vi_19,b4,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN10__cxxabiv119__pointer_type_infoD0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__110__stdinbufIwED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__111__stdoutbufIcED0Ev,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev
,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__17collateIcED2Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED2Ev,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED2Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED2Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED2Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED2Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED2Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED2Ev,__ZNSt3__18messagesIwED0Ev
,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZN10emscripten8internal14raw_destructorI6VectorEEvPT_,__ZN6Vector5PrintEv,__ZN10emscripten8internal14raw_destructorI4GearEEvPT_,__ZN10emscripten8internal14raw_destructorI7OptionsEEvPT_,__ZN10emscripten8internal14raw_destructorI8SolPointEEvPT_,__ZN8SolPoint5PrintEv,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,_cleanup,_cleanup_125,__ZNSt3__18ios_base4InitD2Ev,__ZNSt3__112__do_nothingEPv,__ZNSt3__16locale2id6__initEv
,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,___cxx_global_array_dtor,___cxx_global_array_dtor_46,___cxx_global_array_dtor_61,___cxx_global_array_dtor_85,___cxx_global_array_dtor_109,___cxx_global_array_dtor_112,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev,_free,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vii = [b5,b5,jsCall_vii_0,b5,jsCall_vii_1,b5,jsCall_vii_2,b5,jsCall_vii_3,b5,jsCall_vii_4,b5,jsCall_vii_5,b5,jsCall_vii_6,b5,jsCall_vii_7,b5,jsCall_vii_8,b5,jsCall_vii_9,b5,jsCall_vii_10,b5,jsCall_vii_11,b5,jsCall_vii_12,b5,jsCall_vii_13
,b5,jsCall_vii_14,b5,jsCall_vii_15,b5,jsCall_vii_16,b5,jsCall_vii_17,b5,jsCall_vii_18,b5,jsCall_vii_19,b5,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv
,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,__ZN10emscripten8internal13MethodInvokerIM6VectorFvvEvPS2_JEE6invokeERKS4_S5_,__ZN4Gear5SolveEv,__ZN8SolPoint8GetSolveEv,__ZN10emscripten8internal13MethodInvokerIM8SolPointFvvEvPS2_JEE6invokeERKS4_S5_,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiiiii = [b6,b6,jsCall_iiiiiii_0,b6,jsCall_iiiiiii_1,b6,jsCall_iiiiiii_2,b6,jsCall_iiiiiii_3,b6,jsCall_iiiiiii_4,b6,jsCall_iiiiiii_5,b6,jsCall_iiiiiii_6,b6,jsCall_iiiiiii_7,b6,jsCall_iiiiiii_8,b6,jsCall_iiiiiii_9,b6,jsCall_iiiiiii_10,b6,jsCall_iiiiiii_11,b6,jsCall_iiiiiii_12,b6,jsCall_iiiiiii_13
,b6,jsCall_iiiiiii_14,b6,jsCall_iiiiiii_15,b6,jsCall_iiiiiii_16,b6,jsCall_iiiiiii_17,b6,jsCall_iiiiiii_18,b6,jsCall_iiiiiii_19,b6,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm
,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_ii = [b7,b7,jsCall_ii_0,b7,jsCall_ii_1,b7,jsCall_ii_2,b7,jsCall_ii_3,b7,jsCall_ii_4,b7,jsCall_ii_5,b7,jsCall_ii_6,b7,jsCall_ii_7,b7,jsCall_ii_8,b7,jsCall_ii_9,b7,jsCall_ii_10,b7,jsCall_ii_11,b7,jsCall_ii_12,b7,jsCall_ii_13
,b7,jsCall_ii_14,b7,jsCall_ii_15,b7,jsCall_ii_16,b7,jsCall_ii_17,b7,jsCall_ii_18,b7,jsCall_ii_19,b7,__ZNKSt9bad_alloc4whatEv,___stdio_close,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv
,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv
,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZN10emscripten8internal13getActualTypeI6VectorEEPKvPT_,__ZN10emscripten8internal12operator_newI6VectorJiEEEPT_DpOT0_,__ZN10emscripten8internal13getActualTypeI4GearEEPKvPT_,__ZN10emscripten8internal13getActualTypeI7OptionsEEPKvPT_,__ZN10emscripten8internal7InvokerIP7OptionsJEE6invokeEPFS3_vE,__ZN10emscripten8internal13getActualTypeI8SolPointEEPKvPT_,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iidi = [b8,b8,jsCall_iidi_0,b8,jsCall_iidi_1,b8,jsCall_iidi_2,b8,jsCall_iidi_3,b8,jsCall_iidi_4,b8,jsCall_iidi_5,b8,jsCall_iidi_6,b8,jsCall_iidi_7,b8,jsCall_iidi_8,b8,jsCall_iidi_9,b8,jsCall_iidi_10,b8,jsCall_iidi_11,b8,jsCall_iidi_12,b8,jsCall_iidi_13
,b8,jsCall_iidi_14,b8,jsCall_iidi_15,b8,jsCall_iidi_16,b8,jsCall_iidi_17,b8,jsCall_iidi_18,b8,jsCall_iidi_19,b8,__ZN10emscripten8internal7InvokerIP8SolPointJOdO6VectorEE6invokeEPFS3_S4_S6_EdPS5_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiii = [b9,b9,jsCall_iiii_0,b9,jsCall_iiii_1,b9,jsCall_iiii_2,b9,jsCall_iiii_3,b9,jsCall_iiii_4,b9,jsCall_iiii_5,b9,jsCall_iiii_6,b9,jsCall_iiii_7,b9,jsCall_iiii_8,b9,jsCall_iiii_9,b9,jsCall_iiii_10,b9,jsCall_iiii_11,b9,jsCall_iiii_12,b9,jsCall_iiii_13
,b9,jsCall_iiii_14,b9,jsCall_iiii_15,b9,jsCall_iiii_16,b9,jsCall_iiii_17,b9,jsCall_iiii_18,b9,jsCall_iiii_19,b9,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,_sn_write,___stdout_write,___stdio_seek,___stdio_write,___stdio_read,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNKSt3__17collateIcE7do_hashEPKcS3_
,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,_do_read,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_vdii = [b10,b10,jsCall_vdii_0,b10,jsCall_vdii_1,b10,jsCall_vdii_2,b10,jsCall_vdii_3,b10,jsCall_vdii_4,b10,jsCall_vdii_5,b10,jsCall_vdii_6,b10,jsCall_vdii_7,b10,jsCall_vdii_8,b10,jsCall_vdii_9,b10,jsCall_vdii_10,b10,jsCall_vdii_11,b10,jsCall_vdii_12,b10,jsCall_vdii_13
,b10,jsCall_vdii_14,b10,jsCall_vdii_15,b10,jsCall_vdii_16,b10,jsCall_vdii_17,b10,jsCall_vdii_18,b10,jsCall_vdii_19,b10,__Z5LotkadPdS_,__Z1FdPdS_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_diiid = [b11,b11,jsCall_diiid_0,b11,jsCall_diiid_1,b11,jsCall_diiid_2,b11,jsCall_diiid_3,b11,jsCall_diiid_4,b11,jsCall_diiid_5,b11,jsCall_diiid_6,b11,jsCall_diiid_7,b11,jsCall_diiid_8,b11,jsCall_diiid_9,b11,jsCall_diiid_10,b11,jsCall_diiid_11,b11,jsCall_diiid_12,b11,jsCall_diiid_13
,b11,jsCall_diiid_14,b11,jsCall_diiid_15,b11,jsCall_diiid_16,b11,jsCall_diiid_17,b11,jsCall_diiid_18,b11,jsCall_diiid_19,b11,__ZN10emscripten8internal13MethodInvokerIM6VectorFRdidES3_PS2_JidEE6invokeERKS5_S6_id,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_idii = [b12,b12,jsCall_idii_0,b12,jsCall_idii_1,b12,jsCall_idii_2,b12,jsCall_idii_3,b12,jsCall_idii_4,b12,jsCall_idii_5,b12,jsCall_idii_6,b12,jsCall_idii_7,b12,jsCall_idii_8,b12,jsCall_idii_9,b12,jsCall_idii_10,b12,jsCall_idii_11,b12,jsCall_idii_12,b12,jsCall_idii_13
,b12,jsCall_idii_14,b12,jsCall_idii_15,b12,jsCall_idii_16,b12,jsCall_idii_17,b12,jsCall_idii_18,b12,jsCall_idii_19,b12,__Z14GetLotkaSolverdR6VectorR7Options,__Z15ChemistrySolverdR6VectorR7Options,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_idiii = [b13,b13,jsCall_idiii_0,b13,jsCall_idiii_1,b13,jsCall_idiii_2,b13,jsCall_idiii_3,b13,jsCall_idiii_4,b13,jsCall_idiii_5,b13,jsCall_idiii_6,b13,jsCall_idiii_7,b13,jsCall_idiii_8,b13,jsCall_idiii_9,b13,jsCall_idiii_10,b13,jsCall_idiii_11,b13,jsCall_idiii_12,b13,jsCall_idiii_13
,b13,jsCall_idiii_14,b13,jsCall_idiii_15,b13,jsCall_idiii_16,b13,jsCall_idiii_17,b13,jsCall_idiii_18,b13,jsCall_idiii_19,b13,__Z9GetSolverdR6VectorjR7Options,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_viiiiii = [b14,b14,jsCall_viiiiii_0,b14,jsCall_viiiiii_1,b14,jsCall_viiiiii_2,b14,jsCall_viiiiii_3,b14,jsCall_viiiiii_4,b14,jsCall_viiiiii_5,b14,jsCall_viiiiii_6,b14,jsCall_viiiiii_7,b14,jsCall_viiiiii_8,b14,jsCall_viiiiii_9,b14,jsCall_viiiiii_10,b14,jsCall_viiiiii_11,b14,jsCall_viiiiii_12,b14,jsCall_viiiiii_13
,b14,jsCall_viiiiii_14,b14,jsCall_viiiiii_15,b14,jsCall_viiiiii_16,b14,jsCall_viiiiii_17,b14,jsCall_viiiiii_18,b14,jsCall_viiiiii_19,b14,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_iiid = [b15,b15,jsCall_iiid_0,b15,jsCall_iiid_1,b15,jsCall_iiid_2,b15,jsCall_iiid_3,b15,jsCall_iiid_4,b15,jsCall_iiid_5,b15,jsCall_iiid_6,b15,jsCall_iiid_7,b15,jsCall_iiid_8,b15,jsCall_iiid_9,b15,jsCall_iiid_10,b15,jsCall_iiid_11,b15,jsCall_iiid_12,b15,jsCall_iiid_13
,b15,jsCall_iiid_14,b15,jsCall_iiid_15,b15,jsCall_iiid_16,b15,jsCall_iiid_17,b15,jsCall_iiid_18,b15,jsCall_iiid_19,b15,__ZN6Vector10SetElementEid,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_di = [b16,b16,jsCall_di_0,b16,jsCall_di_1,b16,jsCall_di_2,b16,jsCall_di_3,b16,jsCall_di_4,b16,jsCall_di_5,b16,jsCall_di_6,b16,jsCall_di_7,b16,jsCall_di_8,b16,jsCall_di_9,b16,jsCall_di_10,b16,jsCall_di_11,b16,jsCall_di_12,b16,jsCall_di_13
,b16,jsCall_di_14,b16,jsCall_di_15,b16,jsCall_di_16,b16,jsCall_di_17,b16,jsCall_di_18,b16,jsCall_di_19,b16,__ZNK7Options13getOutputStepEv,__ZNK7Options20getAbsoluteToleranceEv,__ZNK7Options20getRelativeToleranceEv,__ZN8SolPoint7GetTimeEv,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_viid = [b17,b17,jsCall_viid_0,b17,jsCall_viid_1,b17,jsCall_viid_2,b17,jsCall_viid_3,b17,jsCall_viid_4,b17,jsCall_viid_5,b17,jsCall_viid_6,b17,jsCall_viid_7,b17,jsCall_viid_8,b17,jsCall_viid_9,b17,jsCall_viid_10,b17,jsCall_viid_11,b17,jsCall_viid_12,b17,jsCall_viid_13
,b17,jsCall_viid_14,b17,jsCall_viid_15,b17,jsCall_viid_16,b17,jsCall_viid_17,b17,jsCall_viid_18,b17,jsCall_viid_19,b17,__ZN10emscripten8internal12SetterPolicyIM7OptionsFvdEE3setIS2_EEvRKS4_RT_d,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_iii = [b18,b18,jsCall_iii_0,b18,jsCall_iii_1,b18,jsCall_iii_2,b18,jsCall_iii_3,b18,jsCall_iii_4,b18,jsCall_iii_5,b18,jsCall_iii_6,b18,jsCall_iii_7,b18,jsCall_iii_8,b18,jsCall_iii_9,b18,jsCall_iii_10,b18,jsCall_iii_11,b18,jsCall_iii_12,b18,jsCall_iii_13
,b18,jsCall_iii_14,b18,jsCall_iii_15,b18,jsCall_iii_16,b18,jsCall_iii_17,b18,jsCall_iii_18,b18,jsCall_iii_19,b18,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc,__ZN10emscripten8internal7InvokerIP6VectorJOiEE6invokeEPFS3_S4_Ei,__ZN10emscripten8internal13MethodInvokerIM4GearF8SolPointvES3_PS2_JEE6invokeERKS5_S6_,__ZN10emscripten8internal12operator_newI8SolPointJd6VectorEEEPT_DpOT0_
,__ZN10emscripten8internal13MethodInvokerIM8SolPointF6VectorvES3_PS2_JEE6invokeERKS5_S6_,b18,b18,b18,b18];
var FUNCTION_TABLE_iiiiii = [b19,b19,jsCall_iiiiii_0,b19,jsCall_iiiiii_1,b19,jsCall_iiiiii_2,b19,jsCall_iiiiii_3,b19,jsCall_iiiiii_4,b19,jsCall_iiiiii_5,b19,jsCall_iiiiii_6,b19,jsCall_iiiiii_7,b19,jsCall_iiiiii_8,b19,jsCall_iiiiii_9,b19,jsCall_iiiiii_10,b19,jsCall_iiiiii_11,b19,jsCall_iiiiii_12,b19,jsCall_iiiiii_13
,b19,jsCall_iiiiii_14,b19,jsCall_iiiiii_15,b19,jsCall_iiiiii_16,b19,jsCall_iiiiii_17,b19,jsCall_iiiiii_18,b19,jsCall_iiiiii_19,b19,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_
,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b19,b19];
var FUNCTION_TABLE_diii = [b20,b20,jsCall_diii_0,b20,jsCall_diii_1,b20,jsCall_diii_2,b20,jsCall_diii_3,b20,jsCall_diii_4,b20,jsCall_diii_5,b20,jsCall_diii_6,b20,jsCall_diii_7,b20,jsCall_diii_8,b20,jsCall_diii_9,b20,jsCall_diii_10,b20,jsCall_diii_11,b20,jsCall_diii_12,b20,jsCall_diii_13
,b20,jsCall_diii_14,b20,jsCall_diii_15,b20,jsCall_diii_16,b20,jsCall_diii_17,b20,jsCall_diii_18,b20,jsCall_diii_19,b20,__ZN10emscripten8internal13MethodInvokerIM6VectorFdiEdPS2_JiEE6invokeERKS4_S5_i,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20];
var FUNCTION_TABLE_iidiii = [b21,b21,jsCall_iidiii_0,b21,jsCall_iidiii_1,b21,jsCall_iidiii_2,b21,jsCall_iidiii_3,b21,jsCall_iidiii_4,b21,jsCall_iidiii_5,b21,jsCall_iidiii_6,b21,jsCall_iidiii_7,b21,jsCall_iidiii_8,b21,jsCall_iidiii_9,b21,jsCall_iidiii_10,b21,jsCall_iidiii_11,b21,jsCall_iidiii_12,b21,jsCall_iidiii_13
,b21,jsCall_iidiii_14,b21,jsCall_iidiii_15,b21,jsCall_iidiii_16,b21,jsCall_iidiii_17,b21,jsCall_iidiii_18,b21,jsCall_iidiii_19,b21,__ZN10emscripten8internal7InvokerIP4GearJdR6VectorjR7OptionsEE6invokeEPFS3_dS5_jS7_EdPS4_jPS6_,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21];
var FUNCTION_TABLE_dii = [b22,b22,jsCall_dii_0,b22,jsCall_dii_1,b22,jsCall_dii_2,b22,jsCall_dii_3,b22,jsCall_dii_4,b22,jsCall_dii_5,b22,jsCall_dii_6,b22,jsCall_dii_7,b22,jsCall_dii_8,b22,jsCall_dii_9,b22,jsCall_dii_10,b22,jsCall_dii_11,b22,jsCall_dii_12,b22,jsCall_dii_13
,b22,jsCall_dii_14,b22,jsCall_dii_15,b22,jsCall_dii_16,b22,jsCall_dii_17,b22,jsCall_dii_18,b22,jsCall_dii_19,b22,__ZN6Vector10GetElementEi,__ZN10emscripten8internal12GetterPolicyIM7OptionsKFdvEE3getIS2_EEdRKS4_RKT_,__ZN10emscripten8internal13MethodInvokerIM8SolPointFdvEdPS2_JEE6invokeERKS4_S5_,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22];
var FUNCTION_TABLE_i = [b23,b23,jsCall_i_0,b23,jsCall_i_1,b23,jsCall_i_2,b23,jsCall_i_3,b23,jsCall_i_4,b23,jsCall_i_5,b23,jsCall_i_6,b23,jsCall_i_7,b23,jsCall_i_8,b23,jsCall_i_9,b23,jsCall_i_10,b23,jsCall_i_11,b23,jsCall_i_12,b23,jsCall_i_13
,b23,jsCall_i_14,b23,jsCall_i_15,b23,jsCall_i_16,b23,jsCall_i_17,b23,jsCall_i_18,b23,jsCall_i_19,b23,__ZN10emscripten8internal12operator_newI7OptionsJEEEPT_DpOT0_,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23];
var FUNCTION_TABLE_iiiii = [b24,b24,jsCall_iiiii_0,b24,jsCall_iiiii_1,b24,jsCall_iiiii_2,b24,jsCall_iiiii_3,b24,jsCall_iiiii_4,b24,jsCall_iiiii_5,b24,jsCall_iiiii_6,b24,jsCall_iiiii_7,b24,jsCall_iiiii_8,b24,jsCall_iiiii_9,b24,jsCall_iiiii_10,b24,jsCall_iiiii_11,b24,jsCall_iiiii_12,b24,jsCall_iiiii_13
,b24,jsCall_iiiii_14,b24,jsCall_iiiii_15,b24,jsCall_iiiii_16,b24,jsCall_iiiii_17,b24,jsCall_iiiii_18,b24,jsCall_iiiii_19,b24,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24];
var FUNCTION_TABLE_iidii = [b25,b25,jsCall_iidii_0,b25,jsCall_iidii_1,b25,jsCall_iidii_2,b25,jsCall_iidii_3,b25,jsCall_iidii_4,b25,jsCall_iidii_5,b25,jsCall_iidii_6,b25,jsCall_iidii_7,b25,jsCall_iidii_8,b25,jsCall_iidii_9,b25,jsCall_iidii_10,b25,jsCall_iidii_11,b25,jsCall_iidii_12,b25,jsCall_iidii_13
,b25,jsCall_iidii_14,b25,jsCall_iidii_15,b25,jsCall_iidii_16,b25,jsCall_iidii_17,b25,jsCall_iidii_18,b25,jsCall_iidii_19,b25,__ZN10emscripten8internal7InvokerIP4GearJdR6VectorR7OptionsEE6invokeEPFS3_dS5_S7_EdPS4_PS6_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25];
var FUNCTION_TABLE_viii = [b26,b26,jsCall_viii_0,b26,jsCall_viii_1,b26,jsCall_viii_2,b26,jsCall_viii_3,b26,jsCall_viii_4,b26,jsCall_viii_5,b26,jsCall_viii_6,b26,jsCall_viii_7,b26,jsCall_viii_8,b26,jsCall_viii_9,b26,jsCall_viii_10,b26,jsCall_viii_11,b26,jsCall_viii_12,b26,jsCall_viii_13
,b26,jsCall_viii_14,b26,jsCall_viii_15,b26,jsCall_viii_16,b26,jsCall_viii_17,b26,jsCall_viii_18,b26,jsCall_viii_19,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26];
var FUNCTION_TABLE_v = [b27,b27,jsCall_v_0,b27,jsCall_v_1,b27,jsCall_v_2,b27,jsCall_v_3,b27,jsCall_v_4,b27,jsCall_v_5,b27,jsCall_v_6,b27,jsCall_v_7,b27,jsCall_v_8,b27,jsCall_v_9,b27,jsCall_v_10,b27,jsCall_v_11,b27,jsCall_v_12,b27,jsCall_v_13
,b27,jsCall_v_14,b27,jsCall_v_15,b27,jsCall_v_16,b27,jsCall_v_17,b27,jsCall_v_18,b27,jsCall_v_19,b27,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27];
var FUNCTION_TABLE_iiiiiiiii = [b28,b28,jsCall_iiiiiiiii_0,b28,jsCall_iiiiiiiii_1,b28,jsCall_iiiiiiiii_2,b28,jsCall_iiiiiiiii_3,b28,jsCall_iiiiiiiii_4,b28,jsCall_iiiiiiiii_5,b28,jsCall_iiiiiiiii_6,b28,jsCall_iiiiiiiii_7,b28,jsCall_iiiiiiiii_8,b28,jsCall_iiiiiiiii_9,b28,jsCall_iiiiiiiii_10,b28,jsCall_iiiiiiiii_11,b28,jsCall_iiiiiiiii_12,b28,jsCall_iiiiiiiii_13
,b28,jsCall_iiiiiiiii_14,b28,jsCall_iiiiiiiii_15,b28,jsCall_iiiiiiiii_16,b28,jsCall_iiiiiiiii_17,b28,jsCall_iiiiiiiii_18,b28,jsCall_iiiiiiiii_19,b28,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28];
var FUNCTION_TABLE_iiiiid = [b29,b29,jsCall_iiiiid_0,b29,jsCall_iiiiid_1,b29,jsCall_iiiiid_2,b29,jsCall_iiiiid_3,b29,jsCall_iiiiid_4,b29,jsCall_iiiiid_5,b29,jsCall_iiiiid_6,b29,jsCall_iiiiid_7,b29,jsCall_iiiiid_8,b29,jsCall_iiiiid_9,b29,jsCall_iiiiid_10,b29,jsCall_iiiiid_11,b29,jsCall_iiiiid_12,b29,jsCall_iiiiid_13
,b29,jsCall_iiiiid_14,b29,jsCall_iiiiid_15,b29,jsCall_iiiiid_16,b29,jsCall_iiiiid_17,b29,jsCall_iiiiid_18,b29,jsCall_iiiiid_19,b29,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29];
var FUNCTION_TABLE_viiii = [b30,b30,jsCall_viiii_0,b30,jsCall_viiii_1,b30,jsCall_viiii_2,b30,jsCall_viiii_3,b30,jsCall_viiii_4,b30,jsCall_viiii_5,b30,jsCall_viiii_6,b30,jsCall_viiii_7,b30,jsCall_viiii_8,b30,jsCall_viiii_9,b30,jsCall_viiii_10,b30,jsCall_viiii_11,b30,jsCall_viiii_12,b30,jsCall_viiii_13
,b30,jsCall_viiii_14,b30,jsCall_viiii_15,b30,jsCall_viiii_16,b30,jsCall_viiii_17,b30,jsCall_viiii_18,b30,jsCall_viiii_19,b30,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30];

  return { ___cxa_can_catch: ___cxa_can_catch, _fflush: _fflush, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, ___getTypeName: ___getTypeName, _bitshift64Lshr: _bitshift64Lshr, _free: _free, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_000101: __GLOBAL__I_000101, __GLOBAL__sub_I_bindings_cpp: __GLOBAL__sub_I_bindings_cpp, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vid: dynCall_vid, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_iidi: dynCall_iidi, dynCall_iiii: dynCall_iiii, dynCall_vdii: dynCall_vdii, dynCall_diiid: dynCall_diiid, dynCall_idii: dynCall_idii, dynCall_idiii: dynCall_idiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iiid: dynCall_iiid, dynCall_di: dynCall_di, dynCall_viid: dynCall_viid, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_iidiii: dynCall_iidiii, dynCall_dii: dynCall_dii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_iidii: dynCall_iidii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var __GLOBAL__sub_I_bindings_cpp = Module["__GLOBAL__sub_I_bindings_cpp"] = asm["__GLOBAL__sub_I_bindings_cpp"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = asm["__GLOBAL__I_000101"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidi = Module["dynCall_iidi"] = asm["dynCall_iidi"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vdii = Module["dynCall_vdii"] = asm["dynCall_vdii"];
var dynCall_diiid = Module["dynCall_diiid"] = asm["dynCall_diiid"];
var dynCall_idii = Module["dynCall_idii"] = asm["dynCall_idii"];
var dynCall_idiii = Module["dynCall_idiii"] = asm["dynCall_idiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_iidiii = Module["dynCall_iidiii"] = asm["dynCall_iidiii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iidii = Module["dynCall_iidii"] = asm["dynCall_iidii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






